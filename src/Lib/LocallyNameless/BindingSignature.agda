--------------------------------------------------------------
-- This file was adapted from the code accompanying the paper
--
-- Andrew M. Pitts, "Locally Nameless Sets", POPL 2023
--
-- (¬© 2023 Andrew Pitts, University of Cambridge)
--
-- https://amp12.github.io/LocallyNamelessSets/
--------------------------------------------------------------

module Lib.LocallyNameless.BindingSignature where

open import Lib.Prelude hiding (‚ü¶_‚üß) renaming (_‚àô_ to _‚àô·µñ_)
open import Lib.Dec
open import Lib.Finset
open import Lib.Nat
open import Lib.Vector

open import Lib.LocallyNameless.Unfinite
open import Lib.LocallyNameless.oc-Sets
open import Lib.LocallyNameless.Freshness
open import Lib.LocallyNameless.LocalClosedness
open import Lib.LocallyNameless.Support
open import Lib.LocallyNameless.AbstractionConcretion
open import Lib.LocallyNameless.RenamingReindexingSwapping
open import Lib.LocallyNameless.Category
open import Lib.LocallyNameless.Shift

open import Data.Nat.Base using (Nat-is-set ; suc-inj)
open import Data.Nat.Properties
  using (+-preserves-‚â§r ; +-‚â§l ; +-‚â§r ; monus-inversel)
  renaming (+-commutative to +-comm)
open import Data.Nat.Order using (<-from-not-‚â§ ; <-not-equal)
open import Data.Irr using (Irr)

open NatOrd
open VecSyntax
open FinsetSyntax

----------------------------------------------------------------------
-- Plotkin's binding signatures [Section 4.1]
----------------------------------------------------------------------
record Sig : Type‚ÇÅ where
  constructor mkSig
  field
    Op : Type
    ar : Op ‚Üí Array Nat

open Sig public

-- Example: the binding signature for untyped Œª-terms
ŒõSig : Sig
ŒõSig = mkSig ŒõOp ŒõAr
  module _ where
    data ŒõOp : Type where
      Œõlam : ŒõOp
      Œõapp : ŒõOp
    ŒõAr : ŒõOp ‚Üí Array Nat
    length (ŒõAr Œõlam) = 1
    length (ŒõAr Œõapp) = 2
    index (ŒõAr Œõlam)  = lookup (1 ‚à∑ [])
    index (ŒõAr Œõapp)  = lookup (0 ‚à∑ 0 ‚à∑ [])

----------------------------------------------------------------------
-- Set functor associated with a signature
----------------------------------------------------------------------
infixr 8 _‚àô_ _‚àô‚Ä≤_
_‚àô_ : Sig ‚Üí Type ‚Üí Type
Œ£ ‚àô X  = Œ£[ c ‚àà Op Œ£ ] (X ^ length (ar Œ£ c)) -- Equation (58)

_‚àô‚Ä≤_ : (Œ£ : Sig){X Y : Type} ‚Üí (X ‚Üí Y) ‚Üí Œ£ ‚àô X ‚Üí Œ£ ‚àô Y
(Œ£ ‚àô‚Ä≤ f) (c , t) = c , (f ‚àò t)

-- Action of Œ£ ‚àô_ on locally nameless sets
instance
  oc‚àô :
    {Œ£ : Sig}
    {X : Type}
    ‚¶É _ : oc X ‚¶Ñ
    ‚Üí ----------
    oc (Œ£ ‚àô X)
  _~>_ ‚¶É oc‚àô{Œ£} ‚¶Ñ i a (c , t) =
    (c , Œª k ‚Üí (i + index (ar Œ£ c) k ~> a)(t k))
  _<~_ ‚¶É oc‚àô{Œ£} ‚¶Ñ i a (c , t) =
    (c , Œª k ‚Üí (i + index (ar Œ£ c) k <~ a)(t k))
  oc‚ÇÅ ‚¶É oc‚àô{Œ£} ‚¶Ñ i a b (c , t) = ap (c ,_) (funext Œª k ‚Üí
    oc‚ÇÅ (i + index (ar Œ£ c) k) a b (t k))
  oc‚ÇÇ ‚¶É oc‚àô{Œ£} ‚¶Ñ i j a (c , t) = ap (c ,_) (funext Œª k ‚Üí
    oc‚ÇÇ (i + index (ar Œ£ c) k) (j + index (ar Œ£ c) k) a (t k))
  oc‚ÇÉ ‚¶É oc‚àô{Œ£} ‚¶Ñ i a (c , t) = ap (c ,_) (funext Œª k ‚Üí
    oc‚ÇÉ (i + index (ar Œ£ c) k) a (t k))
  oc‚ÇÑ ‚¶É oc‚àô{Œ£} ‚¶Ñ i a (c , t) = ap (c ,_) (funext Œª k ‚Üí
    oc‚ÇÑ (i + index (ar Œ£ c) k) a (t k))
  oc‚ÇÖ ‚¶É oc‚àô{Œ£} ‚¶Ñ i j a b (c , t) = ap (c ,_) (funext Œª k ‚Üí
    oc‚ÇÖ (i + index (ar Œ£ c) k) (j + index (ar Œ£ c) k) a b (t k)
    ‚¶É inj‚â† (+-inj' (index (ar Œ£ c) k) _ _) auto ‚¶Ñ)
  oc‚ÇÜ ‚¶É oc‚àô{Œ£} ‚¶Ñ i j a b (c , t) = ap (c ,_) (funext Œª k ‚Üí
    oc‚ÇÜ (i + index (ar Œ£ c) k) (j + index (ar Œ£ c) k) a  b (t k))
  oc‚Çá ‚¶É oc‚àô{Œ£} ‚¶Ñ i  j a b (c , t) = ap (c ,_) (funext Œª k ‚Üí
    oc‚Çá (i + index (ar Œ£ c) k) (j + index (ar Œ£ c) k) a b (t k)
    ‚¶É inj‚â† (+-inj' (index (ar Œ£ c) k) _ _) auto ‚¶Ñ)
  oc‚Çà ‚¶É oc‚àô{Œ£} ‚¶Ñ i j a b (c , t) = ap (c ,_) (funext Œª k ‚Üí
    oc‚Çà (i + index (ar Œ£ c) k) (j + index (ar Œ£ c) k) a  b (t k))
  oc‚Çâ ‚¶É oc‚àô{Œ£} ‚¶Ñ i j a b (c , t) = ap (c ,_) (funext Œª k ‚Üí
    oc‚Çâ (i + index (ar Œ£ c) k) (j + index (ar Œ£ c) k) a  b (t k))

#oc‚àô :
  {Œ£ : Sig}
  {X : Type}
  ‚¶É _ : oc X ‚¶Ñ
  {c : Op Œ£}
  {f : X ^ length (ar Œ£ c)}
  (a : ùî∏)
  (_ : ‚àÄ k ‚Üí a # f k)
  ‚Üí ----------------------------
  _#_ ‚¶É oc‚àô{Œ£} ‚¶Ñ a (c , f)
#oc‚àô {Œ£} {c = c} a g = ap (c ,_) (funext Œª k ‚Üí #1 (g k))

‚âªoc‚àô :
  {Œ£ : Sig}
  {X : Type}
  ‚¶É _ : oc X ‚¶Ñ
  {c : Op Œ£}
  {f : X ^ length (ar Œ£ c)}
  (i : Nat)
  (_ : ‚àÄ k ‚Üí i + index (ar Œ£ c) k ‚âª f k)
  ‚Üí ------------------------------------
  _‚âª_ ‚¶É oc‚àô{Œ£} ‚¶Ñ i (c , f)
‚âªoc‚àô {Œ£} {c = c} i g j =
  (new √ò , ap (c ,_) (funext Œª k ‚Üí ‚âª3 (g k) (+-preserves-‚â§r i j _ auto)))

instance
  lns‚àô :
    {Œ£ : Sig}
    {X : Type}
    ‚¶É _ : lns X ‚¶Ñ
    ‚Üí -----------
    lns (Œ£ ‚àô X)
  ocSet ‚¶É lns‚àô{Œ£} ‚¶Ñ = oc‚àô{Œ£}
  asupp ‚¶É lns‚àô{Œ£} ‚¶Ñ (c , f) = –òi
    (‚ãÉ Œª k ‚Üí  –òe‚ÇÅ (asupp (f k)))
    Œª a ‚Üí #oc‚àô {Œ£} a Œª k ‚Üí –òe‚ÇÇ (asupp (f k)) a ‚¶É ‚àâ‚ãÉ _ k ‚¶Ñ
  isupp ‚¶É lns‚àô{Œ£} ‚¶Ñ (c , f) =
    let i = Max Œª k ‚Üí fst (isupp (f k)) in
    (i , ‚âªoc‚àô {Œ£} i Œª k ‚Üí  ‚âª1 (‚â§-trans (‚â§-Max _ k) (+-‚â§l _ _)) (snd (isupp (f k))))

-- Action of Œ£ ‚àô‚Ä≤_ on morphisms of locally nameless sets
instance
  oc‚àô‚Ä≤ :
    {Œ£ : Sig}
    {X Y : Type}
    ‚¶É ocX : oc X ‚¶Ñ
    ‚¶É ocY : oc Y ‚¶Ñ
    {œÜ : X ‚Üí Y}
    ‚¶É _ : oc-hom œÜ ‚¶Ñ
    ‚Üí -----------------------------------
    oc-hom ‚¶É oc‚àô{Œ£} ‚¶Ñ ‚¶É oc‚àô{Œ£} ‚¶Ñ (Œ£ ‚àô‚Ä≤ œÜ)
  oc-hom-open ‚¶É oc‚àô‚Ä≤ ‚¶Ñ (c , _) =
    ap (c ,_) (funext Œª _ ‚Üí oc-hom-open _)
  oc-hom-close ‚¶É oc‚àô‚Ä≤ ‚¶Ñ (c , _) =
    ap (c ,_) (funext Œª _ ‚Üí oc-hom-close _)

  lns‚àô‚Ä≤ :
    {Œ£ : Sig}
    {X Y : Type}
    ‚¶É lnsX : lns X ‚¶Ñ
    ‚¶É lnsY : lns Y ‚¶Ñ
    {œÜ : X ‚Üí Y}
    ‚¶É _ : lns-hom œÜ ‚¶Ñ
    ‚Üí --------------------------------------
    lns-hom ‚¶É lns‚àô{Œ£} ‚¶Ñ ‚¶É lns‚àô{Œ£} ‚¶Ñ (Œ£ ‚àô‚Ä≤ œÜ)
  ochom ‚¶É lns‚àô‚Ä≤ ‚¶Ñ = oc‚àô‚Ä≤

----------------------------------------------------------------------
-- Terms over a binding signature [Equation (65)]
----------------------------------------------------------------------
data Trm (Œ£ : Sig) : Type where
  var : Natùî∏ ‚Üí Trm Œ£
  op  : Œ£ ‚àô Trm Œ£ ‚Üí Trm Œ£

pattern bvar i = var (inl i)
pattern fvar a = var (inr a)

op-inj :
  {Œ£ : Sig}
  {c c' : Op Œ£}
  {ts  : Trm Œ£ ^ length (ar Œ£ c)}
  {ts' : Trm Œ£ ^ length (ar Œ£ c')}
  (_ : op(c , ts) ‚â° op(c' , ts'))
  ‚Üí --------------------------------------
  (c , ts) ‚â° (c' , ts')
op-inj {Œ£} {c} {ts = ts} p = ap f p where
  f : Trm Œ£ ‚Üí Œ£[ c ‚àà Op Œ£ ] (Trm Œ£ ^ length (ar Œ£ c))
  f (op(c , ts)) = (c , ts)
  f (var _)      = (c , ts)

op-inj' :
  {Œ£ : Sig}
  {c : Op Œ£}
  {ts ts' : Trm Œ£ ^ length (ar Œ£ c)}
  (p : op(c , ts) ‚â° op(c , ts'))
  ‚Üí --------------------------------------
  ts ‚â° ts'
op-inj' {Œ£} {c} {ts} {ts'} p = pair-inj' Nat-is-set q where
  q : _,_ {B = Trm Œ£ ^_} (length (ar Œ£ c)) ts ‚â° (length (ar Œ£ c) , ts')
  q i = length (ar Œ£ (op-inj p i .fst)) , op-inj p i .snd

bvar‚â†fvar : {Œ£ : Sig} {i : Nat} {a : ùî∏} ‚Üí ¬¨ _‚â°_ {A = Trm Œ£} (bvar i) (fvar a)
bvar‚â†fvar p = subst distinguish p tt where
  distinguish : Trm _ ‚Üí Type
  distinguish (bvar _) = ‚ä§
  distinguish (fvar _) = ‚ä•
  distinguish _ = ‚ä§

----------------------------------------------------------------------
-- The terms form a locally nameless set
----------------------------------------------------------------------
-- The oc-Set structure
instance
  ocTrm : {Œ£ : Sig} ‚Üí oc (Trm Œ£)
  ocTrm {Œ£} = mkoc opn cls ax‚ÇÅ ax‚ÇÇ ax‚ÇÉ ax‚ÇÑ ax‚ÇÖ ax‚ÇÜ ax‚Çá ax‚Çà ax‚Çâ
    where
    X = Trm Œ£
    opn : Nat ‚Üí ùî∏ ‚Üí X ‚Üí X
    opn i a (var v)   = var ((i ~> a) v)
    opn i a (op(c , ts)) =
      op(c , Œª k ‚Üí opn (i + index (ar Œ£ c) k) a (ts k))
    cls : Nat ‚Üí ùî∏ ‚Üí X ‚Üí X
    cls i a (var v)   = var ((i <~ a) v)
    cls i a (op(c , ts)) =
      op(c , Œª k ‚Üí cls (i + index (ar Œ£ c) k) a (ts k))
    ax‚ÇÅ :
      (i : Nat)
      (a b : ùî∏)
      (t : Trm Œ£)
      ‚Üí -----------------------------
      opn i a (opn i b t) ‚â° opn i b t
    ax‚ÇÅ i a b (var v) = ap var (oc‚ÇÅ i a b v)
    ax‚ÇÅ i a b (op(c , ts)) = ap (Œª ts' ‚Üí op(c , ts')) (funext Œª k ‚Üí
      ax‚ÇÅ (i + index (ar Œ£ c) k) a b (ts k))
    ax‚ÇÇ :
      (i j : Nat)
      (a : ùî∏)
      (t : Trm Œ£)
      ‚Üí -----------------------------
      cls i a (cls j a t) ‚â° cls j a t
    ax‚ÇÇ i j a (var v) = ap var (oc‚ÇÇ i j a v)
    ax‚ÇÇ i j a (op(c , ts)) = ap (Œª ts' ‚Üí op(c , ts')) (funext Œª k ‚Üí
      ax‚ÇÇ (i + index (ar Œ£ c) k) (j + index (ar Œ£ c) k) a (ts k))
    ax‚ÇÉ :
      (i : Nat)
      (a : ùî∏)
      (t : Trm Œ£)
      ‚Üí -----------------------------
      cls i a (opn i a t) ‚â° cls i a t
    ax‚ÇÉ i a (var v) = ap var (oc‚ÇÉ i a v)
    ax‚ÇÉ i a (op(c , ts)) = ap (Œª ts' ‚Üí op(c , ts')) (funext Œª k ‚Üí
      ax‚ÇÉ (i + index (ar Œ£ c) k) a (ts k))
    ax‚ÇÑ :
      (i : Nat)
      (a : ùî∏)
      (t : Trm Œ£)
      ‚Üí -----------------------------
      opn i a (cls i a t) ‚â° opn i a t
    ax‚ÇÑ i a (var v) = ap var (oc‚ÇÑ i a v)
    ax‚ÇÑ i a (op(c , ts)) = ap (Œª ts' ‚Üí op(c , ts')) (funext Œª k ‚Üí
      ax‚ÇÑ (i + index (ar Œ£ c) k) a (ts k))
    ax‚ÇÖ :
      (i j : Nat)
      (a b : ùî∏)
      (t : Trm Œ£)
      ‚¶É _ : i ‚â† j ‚¶Ñ
      ‚Üí ---------------------------------------
      opn i a (opn j b t) ‚â° opn j b (opn i a t)
    ax‚ÇÖ i j a b (var v) = ap var (oc‚ÇÖ i j a b v)
    ax‚ÇÖ i j a b (op(c , ts)) = ap (Œª ts' ‚Üí op(c , ts')) (funext Œª k ‚Üí
      ax‚ÇÖ (i + index (ar Œ£ c) k)
          (j + index (ar Œ£ c) k) a b (ts k)
          ‚¶É inj‚â† (+-inj' (index (ar Œ£ c) k) _ _) auto ‚¶Ñ)
    ax‚ÇÜ :
      (i j : Nat)
      (a b : ùî∏)
      (t : Trm Œ£)
      ‚¶É _ : a ‚â† b ‚¶Ñ
      ‚Üí ---------------------------------------
      cls i a (cls j b t) ‚â° cls j b (cls i a t)
    ax‚ÇÜ i j a b (var v) = ap var (oc‚ÇÜ i j a b v)
    ax‚ÇÜ i j a b (op(c , ts)) = ap (Œª ts' ‚Üí op(c , ts')) (funext Œª k ‚Üí
      ax‚ÇÜ (i + index (ar Œ£ c) k) (j + index (ar Œ£ c) k) a b (ts k))
    ax‚Çá :
      (i j : Nat)
      (a b : ùî∏)
      (t : Trm Œ£)
      ‚¶É _ : i ‚â† j ‚¶Ñ
      ‚¶É _ : a ‚â† b ‚¶Ñ
      ‚Üí ---------------------------------------
      opn i a (cls j b t) ‚â° cls j b (opn i a t)
    ax‚Çá i j a b (var v) = ap var (oc‚Çá i j a b v)
    ax‚Çá i j a b (op(c , ts)) = ap (Œª ts' ‚Üí op(c , ts')) (funext Œª k ‚Üí
      ax‚Çá (i + index (ar Œ£ c) k)
          (j + index (ar Œ£ c) k) a b (ts k)
          ‚¶É inj‚â† (+-inj' (index (ar Œ£ c) k) _ _) auto ‚¶Ñ)
    ax‚Çà :
      (i j : Nat)
      (a b : ùî∏)
      (t : Trm Œ£)
      ‚Üí -----------------------------------------------------------
      opn i b (cls i a (opn j b t)) ‚â° opn j b (cls j a (opn i a t))
    ax‚Çà i j a b (var v) = ap var (oc‚Çà i j a b v)
    ax‚Çà i j a b (op(c , ts)) = ap (Œª ts' ‚Üí op(c , ts')) (funext Œª k ‚Üí
      ax‚Çà (i + index (ar Œ£ c) k) (j + index (ar Œ£ c) k) a b (ts k))
    ax‚Çâ :
      (i j : Nat)
      (a b : ùî∏)
      (t : Trm Œ£)
      ‚Üí -----------------------------------------------------------
      cls j a (opn i a (cls j b t)) ‚â° cls j b (opn i b (cls i a t))
    ax‚Çâ i j a b (var v) = ap var (oc‚Çâ i j a b v)
    ax‚Çâ i j a b (op(c , ts)) = ap (Œª ts' ‚Üí op(c , ts')) (funext Œª k ‚Üí
      ax‚Çâ (i + index (ar Œ£ c) k) (j + index (ar Œ£ c) k) a b (ts k))

-- A lemma about atom-support in Trm Œ£
#Trm :
  {Œ£ : Sig}
  (c : Op Œ£)
  (ts : Trm Œ£ ^ length (ar Œ£ c))
  (a : ùî∏)
  (_ : ‚àÄ k ‚Üí a # ts k)
  ‚Üí ----------------------------------
   a # op(c , ts)
#Trm {Œ£} c ts a f = ap (Œª ts' ‚Üí op(c , ts')) (funext Œª k ‚Üí #1 (f k))

-- Lemmas about index-support in Trm Œ£
‚âªTrm :
  {Œ£ : Sig}
  (c : Op Œ£)
  (ts : Trm Œ£ ^ length (ar Œ£ c))
  (i : Nat)
  (_ : ‚àÄ k ‚Üí i + index (ar Œ£ c) k ‚âª ts k)
  ‚Üí -------------------------------------
  i ‚âª op(c , ts)
‚âªTrm {Œ£} c ts i f j = (new √ò , ap (Œª ts' ‚Üí
  op(c , ts')) (funext Œª k ‚Üí ‚âª3 (f k) (+-preserves-‚â§r i j _ auto)))

‚âªTrm‚Ä≤ :
  {Œ£ : Sig}
  (c : Op Œ£)
  (ts : Trm Œ£ ^ length (ar Œ£ c))
  (i : Nat)
  (_ : i ‚âª op(c , ts))
  (k : Fin (length (ar Œ£ c)))
  ‚Üí ----------------------------------
  i + index (ar Œ£ c) k ‚âª ts k
‚âªTrm‚Ä≤ {Œ£} c ts i p k j
  with (a , q) ‚Üê p (j - index (ar Œ£ c) k) ‚¶É monus-adj _ _ _ auto ‚¶Ñ = (a , e')
  where
  H‚â° : j - index (ar Œ£ c) k + index (ar Œ£ c) k ‚â° j
  H‚â° = +-comm _ (index (ar Œ£ c) k) ‚àô·µñ monus-inversel j (index (ar Œ£ c) k) (‚â§-trans (+-‚â§r _ _) auto)
  e' : (j ~> a)(ts k) ‚â° ts k
  e' =
    (j ~> a)(ts k)                                         ‚â°Àò‚ü® ap (Œª j' ‚Üí (j' ~> a)(ts k)) H‚â° ‚ü©
    ((j - index (ar Œ£ c) k + index (ar Œ£ c) k) ~> a)(ts k) ‚â°‚ü® op-inj' q $‚Çö k ‚ü©
    ts k                                                   ‚àé

-- The finite support properties
lnsTrm : {Œ£ : Sig} ‚Üí lns (Trm Œ£)
lnsTrm {Œ£} = mklns asp isp
  where
  instance
    _ : lns Natùî∏
    _ = lnsNatùî∏
  asp : (t : Trm Œ£) ‚Üí –ò[ a ‚àà ùî∏ ] a # t
  asp (var v) with –òi –∏‚ÇÅ –∏‚ÇÇ ‚Üê asupp v =
    –òi –∏‚ÇÅ (Œª a ‚Üí ap var (–∏‚ÇÇ a))
  asp (op(c , ts)) = –òi
    (‚ãÉ Œª k ‚Üí  –òe‚ÇÅ (asp (ts k)))
    (Œª a ‚Üí #Trm c ts a Œª k ‚Üí –òe‚ÇÇ (asp (ts k)) a ‚¶É ‚àâ‚ãÉ _ k ‚¶Ñ)
  isp : (t : Trm Œ£) ‚Üí Œ£[ i ‚àà Nat ] (i ‚âª t)
  isp (var v) with (i , p) ‚Üê isupp v =
    (i , Œª j ‚Üí (fst (p j)) , ap var (snd (p j)))
  isp (op(c , ts)) =
    let i = Max Œª k ‚Üí fst (isp (ts k)) in
    (i ,  ‚âªTrm c ts i Œª k ‚Üí ‚âª1 (‚â§-trans (‚â§-Max _ k) (+-‚â§l _ _)) (snd (isp (ts k))))

----------------------------------------------------------------------
-- The locally nameless set Trm Œ£ is the free Œ£‚àô_-algebra on Natùî∏
-- [Theorem 4.1]
----------------------------------------------------------------------
module UniversalProperty
  {- We can prove the universal property with respect to all oc-sets
     X, rather than just locally nameless ones. -}
  {Œ£ : Sig}
  {X : Type}
  (f : Natùî∏ ‚Üí X)
  (g : Œ£ ‚àô X ‚Üí X)
  where
  instance
    _ : lns Natùî∏
    _ = lnsNatùî∏
    _ : lns (Trm Œ£)
    _ = lnsTrm
  -- Existence
  rec : Trm Œ£ ‚Üí X
  rec (var v)      = f v
  rec (op(c , ts)) = g (c , Œª k ‚Üí rec (ts k))
  -- Uniqueness [Equation (61)]
  module _
    (h : Trm Œ£ ‚Üí X)
    (hvar : ‚àÄ v ‚Üí h (var v) ‚â° f v)
    (hop : ‚àÄ x ‚Üí h(op x) ‚â° g ((Œ£ ‚àô‚Ä≤ h) x))
    where
    uniq : h ‚â° rec
    uniq = funext uniq'
      where
      uniq' : ‚àÄ t ‚Üí h t ‚â° rec t
      uniq' (var v) = hvar v
      uniq' (op(c , ts)) =
        h (op (c , ts))          ‚â°‚ü® hop (c , ts) ‚ü©
        g ((Œ£ ‚àô‚Ä≤ h)(c , ts))     ‚â°‚ü®‚ü©
        g (c , (h ‚àò ts))         ‚â°‚ü® ap (Œª x ‚Üí g (c , x)) (funext Œª k ‚Üí uniq' (ts k)) ‚ü©
        g (c , Œª k ‚Üí rec (ts k)) ‚àé

    -- If we assume X is also an oc-set and that
    -- f, g and h are morphisms of oc-sets...
    module _
      ‚¶É _ : oc X ‚¶Ñ
      ‚¶É homf : oc-hom f ‚¶Ñ
      ‚¶É homg : oc-hom ‚¶É oc‚àô{Œ£} ‚¶Ñ g ‚¶Ñ
      ‚¶É _ : oc-hom h ‚¶Ñ
      where
    -- ...then rec is also a morphism
        rec-hom : oc-hom rec
        rec-hom = mkoc-hom hopn hcls
          where
          hopn :
            {i : Nat}
            {a : ùî∏}
            (t : Trm Œ£)
            ‚Üí --------------------------------
            rec ((i ~> a)t) ‚â° (i ~> a) (rec t)
          hopn (var v) = oc-hom-open v
          hopn {i} {a} (op(c , ts)) =
            g (c , Œª k ‚Üí rec ((i + index (ar Œ£ c) k ~> a)(ts k))) ‚â°‚ü® ap (Œª t ‚Üí g(c , t))
                                                                        (funext Œª k ‚Üí hopn {i + index (ar Œ£ c) k} {a} (ts k)) ‚ü©
            g (_~>_ ‚¶É oc‚àô{Œ£} ‚¶Ñ i a (c , Œª k ‚Üí rec (ts k)))        ‚â°‚ü® oc-hom-open _ ‚ü©
            (i ~> a) (g (c , Œª k ‚Üí rec (ts k)))                   ‚àé
          hcls :
            {i : Nat}
            {a : ùî∏}
            (t : Trm Œ£)
            ‚Üí --------------------------------
            rec ((i <~ a)t) ‚â° (i <~ a) (rec t)
          hcls (var v) = oc-hom-close v
          hcls {i} {a} (op(c , ts)) =
            g (c , Œª k ‚Üí rec ((i + index (ar Œ£ c) k <~ a)(ts k))) ‚â°‚ü® ap (Œª t ‚Üí g(c , t))
                                                                        (funext Œª k ‚Üí hcls {i + index (ar Œ£ c) k} {a} (ts k)) ‚ü©
            g (_<~_ ‚¶É oc‚àô{Œ£} ‚¶Ñ i a (c , Œª k ‚Üí rec (ts k)))        ‚â°‚ü® oc-hom-close _ ‚ü©
            (i <~ a) (g(c , Œª k ‚Üí rec (ts k)))                    ‚àé

----------------------------------------------------------------------
-- Freshness in Trm Œ£ versus free variables [Proposition 4.2]
----------------------------------------------------------------------
fv : {Œ£ : Sig} ‚Üí Trm Œ£ ‚Üí Finset ùî∏ -- Equation (66)
fv (bvar i)  = √ò
fv (fvar a)  = [ a ]
fv (op(c , ts)) = ‚ãÉ Œª k ‚Üí fv (ts k)

-- a # t ‚Üî a ‚àâ fv t
module FreeVar {Œ£ : Sig} where
  #‚Üí‚àâ :
    (a : ùî∏)
    (t : Trm Œ£)
    ‚Üí --------------
    a # t ‚Üí a ‚àâ fv t
  #‚Üí‚àâ a (bvar i) _ = tt
  #‚Üí‚àâ a (fvar b) p with a ‚â°? b
  ... | no _ = tt
  ... | yes _ = absurd (bvar‚â†fvar p)
  #‚Üí‚àâ a (op(c , ts)) p with f ‚Üê op-inj' p =
    ‚àâ‚ãÉ' (Œª k ‚Üí fv (ts k)) Œª k ‚Üí #‚Üí‚àâ a (ts k) (#1 {j = 0} (f $‚Çö k))

  ‚àâ‚Üí# :
    (a : ùî∏)
    (t : Trm Œ£)
    ‚Üí --------------
    a ‚àâ fv t ‚Üí a # t
  ‚àâ‚Üí# a (bvar _) _ = refl
  ‚àâ‚Üí# a (fvar b) p = ap var (if·µà-no (a ‚â°? b) (‚àâ‚à∑‚ÇÅ p))
  ‚àâ‚Üí# a (op(c , ts)) p =
    ap (Œª ts' ‚Üí op(c , ts'))
    (funext Œª k ‚Üí #1 (‚àâ‚Üí# a (ts k) (‚àâ‚ãÉ (fv ‚àò ts) k ‚¶É p ‚¶Ñ)))

----------------------------------------------------------------------
-- Local closedness in Trm Œ£ [Proposition 4.3]
----------------------------------------------------------------------
data lc-at {Œ£ : Sig}(i : Nat) : Trm Œ£ ‚Üí Type where
  lc-at-bvar :
    {j : Nat}
    ‚¶É _ : j < i ‚¶Ñ
    ‚Üí --------------
    lc-at i (bvar j)
  lc-at-fvar :
    {a : ùî∏}
    ‚Üí --------------
    lc-at i (fvar a)
  lc-at-op :
    {c : Op Œ£}
    {ts : Fin (length (ar Œ£ c)) ‚Üí Trm Œ£}
    (_ : ‚àÄ k ‚Üí lc-at (i + index (ar Œ£ c) k) (ts k))
    ‚Üí ---------------------------------------------
    lc-at i (op(c , ts))

-- i ‚âª t ‚Üî lc-at i t
module LocalClosed {Œ£ : Sig} where
  ‚âª‚Üílc-at :
    (i : Nat)
    (t : Trm Œ£)
    ‚Üí ---------------
    i ‚âª t ‚Üí lc-at i t
  ‚âª‚Üílc-at i (bvar j) i‚âªbvarj = lc-at-bvar ‚¶É <-from-not-‚â§ _ _ p ‚¶Ñ
    where
    p : ¬¨ i ‚â§ j
    p i‚â§j with q ‚Üê snd (i‚âªbvarj j ‚¶É i‚â§j ‚¶Ñ) =
      absurd (bvar‚â†fvar $ sym q ‚àô·µñ ap var (if·µà-‚â° (refl {x = j})))
  ‚âª‚Üílc-at _ (fvar _) _ = lc-at-fvar
  ‚âª‚Üílc-at i (op(c , ts)) p = lc-at-op Œª k ‚Üí
    ‚âª‚Üílc-at (i + index (ar Œ£ c) k) (ts k) (‚âªTrm‚Ä≤ c ts i p k)

  lc-at‚Üí‚âª :
    (i : Nat)
    (t : Trm Œ£)
    ‚Üí ---------------
    lc-at i t ‚Üí i ‚âª t
  lc-at‚Üí‚âª _ (bvar j) lc-at-bvar k ‚¶É p ‚¶Ñ = new √ò , ap var (if·µà-‚â† $ <-not-equal (‚â§-trans auto p) ‚àò sym)
    -- rewrite <‚Üí‚â† j k (<‚â§ it p) = (new √ò , refl)
  lc-at‚Üí‚âª _ (fvar _) lc-at-fvar _ = (new √ò , refl)
  lc-at‚Üí‚âª i (op(c , ts)) (lc-at-op f) =
    ‚âªTrm c ts i Œª k ‚Üí lc-at‚Üí‚âª (i + index (ar Œ£ c) k) (ts k) (f k)

----------------------------------------------------------------------
-- Example 4.4
----------------------------------------------------------------------
module DenotationsViaInitiality
  {- For simplicity we use Agda types in place of domains -}
  (D : Type)
  (apD : D ‚Üí D ‚Üí D)
  (lmD : (D ‚Üí D) ‚Üí D)
  where
  CD : Type -- Equation (67)
  CD = (Natùî∏ ‚Üí D) ‚Üí D

  -- CD is an oc-set
  ocCD : oc CD
  _~>_ ‚¶É ocCD ‚¶Ñ i a Œ∫ œÅ = Œ∫ (œÅ ‚àò (i ~> a))
  _<~_ ‚¶É ocCD ‚¶Ñ i a Œ∫ œÅ = Œ∫ (œÅ ‚àò (i <~ a))
  oc‚ÇÅ ‚¶É ocCD ‚¶Ñ i a b Œ∫ =
    funext Œª œÅ ‚Üí ap Œ∫ (funext Œª c ‚Üí ap œÅ (oc‚ÇÅ i a b c))
  oc‚ÇÇ ‚¶É ocCD ‚¶Ñ i j a Œ∫ =
    funext Œª œÅ ‚Üí ap Œ∫ (funext Œª b ‚Üí ap œÅ (oc‚ÇÇ i j a b))
  oc‚ÇÉ ‚¶É ocCD ‚¶Ñ i a Œ∫ =
    funext Œª œÅ ‚Üí  ap Œ∫ (funext Œª b ‚Üí ap œÅ (oc‚ÇÉ i a b))
  oc‚ÇÑ ‚¶É ocCD ‚¶Ñ i a Œ∫ =
    funext Œª œÅ ‚Üí  ap Œ∫ (funext Œª b ‚Üí ap œÅ (oc‚ÇÑ i a b))
  oc‚ÇÖ ‚¶É ocCD ‚¶Ñ i j a b Œ∫ =
    funext Œª œÅ ‚Üí ap Œ∫ (funext Œª c ‚Üí ap œÅ (oc‚ÇÖ i j a b c))
  oc‚ÇÜ ‚¶É ocCD ‚¶Ñ i j a b Œ∫ =
    funext Œª œÅ ‚Üí ap Œ∫ (funext Œª c ‚Üí ap œÅ (oc‚ÇÜ i j a b c))
  oc‚Çá ‚¶É ocCD ‚¶Ñ i j a b Œ∫ =
    funext Œª œÅ ‚Üí ap Œ∫ (funext Œª c ‚Üí ap œÅ (oc‚Çá i j a b c))
  oc.oc‚Çà ocCD i j a b Œ∫ =
    funext Œª œÅ ‚Üí ap Œ∫ (funext Œª c ‚Üí ap œÅ (oc‚Çà i j a b c))
  oc.oc‚Çâ ocCD i j a b Œ∫ =
    funext Œª œÅ ‚Üí ap Œ∫ (funext Œª c ‚Üí ap œÅ (oc‚Çâ i j a b c))

  infix 6 [[_,_]]
  [[_,_]] : (Natùî∏ ‚Üí D) ‚Üí D ‚Üí Natùî∏ ‚Üí D
  [[ œÅ , d ]] (inl 0)       = d
  [[ œÅ , d ]] (inl (suc i)) = œÅ (inl i)
  [[ œÅ , d ]] (inr a)       = œÅ (inr a)

  [[,]]‚àò+1~>‚â°[[‚àòi~>,]] :
    (œÅ : Natùî∏ ‚Üí D)
    (d : D)
    (a : ùî∏)
    (i : Nat)
    (jb : Natùî∏)
    ‚Üí ------------------------------------------------------
    [[ œÅ , d ]] ((suc i ~> a) jb) ‚â° [[ œÅ ‚àò (i ~> a) , d ]] jb
  [[,]]‚àò+1~>‚â°[[‚àòi~>,]] œÅ d a i (inl 0) = refl
  [[,]]‚àò+1~>‚â°[[‚àòi~>,]] œÅ d a i (inl (suc j)) with i ‚â°? j
  ... | yes i‚â°j = ap [[ œÅ , d ]] (if·µà-‚â° {A = Nat} (ap suc i‚â°j))
  ... | no  i‚â†j = ap [[ œÅ , d ]] (if·µà-‚â† (i‚â†j ‚àò suc-inj))
  [[,]]‚àò+1~>‚â°[[‚àòi~>,]] œÅ d a i (inr b) = refl

  [[,]]‚àò+1<~‚â°[[‚àòi<~,]] :
    (œÅ : Natùî∏ ‚Üí D)
    (d : D)
    (a : ùî∏)
    (i : Nat)
    (jb : Natùî∏)
    ‚Üí ------------------------------------------------------
    [[ œÅ , d ]] ((suc i <~ a) jb) ‚â° [[ œÅ ‚àò (i <~ a) , d ]] jb
  [[,]]‚àò+1<~‚â°[[‚àòi<~,]] œÅ d a i (inl 0) = refl
  [[,]]‚àò+1<~‚â°[[‚àòi<~,]] œÅ d a i (inl (suc j)) = refl
  [[,]]‚àò+1<~‚â°[[‚àòi<~,]] œÅ d a i (inr b) with a ‚â°? b
  ... | yes _ = refl
  ... | no  _ = refl

  lmCD : CD ‚Üí CD -- Equation (68), ignoring finite support
  lmCD Œ∫ œÅ = lmD (Œª d ‚Üí Œ∫ [[ œÅ , d ]])

  -- lmCD is an oc-set morphism from ‚Üë(CD) to CD
  oc-homlmCD : oc-hom ‚¶É oc‚Üë ‚¶É ocCD ‚¶Ñ ‚¶Ñ ‚¶É ocCD ‚¶Ñ lmCD
  oc-hom-open  ‚¶É oc-homlmCD ‚¶Ñ {i} {a} Œ∫ =
    funext Œª œÅ ‚Üí ap lmD (
    funext Œª d ‚Üí ap Œ∫ (funext ([[,]]‚àò+1~>‚â°[[‚àòi~>,]] œÅ d a i)))
  oc-hom-close ‚¶É oc-homlmCD ‚¶Ñ {i} {a} Œ∫ =
    funext Œª œÅ ‚Üí ap lmD (
    funext Œª d ‚Üí ap Œ∫ (funext ([[,]]‚àò+1<~‚â°[[‚àòi<~,]] œÅ d a i)))

  apCD : CD √ó CD ‚Üí CD -- Equation (69), ignoring finite support
  apCD (Œ∫ , Œ∫') œÅ = apD (Œ∫ œÅ) (Œ∫' œÅ)

  -- apCD is an oc-Set morphism from CD √ó CD to CD
  oc-homapCD : oc-hom ‚¶É oc√ó ‚¶É ocCD ‚¶Ñ ‚¶É ocCD ‚¶Ñ ‚¶Ñ ‚¶É ocCD ‚¶Ñ apCD
  oc-hom-open  ‚¶É oc-homapCD ‚¶Ñ (Œ∫ , Œ∫') =
    funext Œª œÅ ‚Üí ap‚ÇÇ apD
      (ap Œ∫  (funext (Œª _ ‚Üí refl)))
      (ap Œ∫' (funext (Œª _ ‚Üí refl)))
  oc-hom-close ‚¶É oc-homapCD ‚¶Ñ (Œ∫ , Œ∫') =
    funext Œª œÅ ‚Üí ap‚ÇÇ apD
      (ap Œ∫  (funext (Œª _ ‚Üí refl)))
      (ap Œ∫' (funext (Œª _ ‚Üí refl)))

  vrCD : Natùî∏ ‚Üí CD -- Equation (70), ignoring finite support
  vrCD na œÅ = œÅ na

  -- vrCD is an oc-set morphism from Natùî∏ to CD
  oc-homvrCD : oc-hom ‚¶É ocNatùî∏ ‚¶Ñ ‚¶É ocCD ‚¶Ñ vrCD
  oc-hom-open  ‚¶É oc-homvrCD ‚¶Ñ _ = funext Œª _ ‚Üí refl
  oc-hom-close ‚¶É oc-homvrCD ‚¶Ñ _ = funext Œª _ ‚Üí refl

  -- lmCD and apCD combine to give a ŒõSig-algebra structure for CD
  alg : ŒõSig ‚àô CD ‚Üí CD
  alg (Œõlam , f) = lmCD (f (fin 0))
  alg (Œõapp , f) = apCD (f (fin 0) , f (fin 1))

  -- The unique algebra morphism from the intial algebra Trm (ŒõSig)
  infix 6 ‚ü¶_‚üß
  ‚ü¶_‚üß : Trm (ŒõSig) ‚Üí CD
  ‚ü¶_‚üß = UniversalProperty.rec vrCD alg
