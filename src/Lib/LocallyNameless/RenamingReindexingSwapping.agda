--------------------------------------------------------------
-- This file was adapted from the code accompanying the paper
--
-- Andrew M. Pitts, "Locally Nameless Sets", POPL 2023
--
-- (¬© 2023 Andrew Pitts, University of Cambridge)
--
-- https://amp12.github.io/LocallyNamelessSets/
--------------------------------------------------------------

module Lib.LocallyNameless.RenamingReindexingSwapping where

open import Lib.Prelude
open import Lib.Dec
open import Lib.Finset
open import Lib.LocallyNameless.Unfinite
open import Lib.LocallyNameless.oc-Sets
open import Lib.LocallyNameless.Freshness
open import Lib.LocallyNameless.LocalClosedness
open import Lib.LocallyNameless.Support
open import Lib.LocallyNameless.AbstractionConcretion

open import Data.Nat.Order using (<-not-equal)

open FinsetSyntax
open NatOrd

----------------------------------------------------------------------
-- Lemma 2.16
----------------------------------------------------------------------
module _
  {X : Type}
  ‚¶É _ : lns X ‚¶Ñ
  {a b : ùî∏}
  {i j : Nat}
  {x : X}
  where
  ~><~ : -- Equation (19)
    (p : i ‚âª x)
    (q : j ‚âª x)
    ‚Üí ---------------------------------------
    (i ~> b)((i <~ a)x) ‚â° (j ~> b)((j <~ a)x)
  ~><~ p q  =
    (i ~> b)((i <~ a)x)           ‚â°Àò‚ü® ap ((i ~> b) ‚àò (i <~ a)) (‚âª3 q ‚â§-refl) ‚ü©
    (i ~> b)((i <~ a)((j ~> b)x)) ‚â°‚ü® oc‚Çà _ _ _ _ _ ‚ü©
    (j ~> b)((j <~ a)((i ~> a)x)) ‚â°‚ü® ap ((j ~> b) ‚àò (j <~ a)) (‚âª3 p ‚â§-refl) ‚ü©
    (j ~> b)((j <~ a)x)           ‚àé

  <~~> : -- Equation (20)
    (p : a # x)
    (q : b # x)
    ‚Üí ---------------------------------------
    (j <~ a)((i ~> a)x) ‚â° (j <~ b)((i ~> b)x)
  <~~> p q =
    (j <~ a)((i ~> a)x)           ‚â°Àò‚ü® ap ((j <~ a) ‚àò (i ~> a)) (#2 q) ‚ü©
    (j <~ a)((i ~> a)((j <~ b)x)) ‚â°‚ü® oc‚Çâ _ _ _ _ _ ‚ü©
    (j <~ b)((i ~> b)((i <~ a)x)) ‚â°‚ü® ap ((j <~ b) ‚àò (i ~> b)) (#2 p) ‚ü©
    (j <~ b)((i ~> b)x)           ‚àé

{- We make the following definitions abstract to reduce performance overhead
and improve readability. -}
abstract
  ----------------------------------------------------------------------
  -- Renaming
  ----------------------------------------------------------------------
  infix 5 _‚Ü§_
  _‚Ü§_ : {X : Type}‚¶É _ : lns X ‚¶Ñ ‚Üí ùî∏ ‚Üí ùî∏ ‚Üí X ‚Üí X
  (b ‚Ü§ a)x =
    let i = fst (isupp x) in
    (i ~> b)((i <~ a)x) -- Equation(21)

  ‚Ü§fresh :
    {X : Type}
    ‚¶É _ : lns X ‚¶Ñ
    {a b : ùî∏}
    (x : X)
    (i : Nat)
    (_ : i ‚âª x)
    ‚Üí ----------------------------
    (b ‚Ü§ a)x ‚â° (i ~> b)((i <~ a)x)
  ‚Ü§fresh x i p = ~><~ (snd (isupp x)) p

  ‚âª‚Ü§ :
    {X : Type}
    ‚¶É _ : lns X ‚¶Ñ
    (a b : ùî∏)
    (x : X)
    (i : Nat)
    (_ : i ‚âª x)
    ‚Üí ----------
    i ‚âª (b ‚Ü§ a)x
  ‚âª‚Ü§ a b x i p j =
    let
      c = new ([ a ] ‚à™ [ b ])
      k = suc j
      k‚âªx : k ‚âª x
      k‚âªx = ‚âª1 (‚â§-trans auto ‚â§-refl) p
      instance
        _ : c ‚â† a
        _ = ‚àâ‚à∑‚ÇÅ (unfinite ([ a ] ‚à™ [ b ]))
        _ : c ‚â† b
        _ = ‚àâ‚à∑‚ÇÅ (‚àâ‚à∑‚ÇÇ (unfinite ([ a ] ‚à™ [ b ])))
        _ : j ‚â† k
        _ = ¬¨‚â°‚Üí‚â† (<-not-equal auto)
    in (c ,
      ((j ~> c)((b ‚Ü§ a)x)            ‚â°‚ü® ap (j ~> c) (‚Ü§fresh _ _ k‚âªx) ‚ü©
       (j ~> c)((k ~> b)((k <~ a)x)) ‚â°‚ü® oc‚ÇÖ _ _ _ _ _ ‚ü©
       (k ~> b)((j ~> c)((k <~ a)x)) ‚â°‚ü® ap (k ~> b) (oc‚Çá _ _ _ _ _) ‚ü©
       (k ~> b)((k <~ a)((j ~> c)x)) ‚â°‚ü® ap ((k ~> b) ‚àò (k <~ a)) (‚âª3 p auto) ‚ü©
       (k ~> b)((k <~ a)x)           ‚â°Àò‚ü® ‚Ü§fresh _ _ k‚âªx ‚ü©
       (b ‚Ü§ a)x                      ‚àé))

  ----------------------------------------------------------------------
  -- Re-indexing
  ----------------------------------------------------------------------

  infix 5 _‚Ü¶_
  _‚Ü¶_ : {X : Type}‚¶É _ : lns X ‚¶Ñ ‚Üí Nat ‚Üí Nat ‚Üí X ‚Üí X
  (i ‚Ü¶ j)x =
    let a = new (–òe‚ÇÅ (asupp x)) in
    (j <~ a)((i ~> a)x) -- Equation (22)

  ‚Ü¶fresh :
    {X : Type}
    ‚¶É _ : lns X ‚¶Ñ
    {i j : Nat}
    (x : X)
    (a : ùî∏)
    ‚¶É _ : a # x ‚¶Ñ
    ‚Üí ----------------------------
    (i ‚Ü¶ j)x ‚â° (j <~ a)((i ~> a)x)
  ‚Ü¶fresh x a =
    let
      bs = –òe‚ÇÅ (asupp x)
      b  = new bs
      b#x : b # x
      b#x = –òe‚ÇÇ (asupp x) b ‚¶É unfinite bs ‚¶Ñ
    in <~~> b#x auto

  ‚âª‚Ü¶ :
    {X : Type}
    ‚¶É _ : lns X ‚¶Ñ
    (i j : Nat)
    (x : X)
    ‚Üí ------------------
    i ‚âª x ‚Üí (i ‚Ü¶ j)x ‚â° x
  ‚âª‚Ü¶ i j x p =
    let
      as = –òe‚ÇÅ (asupp x)
      a  = new as
      instance
        _ : a # x
        _ = –òe‚ÇÇ (asupp x) a ‚¶É unfinite as ‚¶Ñ
    in
    (i ‚Ü¶ j)x            ‚â°‚ü®‚ü©
    (j <~ a)((i ~> a)x) ‚â°‚ü® ap (j <~ a) (‚âª3 p ‚â§-refl) ‚ü©
    (j <~ a)x           ‚â°‚ü® #2 auto ‚ü©
    x                   ‚àé

  ‚Ü¶‚âª :
    {X : Type}
    ‚¶É _ : lns X ‚¶Ñ
    {i j k : Nat}
    {x : X}
    (_ : k ‚âª x)
    (_ : k > j)
    ‚Üí -----------
    k ‚âª (i ‚Ü¶ j)x
  ‚Ü¶‚âª p q =
    ‚âª1 (max-univ _ _ _ ‚â§-refl q) (<~index-supports (~>index-supports p))

----------------------------------------------------------------------
-- Renset properties of renaming ‚ü®Proposition 2.17‚ü©
----------------------------------------------------------------------
module _ {X : Type}‚¶É L : lns X ‚¶Ñ{x : X} where
  abstract
    rn‚ÇÅ : -- Equation (23)
      {a : ùî∏}
      ‚Üí ----------
      (a ‚Ü§ a)x ‚â° x
    rn‚ÇÅ {a} =
      let i , i‚âªx = isupp x in
      (a ‚Ü§ a)x            ‚â°‚ü®‚ü©
      (i ~> a)((i <~ a)x) ‚â°‚ü® oc‚ÇÑ _ _ _ ‚ü©
      (i ~> a)x           ‚â°‚ü® ‚âª3 i‚âªx ‚â§-refl ‚ü©
      x                   ‚àé

    rn‚ÇÇ : -- Equation (24)
      {a b c : ùî∏}
      ‚¶É _ : a ‚â† c ‚¶Ñ
      ‚Üí --------------------------
      (b ‚Ü§ a)((c ‚Ü§ a)x) ‚â° (c ‚Ü§ a)x
    rn‚ÇÇ {a} {b} {c} =
      (b ‚Ü§ a)((c ‚Ü§ a)x) ‚â°‚ü®‚ü©
      (j ~> b)((j <~ a)((i ~> c)((i <~ a)x))) ‚â°‚ü® ~><~ q (‚âª1 (max-‚â§r _ _) q) ‚ü©
      (k ~> b)((k <~ a)((i ~> c)((i <~ a)x))) ‚â°‚ü® ap ((k ~> b) ‚àò (k <~ a)) (~><~ p (‚âª1 (max-‚â§l _ _) p)) ‚ü©
      (k ~> b)((k <~ a)((k ~> c)((k <~ a)x))) ‚â°‚ü® ap (k ~> b) (#2 r) ‚ü©
      (k ~> b)((k ~> c)((k <~ a)x))           ‚â°‚ü® oc‚ÇÅ _ _ _ _ ‚ü©
      (k ~> c)((k <~ a)x)                     ‚â°‚ü® ~><~ (‚âª1 (max-‚â§l _ _) p) p ‚ü©
      (c ‚Ü§ a)x                                ‚àé
      where
      i j k : Nat
      i = fst (isupp x)
      p : i ‚âª x
      p = snd (isupp x)
      j = fst (isupp ((i ~> c)((i <~ a)x)))
      q : j ‚âª (i ~> c)((i <~ a)x)
      q = snd (isupp ((i ~> c)((i <~ a)x)))
      k = max i j
      A : Finset ùî∏
      A = –òe‚ÇÅ (asupp x) -- atom-supports x
      s : (A -[ a ]) ‚à™ [ c ] atom-supports (k ~> c)((k <~ a)x)
      s = ~>atom-supports (<~atom-supports Œª a' p' ‚Üí
        –òe‚ÇÇ (asupp ‚¶É L ‚¶Ñ x) a' ‚¶É p' ‚¶Ñ)
      r : a # (k ~> c)((k <~ a)x)
      r = s a (‚àâ‚à™ (‚àâ-minus A) (‚àâ‚à∑ auto tt))

    rn‚ÇÉ : -- Equation (25)
      {a b c : ùî∏}
      ‚Üí -----------------------------------
      (c ‚Ü§ b)((b ‚Ü§ a)x) ‚â° (c ‚Ü§ a)((c ‚Ü§ b)x)
    rn‚ÇÉ {a} {b} {c} =
      (c ‚Ü§ b)((b ‚Ü§ a)x)                         ‚â°‚ü®‚ü©
      (j ~> c)((j <~ b)((i ~> b)((i <~ a)x)))   ‚â°‚ü® ~><~ q (‚âª1 (‚â§-trans (max-‚â§r i _) (max-‚â§l _ _)) q) ‚ü©
      (k ~> c)((k <~ b)((i ~> b)((i <~ a)x)))   ‚â°‚ü® ap ((k ~> c) ‚àò (k <~ b))
                                                   (~><~ p (‚âª1 (‚â§-trans (max-‚â§l i _) (max-‚â§l _ _)) p)) ‚ü©
      (k ~> c)((k <~ b)((k ~> b)((k <~ a)x)))   ‚â°‚ü® ap (k ~> c) (oc‚Çâ _ _ _ _ _) ‚ü©
      (k ~> c)((k <~ a)((k ~> a)((k <~ b)x)))   ‚â°Àò‚ü® oc‚Çà _ _ _ _ _ ‚ü©
      (k ~> c)((k <~ a)((k ~> c)((k <~ b)x)))   ‚â°‚ü® ap ((k ~> c) ‚àò (k <~ a))
                                                   (~><~ (‚âª1 (‚â§-trans (max-‚â§l _ _) (max-‚â§l _ _)) p) p) ‚ü©
      (k ~> c)((k <~ a)((i ~> c)((i <~ b)x)))   ‚â°‚ü® ~><~ (‚âª1 (max-‚â§r _ _) q') q' ‚ü©
      (j' ~> c)((j' <~ a)((i ~> c)((i <~ b)x))) ‚â°‚ü®‚ü©
      (c ‚Ü§ a)((c ‚Ü§ b)x)                         ‚àé
      where
      i j j' k : Nat
      i = fst (isupp x)
      p : i ‚âª x
      p = snd (isupp x)
      j = fst (isupp ((i ~> b)((i <~ a)x)))
      q : j ‚âª (i ~> b)((i <~ a)x)
      q = snd (isupp ((i ~> b)((i <~ a)x)))
      j' = fst (isupp ((i ~> c)((i <~ b)x)))
      q' : j' ‚âª (i ~> c)((i <~ b)x)
      q' = snd (isupp ((i ~> c)((i <~ b)x)))
      k = max (max i j) j'

    rn‚ÇÑ : -- Equation (26)
      {a b a' b' : ùî∏}
      ‚¶É _ : b  ‚â† a' ‚¶Ñ
      ‚¶É _ : a  ‚â† a' ‚¶Ñ
      ‚¶É _ : b' ‚â† a  ‚¶Ñ
      ‚Üí ---------------------------------------
      (b ‚Ü§ a)((b' ‚Ü§ a')x) ‚â° (b' ‚Ü§ a')((b ‚Ü§ a)x)
    rn‚ÇÑ {a} {b} {a'} {b'} =
      (b ‚Ü§ a)((b' ‚Ü§ a')x)                         ‚â°‚ü®‚ü©
      (j' ~> b)((j' <~ a)((i ~> b')((i <~ a')x))) ‚â°‚ü® ~><~ q' (‚âª1 (max-‚â§r _ _) q') ‚ü©
      (k' ~> b)((k' <~ a)((i ~> b')((i <~ a')x))) ‚â°‚ü® ap ((k' ~> b) ‚àò (k' <~ a)) (~><~ p (‚âª1 (max-‚â§l _ _) p)) ‚ü©
      (k' ~> b)((k' <~ a)((k ~> b')((k <~ a')x))) ‚â°Àò‚ü® ap (k' ~> b) (oc‚Çá _ _ _ _ _ ‚¶É sym‚â† k' k k'‚â†k ‚¶Ñ) ‚ü©
      (k' ~> b)((k ~> b')((k' <~ a)((k <~ a')x))) ‚â°‚ü® oc‚ÇÖ _ _ _ _ _ ‚¶É k'‚â†k ‚¶Ñ ‚ü©
      (k ~> b')((k' ~> b)((k' <~ a)((k <~ a')x))) ‚â°‚ü® ap ((k ~> b') ‚àò (k' ~> b)) (oc‚ÇÜ _ _ _ _ _) ‚ü©
      (k ~> b')((k' ~> b)((k <~ a')((k' <~ a)x))) ‚â°‚ü® ap (k ~> b') (oc‚Çá _ _ _ _ _ ‚¶É k'‚â†k ‚¶Ñ) ‚ü©
      (k ~> b')((k <~ a')((k' ~> b)((k' <~ a)x))) ‚â°‚ü® ap ((k ~> b') ‚àò (k <~ a')) (~><~ (‚âª1 i‚â§k' p) p) ‚ü©
      (k ~> b')((k <~ a')((i ~> b)((i <~ a)x)))   ‚â°‚ü® ~><~ (‚âª1 (max-‚â§r _ _) q) q ‚ü©
      (j ~> b')((j <~ a')((i ~> b)((i <~ a)x)))   ‚â°‚ü®‚ü©
      (b' ‚Ü§ a')((b ‚Ü§ a)x)                         ‚àé
      where
      i j j' k k' : Nat
      i = fst (isupp x)
      p : i ‚âª x
      p = snd (isupp x)
      j = fst (isupp ((i ~> b)((i <~ a)x)))
      q : j ‚âª (i ~> b)((i <~ a)x)
      q = snd (isupp ((i ~> b)((i <~ a)x)))
      j' = fst (isupp ((i ~> b')((i <~ a')x)))
      q' : j' ‚âª (i ~> b')((i <~ a')x)
      q' = snd (isupp ((i ~> b')((i <~ a')x)))
      k = max i j
      k' = max (suc k) j'
      i‚â§k' : i ‚â§ k'
      i‚â§k' = ‚â§-trans (max-‚â§l _ j) (‚â§-trans auto (max-‚â§l _ j'))
      k'‚â†k : k' ‚â† k
      k'‚â†k = ¬¨‚â°‚Üí‚â† (<-not-equal (max-‚â§l _ j') ‚àò sym)

----------------------------------------------------------------------
-- Freshness for rensets ‚ü®Lemma 2.18, Corollary 2.19‚ü©
----------------------------------------------------------------------
module _
  {X : Type}
  ‚¶É _ : lns X ‚¶Ñ
  {x : X}
  {a : ùî∏}
  where
  abstract
    #‚Üíren# : -- Equation (28), first implication
      (_ : a # x)
      (b : ùî∏)
      ‚Üí ----------
      (b ‚Ü§ a)x ‚â° x
    #‚Üíren# a#x b =
      (b ‚Ü§ a) x           ‚â°‚ü®‚ü©
      (i ~> b)((i <~ a)x) ‚â°‚ü® ap (i ~> b) (#2 a#x) ‚ü©
      (i ~> b)x           ‚â°‚ü® ‚âª3 p ‚â§-refl ‚ü©
      x                   ‚àé
      where
      i : Nat
      i = fst (isupp x)
      p : i ‚âª x
      p = snd (isupp x)

    ‚àÄ‚Üí–ò : -- Equation (28), second implication
      (‚àÄ b ‚Üí (b ‚Ü§ a)x ‚â° x)
      ‚Üí --------------------
      –ò[ b ‚àà ùî∏ ] (b ‚Ü§ a)x ‚â° x
    ‚àÄ‚Üí–ò p = –òi √ò Œª b ‚Üí p b

    ren#‚Üí# : -- Equation (28), third implication
      (_ : –ò[ b ‚àà ùî∏ ] (b ‚Ü§ a)x ‚â° x)
      ‚Üí ---------------------------
      a # x
    ren#‚Üí# p = #3 {a = a}{x}{i}
      ((i <~ a) x                    ‚â°Àò‚ü® ap (i <~ a) (‚âª3 q ‚â§-refl) ‚ü©
       (i <~ a)((i ~> a)x)           ‚â°Àò‚ü® ap ((i <~ a) ‚àò (i ~> a)) (#2 b#x) ‚ü©
       (i <~ a)((i ~> a)((i <~ b)x)) ‚â°‚ü® oc‚Çâ _ _ _ _ _ ‚ü©
       (i <~ b)((i ~> b)((i <~ a)x)) ‚â°‚ü® ap (i <~ b) (–òe‚ÇÇ p b ‚¶É b‚àâA ‚¶Ñ) ‚ü©
       (i <~ b)x                     ‚â°‚ü® #2 b#x ‚ü©
       x                             ‚àé)
      where
      A : Finset ùî∏
      A = –òe‚ÇÅ p
      b : ùî∏
      b = new (A ‚à™ –òe‚ÇÅ (asupp x))
      b#x : b # x
      b#x = –òe‚ÇÇ (asupp x) b ‚¶É ‚àâ‚à™‚ÇÇ (–òe‚ÇÅ p) (unfinite (A ‚à™ –òe‚ÇÅ (asupp x))) ‚¶Ñ
      b‚àâA : b ‚àâ A
      b‚àâA = ‚àâ‚à™‚ÇÅ (unfinite (A ‚à™ –òe‚ÇÅ (asupp x)))
      i : Nat
      i = fst (isupp x)
      q : i ‚âª x
      q = snd (isupp x)

#‚Ü§ : -- Corollary 2.19
  {X : Type}
  ‚¶É _ : lns X ‚¶Ñ
  (x : X)
  (a b c : ùî∏)
  ‚¶É _ : c # x ‚¶Ñ
  ‚¶É _ : c ‚â† b ‚¶Ñ
  ‚Üí -----------
  c # (b ‚Ü§ a)x
#‚Ü§ x a b c with b ‚â°? a
... | yes b‚â°a = ap (0 <~ c) b‚Ü§ax‚â°x ‚àô auto ‚àô sym b‚Ü§ax‚â°x
  where b‚Ü§ax‚â°x = ap (Œª b ‚Üí (b ‚Ü§ a)x) b‚â°a ‚àô rn‚ÇÅ
... | no b‚â†a = ren#‚Üí# {x = (b ‚Ü§ a)x} {c} (–òi [ a ] –∏‚ÇÇ)
  where
  –∏‚ÇÇ :
    (d : ùî∏)
    ‚¶É _ : d ‚àâ [ a ] ‚¶Ñ
    ‚Üí ----------------------------
    (d ‚Ü§ c)((b ‚Ü§ a) x) ‚â° (b ‚Ü§ a) x
  –∏‚ÇÇ d with c ‚â°? a
  ... | yes c‚â°a = ap (Œª c ‚Üí (d ‚Ü§ c)((b ‚Ü§ a) x)) c‚â°a ‚àô rn‚ÇÇ ‚¶É auto ‚¶Ñ ‚¶É ¬¨‚â°‚Üí‚â† (b‚â†a ‚àò sym) ‚¶Ñ
  ... | no g =
    (d ‚Ü§ c)((b ‚Ü§ a) x) ‚â°‚ü® rn‚ÇÑ {a = c} {d} {a} {b} ‚¶É ‚àâ‚à∑‚ÇÅ auto ‚¶Ñ ‚¶É ¬¨‚â°‚Üí‚â† g ‚¶Ñ ‚¶É sym‚â† c b auto ‚¶Ñ ‚ü©
    (b ‚Ü§ a)((d ‚Ü§ c) x) ‚â°‚ü® ap (b ‚Ü§ a) (#‚Üíren# auto d) ‚ü©
    (b ‚Ü§ a) x          ‚àé

#‚Ü§' :
  {X : Type}
  ‚¶É _ : lns X ‚¶Ñ
  (x : X)
  (a b : ùî∏)
  ‚¶É _ : a ‚â† b ‚¶Ñ
  ‚Üí -----------
  a # (b ‚Ü§ a)x
#‚Ü§' x a b = ren#‚Üí# (–òi √ò Œª _ ‚Üí rn‚ÇÇ)

ren-supp : -- Remark 2.20
  {X : Type}
  ‚¶É _ : lns X ‚¶Ñ
  (x : X)
  ‚Üí ------------------------------
  –ò[ a ‚àà ùî∏ ] –ò[ b ‚àà ùî∏ ] (b ‚Ü§ a)x ‚â° x
ren-supp x =
  –òi (–òe‚ÇÅ (asupp x)) Œª a ‚Üí –òi √ò Œª b ‚Üí #‚Üíren# (–òe‚ÇÇ (asupp x) a) b

----------------------------------------------------------------------
-- Name-name swapping ‚ü®Equation (29)‚ü©
----------------------------------------------------------------------
module _ {X : Type}‚¶É _ : lns X ‚¶Ñ where
  abstract
    infix 5 _‚âÄ‚Çê‚Çê_
    _‚âÄ‚Çê‚Çê_ : {X : Type}‚¶É _ : lns X ‚¶Ñ ‚Üí ùî∏ ‚Üí ùî∏ ‚Üí X ‚Üí X
    (a ‚âÄ‚Çê‚Çê b)x =
      let c = new ([ a ] ‚à™ [ b ] ‚à™ –òe‚ÇÅ (asupp x)) in
      (b ‚Ü§ c)((a ‚Ü§ b)((c ‚Ü§ a)x))

    ‚âÄ‚Çê‚Çêwelldef :
      (a b c c' : ùî∏)
      (x : X)
      ‚¶É _ : c # x ‚¶Ñ
      ‚¶É _ : c ‚â† a ‚¶Ñ
      ‚¶É _ : c ‚â† b ‚¶Ñ
      ‚¶É _ : c' # x ‚¶Ñ
      ‚¶É _ : c' ‚â† a ‚¶Ñ
      ‚¶É _ : c' ‚â† b ‚¶Ñ
      ‚Üí --------------------------
      (b ‚Ü§ c)((a ‚Ü§ b)((c ‚Ü§ a)x)) ‚â°
      (b ‚Ü§ c')((a ‚Ü§ b)((c' ‚Ü§ a)x))
    ‚âÄ‚Çê‚Çêwelldef a b c c' x with c' ‚â°? c
    ... | yes c'‚â°c = ap (Œª c ‚Üí (b ‚Ü§ c)((a ‚Ü§ b)((c ‚Ü§ a)x))) (sym c'‚â°c)
    ... | no f =
      (b ‚Ü§ c)((a ‚Ü§ b)((c ‚Ü§ a)x))             ‚â°Àò‚ü® ap (b ‚Ü§ c) (#‚Üíren# (#‚Ü§ ((c ‚Ü§ a)x) b a c'
                                                             ‚¶É #‚Ü§ x a c c' ‚¶É auto ‚¶Ñ ‚¶É ¬¨‚â°‚Üí‚â† f ‚¶Ñ ‚¶Ñ) b) ‚ü©
      (b ‚Ü§ c)((b ‚Ü§ c')((a ‚Ü§ b)((c ‚Ü§ a)x)))   ‚â°Àò‚ü® rn‚ÇÉ ‚ü©
      (b ‚Ü§ c')((c' ‚Ü§ c)((a ‚Ü§ b)((c ‚Ü§ a)x)))  ‚â°‚ü® ap (b ‚Ü§ c') (rn‚ÇÑ {a = c} ‚¶É auto ‚¶Ñ ‚¶É auto ‚¶Ñ ‚¶É sym‚â† c a auto ‚¶Ñ) ‚ü©
      (b ‚Ü§ c')((a ‚Ü§ b)((c' ‚Ü§ c)((c ‚Ü§ a)x)))  ‚â°‚ü® ap ((b ‚Ü§ c') ‚àò (a ‚Ü§ b)) rn‚ÇÉ ‚ü©
      (b ‚Ü§ c')((a ‚Ü§ b)((c' ‚Ü§ a)((c' ‚Ü§ c)x))) ‚â°‚ü® ap ((b ‚Ü§ c') ‚àò (a ‚Ü§ b) ‚àò (c' ‚Ü§ a)) (#‚Üíren# auto c') ‚ü©
      (b ‚Ü§ c')((a ‚Ü§ b)((c' ‚Ü§ a)x))           ‚àé

    ‚âÄ‚Çê‚Çêfresh :
      (a b c : ùî∏)
      (x : X)
      ‚¶É _ : c # x ‚¶Ñ
      ‚¶É _ : c ‚â† a ‚¶Ñ
      ‚¶É _ : c ‚â† b ‚¶Ñ
      ‚Üí -------------------------------------
      (a ‚âÄ‚Çê‚Çê b)x ‚â° (b ‚Ü§ c)((a ‚Ü§ b)((c ‚Ü§ a)x))
    ‚âÄ‚Çê‚Çêfresh a b c x =
      let
        as = [ a ] ‚à™ [ b ] ‚à™ –òe‚ÇÅ (asupp x)
        d = new as
        instance
          _ : d # x
          _ = –òe‚ÇÇ (asupp x) d ‚¶É ‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (unfinite as)) ‚¶Ñ
          _ : d ‚â† a
          _ = ‚àâ‚à∑‚ÇÅ (unfinite as)
          _ : d ‚â† b
          _ = ‚àâ‚à∑‚ÇÅ (‚àâ‚à∑‚ÇÇ (unfinite as))
      in ‚âÄ‚Çê‚Çêwelldef a b d c x

  #‚âÄ‚Çê‚Çê :
    (a b c : ùî∏)
    (x : X)
    ‚¶É _ : c # x ‚¶Ñ
    ‚¶É _ : c ‚â† a ‚¶Ñ
    ‚¶É _ : c ‚â† b ‚¶Ñ
    ‚Üí ------------
    c # (a ‚âÄ‚Çê‚Çê b)x
  #‚âÄ‚Çê‚Çê a b c x = subst (c #_) (sym $ ‚âÄ‚Çê‚Çêfresh a b c x) (#‚Ü§' _ c b)

  -- Alternative definition of name-name swapping ‚ü®Equation (30)‚ü©
  alt-‚âÄ‚Çê‚Çê :
    (a b : ùî∏)
    (i j : Nat)
    (x : X)
    (_ : i ‚âª x)
    (_ : j ‚âª x)
    ‚¶É _ : i ‚â† j ‚¶Ñ
    ‚Üí --------------------------------------------------
    (a ‚âÄ‚Çê‚Çê b)x ‚â° (j ~> a)((i ~> b)((j <~ b)((i <~ a)x)))
  alt-‚âÄ‚Çê‚Çê a b i j x p q =
    let
      cs = [ a ] ‚à™ [ b ] ‚à™ –òe‚ÇÅ (asupp x)
      c  = new cs
      r : i ‚âª (a ‚Ü§ b)((c ‚Ü§ a)x)
      r = ‚âª‚Ü§ _ _ _ _ (‚âª‚Ü§ _ _ _ _ p)
      s : j ‚âª (c ‚Ü§ a)x
      s = ‚âª‚Ü§ _ _ _ _ q
      instance
        _ : j ‚â† i
        _ = sym‚â† i j auto
        _ : c # x
        _ = –òe‚ÇÇ (asupp x) c ‚¶É ‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (unfinite cs)) ‚¶Ñ
        _ : c ‚â† b
        _ = ‚àâ‚à∑‚ÇÅ (‚àâ‚à∑‚ÇÇ (unfinite cs))
        _ : c ‚â† a
        _ = ‚àâ‚à∑‚ÇÅ (unfinite cs)
        _ : a ‚â† c
        _ = sym‚â† c a auto
        _ : c # (j <~ b)((i <~ a)x)
        _ = #<~ _ _ _ _ ‚¶É #<~ _ _ _ _ ‚¶Ñ
    in
      (a ‚âÄ‚Çê‚Çê b)x                                                  ‚â°‚ü® ‚âÄ‚Çê‚Çêfresh a b c x ‚ü©
      (b ‚Ü§ c)((a ‚Ü§ b)((c ‚Ü§ a)x))                                  ‚â°‚ü® ‚Ü§fresh _ _ r ‚ü©
      (i ~> b)((i <~ c)((a ‚Ü§ b)((c ‚Ü§ a)x)))                       ‚â°‚ü® ap ((i ~> b) ‚àò (i <~ c)) (‚Ü§fresh _ _ s) ‚ü©
      (i ~> b)((i <~ c)((j ~> a)((j <~ b)((c ‚Ü§ a)x))))            ‚â°‚ü® ap ((i ~> b) ‚àò (i <~ c) ‚àò (j ~> a) ‚àò (j <~ b)) (‚Ü§fresh _ _ p) ‚ü©
      (i ~> b)((i <~ c)((j ~> a)((j <~ b)((i ~> c)((i <~ a)x))))) ‚â°Àò‚ü® ap ((i ~> b) ‚àò (i <~ c) ‚àò (j ~> a)) (oc‚Çá _ _ _ _ _) ‚ü©
      (i ~> b)((i <~ c)((j ~> a)((i ~> c)((j <~ b)((i <~ a)x))))) ‚â°Àò‚ü® ap (i ~> b) (oc‚Çá _ _ _ _ _) ‚ü©
      (i ~> b)((j ~> a)((i <~ c)((i ~> c)((j <~ b)((i <~ a)x))))) ‚â°‚ü® oc‚ÇÖ _ _ _ _ _ ‚ü©
      (j ~> a)((i ~> b)((i <~ c)((i ~> c)((j <~ b)((i <~ a)x))))) ‚â°‚ü® ap ((j ~> a) ‚àò (i ~> b)) (oc‚ÇÉ _ _ _) ‚ü©
      (j ~> a)((i ~> b)((i <~ c)((j <~ b)((i <~ a)x))))           ‚â°‚ü® ap ((j ~> a) ‚àò (i ~> b)) (#2 auto) ‚ü©
      (j ~> a)((i ~> b)((j <~ b)((i <~ a)x)))                     ‚àé

--   --------------------------------------------------------------------
  -- Properties of name-swapping and renaming ‚ü®Lemma 2.21‚ü©
  --------------------------------------------------------------------
  ts‚ÇÅ : -- Equation (31)
    {x : X}
    {a : ùî∏}
    ‚Üí ------------
    (a ‚âÄ‚Çê‚Çê a)x ‚â° x
  ts‚ÇÅ {x} {a} =
    let
      as = [ a ] ‚à™ –òe‚ÇÅ (asupp x)
      c = new as
      instance
        _ : c # x
        _ = –òe‚ÇÇ (asupp x) c ‚¶É ‚àâ‚à∑‚ÇÇ (unfinite as) ‚¶Ñ
        _ : c ‚â† a
        _ = ‚àâ‚à∑‚ÇÅ (unfinite as)
    in
    (a ‚âÄ‚Çê‚Çê a) x                ‚â°‚ü® ‚âÄ‚Çê‚Çêfresh a a c x ‚ü©
    (a ‚Ü§ c)((a ‚Ü§ a)((c ‚Ü§ a)x)) ‚â°‚ü® ap (a ‚Ü§ c) rn‚ÇÅ ‚ü©
    (a ‚Ü§ c)((c ‚Ü§ a)x)          ‚â°‚ü® rn‚ÇÉ ‚ü©
    (a ‚Ü§ a)((a ‚Ü§ c)x)          ‚â°‚ü® rn‚ÇÅ ‚ü©
    (a ‚Ü§ c)x                   ‚â°‚ü® #‚Üíren# auto a ‚ü©
    x                          ‚àé

  ts‚ÇÇ : -- Equation (32 left equality)
    {x : X}
    {a b : ùî∏}
    ‚Üí -----------------------
    (a ‚âÄ‚Çê‚Çê b)((a ‚âÄ‚Çê‚Çê b)x) ‚â° x
  ts‚ÇÇ {x} {a} {b} with a ‚â°? b
  ... | yes a‚â°b = ap (Œª a ‚Üí (a ‚âÄ‚Çê‚Çê b) ((a ‚âÄ‚Çê‚Çê b) x)) a‚â°b ‚àô ts‚ÇÅ ‚àô ts‚ÇÅ
  ... | no f =
    let
      as = [ a ] ‚à™ [ b ] ‚à™ –òe‚ÇÅ (asupp x)
      c = new as
      as' = [ c ] ‚à™ as
      c' = new as'
      instance
        _ : c' # x
        _ = –òe‚ÇÇ (asupp x) c' ‚¶É ‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (unfinite as'))) ‚¶Ñ
        _ : c' ‚â† a
        _ = ‚àâ‚à∑‚ÇÅ (‚àâ‚à∑‚ÇÇ (unfinite as'))
        _ : c' ‚â† b
        _ = ‚àâ‚à∑‚ÇÅ (‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (unfinite as')))
        _ : c' # (a ‚âÄ‚Çê‚Çê b)x
        _ = #‚âÄ‚Çê‚Çê a b c' x
        _ : c' ‚â† c
        _ = ‚àâ‚à∑‚ÇÅ (unfinite as')
        _ : a ‚â† c
        _ = sym‚â† c a (‚àâ‚à∑‚ÇÅ (unfinite as))
        _ : b ‚â† a
        _ = sym‚â† a b (¬¨‚â°‚Üí‚â† f)
        _ : b ‚â† c
        _ = sym‚â† c b (‚àâ‚à∑‚ÇÅ (‚àâ‚à∑‚ÇÇ (unfinite as)))
        _ : c # x
        _ = –òe‚ÇÇ (asupp x) c ‚¶É ‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (unfinite as)) ‚¶Ñ
    in
    (a ‚âÄ‚Çê‚Çê b)((a ‚âÄ‚Çê‚Çê b)x)                                    ‚â°‚ü® ‚âÄ‚Çê‚Çêfresh a b c' ((a ‚âÄ‚Çê‚Çê b)x) ‚ü©
    (b ‚Ü§ c')((a ‚Ü§ b)((c' ‚Ü§ a)((a ‚âÄ‚Çê‚Çê b)x)))                  ‚â°‚ü® ap ((b ‚Ü§ c') ‚àò (a ‚Ü§ b) ‚àò (c' ‚Ü§ a))
                                                                (‚âÄ‚Çê‚Çêfresh a b c x ‚¶É auto ‚¶Ñ ‚¶É sym‚â† _ _ auto ‚¶Ñ ‚¶É sym‚â† _ _ auto ‚¶Ñ) ‚ü©
    (b ‚Ü§ c')((a ‚Ü§ b)((c' ‚Ü§ a)((b ‚Ü§ c)((a ‚Ü§ b)((c ‚Ü§ a)x)))))  ‚â°‚ü® ap ((b ‚Ü§ c') ‚àò (a ‚Ü§ b)) (rn‚ÇÑ {a = a} {c'} {c} {b}) ‚ü©
    (b ‚Ü§ c')((a ‚Ü§ b)((b ‚Ü§ c)((c' ‚Ü§ a)((a ‚Ü§ b)((c ‚Ü§ a)x)))))  ‚â°‚ü® ap ((b ‚Ü§ c') ‚àò (a ‚Ü§ b) ‚àò (b ‚Ü§ c)) rn‚ÇÉ ‚ü©
    (b ‚Ü§ c')((a ‚Ü§ b)((b ‚Ü§ c)((c' ‚Ü§ b)((c' ‚Ü§ a)((c ‚Ü§ a)x))))) ‚â°‚ü® ap ((b ‚Ü§ c') ‚àò (a ‚Ü§ b) ‚àò (b ‚Ü§ c) ‚àò (c' ‚Ü§ b))
                                                                (rn‚ÇÇ {a = a}{c'}{c}) ‚ü©
    (b ‚Ü§ c')((a ‚Ü§ b)((b ‚Ü§ c)((c' ‚Ü§ b)((c ‚Ü§ a)x))))           ‚â°‚ü® ap (b ‚Ü§ c') rn‚ÇÉ ‚ü©
    (b ‚Ü§ c')((a ‚Ü§ c)((a ‚Ü§ b)((c' ‚Ü§ b)((c ‚Ü§ a)x))))           ‚â°‚ü® ap ((b ‚Ü§ c') ‚àò (a ‚Ü§ c))
                                                                (rn‚ÇÇ {a = b}{a}{c'} ‚¶É sym‚â† c' b auto ‚¶Ñ) ‚ü©
    (b ‚Ü§ c')((a ‚Ü§ c)((c' ‚Ü§ b)((c ‚Ü§ a)x)))                    ‚â°‚ü® rn‚ÇÑ {a = c'} {b} {c} {a} ‚¶É auto ‚¶Ñ ‚¶É auto ‚¶Ñ ‚¶É sym‚â† c' a auto ‚¶Ñ ‚ü©
    (a ‚Ü§ c)((b ‚Ü§ c')((c' ‚Ü§ b)((c ‚Ü§ a)x)))                    ‚â°‚ü® ap (a ‚Ü§ c) rn‚ÇÉ ‚ü©
    (a ‚Ü§ c)((b ‚Ü§ b)((b ‚Ü§ c')((c ‚Ü§ a)x)))                     ‚â°‚ü® ap (a ‚Ü§ c) rn‚ÇÅ ‚ü©
    (a ‚Ü§ c)((b ‚Ü§ c')((c ‚Ü§ a)x))                              ‚â°‚ü® rn‚ÇÑ {a = c} {a} {c'} {b} ‚¶É sym‚â† c' a auto ‚¶Ñ ‚¶É sym‚â† c' c auto ‚¶Ñ ‚ü©
    (b ‚Ü§ c')((a ‚Ü§ c)((c ‚Ü§ a)x))                              ‚â°‚ü® ap (b ‚Ü§ c') rn‚ÇÉ ‚ü©
    (b ‚Ü§ c')((a ‚Ü§ a)((a ‚Ü§ c)x))                              ‚â°‚ü® ap (b ‚Ü§ c') rn‚ÇÅ ‚ü©
    (b ‚Ü§ c')((a ‚Ü§ c)x)                                       ‚â°‚ü® ap (b ‚Ü§ c') (#‚Üíren# auto a) ‚ü©
    (b ‚Ü§ c')x                                                ‚â°‚ü® #‚Üíren# auto b ‚ü©
    x                                                        ‚àé

  ts‚ÇÇ' : -- Equation (32 right equality)
    {x : X}
    {a b : ùî∏}
    ‚Üí -----------------------
    (a ‚âÄ‚Çê‚Çê b)((b ‚âÄ‚Çê‚Çê a)x) ‚â° x
  ts‚ÇÇ' {x} {a} {b} with a ‚â°? b
  ... | yes a‚â°b = ap (Œª a ‚Üí (a ‚âÄ‚Çê‚Çê b) ((b ‚âÄ‚Çê‚Çê a) x)) a‚â°b ‚àô ts‚ÇÅ ‚àô ts‚ÇÅ
  ... | no f =
    let
      as = [ b ] ‚à™ [ a ] ‚à™ –òe‚ÇÅ (asupp x)
      c = new as
      as' = [ c ] ‚à™ as
      c' = new as'
      instance
        _ : c' # x
        _ = –òe‚ÇÇ (asupp x) c' ‚¶É ‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (unfinite as'))) ‚¶Ñ
        _ : c' ‚â† b
        _ = ‚àâ‚à∑‚ÇÅ (‚àâ‚à∑‚ÇÇ (unfinite as'))
        _ : c' ‚â† a
        _ = ‚àâ‚à∑‚ÇÅ (‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (unfinite as')))
        _ : c' # (b ‚âÄ‚Çê‚Çê a)x
        _ = #‚âÄ‚Çê‚Çê b a c' x
        _ : c' ‚â† c
        _ = ‚àâ‚à∑‚ÇÅ (unfinite as')
        _ : b ‚â† c
        _ = sym‚â† c b (‚àâ‚à∑‚ÇÅ (unfinite as))
        _ : a ‚â† b
        _ = ¬¨‚â°‚Üí‚â† f
        _ : a ‚â† c
        _ = sym‚â† c a (‚àâ‚à∑‚ÇÅ (‚àâ‚à∑‚ÇÇ (unfinite as)))
        _ : c # x
        _ = –òe‚ÇÇ (asupp x) c ‚¶É ‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (unfinite as)) ‚¶Ñ
    in
    (a ‚âÄ‚Çê‚Çê b)((b ‚âÄ‚Çê‚Çê a)x)                                    ‚â°‚ü® ‚âÄ‚Çê‚Çêfresh a b c' ((b ‚âÄ‚Çê‚Çê a)x) ‚ü©
    (b ‚Ü§ c')((a ‚Ü§ b)((c' ‚Ü§ a)((b ‚âÄ‚Çê‚Çê a)x)))                  ‚â°‚ü® ap ((b ‚Ü§ c') ‚àò (a ‚Ü§ b) ‚àò (c' ‚Ü§ a))
                                                                (‚âÄ‚Çê‚Çêfresh b a c x ‚¶É auto ‚¶Ñ ‚¶É sym‚â† _ _ auto ‚¶Ñ ‚¶É sym‚â† _ _ auto ‚¶Ñ) ‚ü©
    (b ‚Ü§ c')((a ‚Ü§ b)((c' ‚Ü§ a)((a ‚Ü§ c)((b ‚Ü§ a)((c ‚Ü§ b)x)))))  ‚â°‚ü® ap ((b ‚Ü§ c') ‚àò (a ‚Ü§ b)) rn‚ÇÉ ‚ü©
    (b ‚Ü§ c')((a ‚Ü§ b)((c' ‚Ü§ c)((c' ‚Ü§ a)((b ‚Ü§ a)((c ‚Ü§ b)x))))) ‚â°‚ü® ap (b ‚Ü§ c') (rn‚ÇÑ {a = b} {a} {c} {c'}) ‚ü©
    (b ‚Ü§ c')((c' ‚Ü§ c)((a ‚Ü§ b)((c' ‚Ü§ a)((b ‚Ü§ a)((c ‚Ü§ b)x))))) ‚â°‚ü® ap ((b ‚Ü§ c') ‚àò (c' ‚Ü§ c) ‚àò (a ‚Ü§ b)) (rn‚ÇÇ {a = a} {c'} {b}) ‚ü©
    (b ‚Ü§ c')((c' ‚Ü§ c)((a ‚Ü§ b)((b ‚Ü§ a)((c ‚Ü§ b)x))))           ‚â°‚ü® ap ((b ‚Ü§ c') ‚àò (c' ‚Ü§ c)) rn‚ÇÉ ‚ü©
    (b ‚Ü§ c')((c' ‚Ü§ c)((a ‚Ü§ a)((a ‚Ü§ b)((c ‚Ü§ b)x))))           ‚â°‚ü® ap ((b ‚Ü§ c') ‚àò (c' ‚Ü§ c)) rn‚ÇÅ ‚ü©
    (b ‚Ü§ c')((c' ‚Ü§ c)((a ‚Ü§ b)((c ‚Ü§ b)x)))                    ‚â°‚ü® ap ((b ‚Ü§ c') ‚àò (c' ‚Ü§ c)) (rn‚ÇÇ {a = b} {a} {c}) ‚ü©
    (b ‚Ü§ c')((c' ‚Ü§ c)((c ‚Ü§ b)x))                             ‚â°‚ü® ap (b ‚Ü§ c') rn‚ÇÉ ‚ü©
    (b ‚Ü§ c')((c' ‚Ü§ b)((c' ‚Ü§ c)x))                            ‚â°‚ü® rn‚ÇÉ ‚ü©
    (b ‚Ü§ b)((b ‚Ü§ c')((c' ‚Ü§ c)x))                             ‚â°‚ü® rn‚ÇÅ ‚ü©
    (b ‚Ü§ c')((c' ‚Ü§ c)x)                                      ‚â°‚ü® ap (b ‚Ü§ c') (#‚Üíren# auto c') ‚ü©
    (b ‚Ü§ c')x                                                ‚â°‚ü® #‚Üíren# auto b ‚ü©
    x                                                        ‚àé

  ts‚ÇÉ : -- Equation (33)
    {x : X}
    {a b c d : ùî∏}
    ‚¶É _ : b ‚â† c ‚¶Ñ
    ‚¶É _ : c ‚â† a ‚¶Ñ
    ‚¶É _ : a ‚â† d ‚¶Ñ
    ‚¶É _ : d ‚â† b ‚¶Ñ
    ‚Üí -------------------------------------------
    (a ‚âÄ‚Çê‚Çê b)((c ‚âÄ‚Çê‚Çê d)x) ‚â° (c ‚âÄ‚Çê‚Çê d)((a ‚âÄ‚Çê‚Çê b)x)
  ts‚ÇÉ {x} {a} {b} {c} {d} =
    let
      as = [ a ] ‚à™ [ b ] ‚à™ [ c ] ‚à™ [ d ] ‚à™ –òe‚ÇÅ (asupp x)
      e = new as
      as' = [ e ] ‚à™ as
      e' = new as'
      instance
        _ : e # x
        _ = –òe‚ÇÇ (asupp x) e ‚¶É ‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (unfinite as)))) ‚¶Ñ
        _ : e ‚â† a
        _ = ‚àâ‚à∑‚ÇÅ (unfinite as)
        _ : e ‚â† b
        _ = ‚àâ‚à∑‚ÇÅ (‚àâ‚à∑‚ÇÇ (unfinite as))
        _ : e ‚â† c
        _ = ‚àâ‚à∑‚ÇÅ (‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (unfinite as)))
        _ : e ‚â† d
        _ = ‚àâ‚à∑‚ÇÅ (‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (unfinite as))))
        _ : e # (c ‚âÄ‚Çê‚Çê d)x
        _ = #‚âÄ‚Çê‚Çê c d e x
        _ : e' # x
        _ = –òe‚ÇÇ (asupp x) e' ‚¶É ‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (unfinite as'))))) ‚¶Ñ
        _ : e' ‚â† a
        _ = ‚àâ‚à∑‚ÇÅ (‚àâ‚à∑‚ÇÇ (unfinite as'))
        _ : e' ‚â† b
        _ = ‚àâ‚à∑‚ÇÅ (‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (unfinite as')))
        _ : e' ‚â† c
        _ = ‚àâ‚à∑‚ÇÅ (‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (unfinite as'))))
        _ : e' ‚â† d
        _ = ‚àâ‚à∑‚ÇÅ (‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (unfinite as')))))
        _ : e' # (a ‚âÄ‚Çê‚Çê b)x
        _ = #‚âÄ‚Çê‚Çê a b e' x
        _ : e ‚â† e'
        _ = sym‚â† e' e (‚àâ‚à∑‚ÇÅ (unfinite as'))
        _ : a ‚â† e'
        _ = sym‚â† e' a auto
        _ : d ‚â† a
        _ = sym‚â† a d auto
        _ : b ‚â† e'
        _ = sym‚â† e' b auto
        _ : d ‚â† e
        _ = sym‚â† e d auto
        _ : b ‚â† d
        _ = sym‚â† d b auto
        _ : c ‚â† b
        _ = sym‚â† b c auto
        _ : c ‚â† e
        _ = sym‚â† e c auto
        _ : a ‚â† c
        _ = sym‚â† c a auto
        _ : e' ‚â† e
        _ = sym‚â† e e' auto
    in
    (a ‚âÄ‚Çê‚Çê b)((c ‚âÄ‚Çê‚Çê d)x)                                   ‚â°‚ü® ‚âÄ‚Çê‚Çêfresh a b e ((c ‚âÄ‚Çê‚Çê d)x) ‚ü©
    (b ‚Ü§ e)((a ‚Ü§ b)((e ‚Ü§ a)((c ‚âÄ‚Çê‚Çê d)x)))                   ‚â°‚ü® ap ((b ‚Ü§ e) ‚àò (a ‚Ü§ b) ‚àò (e ‚Ü§ a)) (‚âÄ‚Çê‚Çêfresh c d e' x) ‚ü©
    (b ‚Ü§ e)((a ‚Ü§ b)((e ‚Ü§ a)((d ‚Ü§ e')((c ‚Ü§ d)((e' ‚Ü§ c)x))))) ‚â°‚ü® ap ((b ‚Ü§ e) ‚àò (a ‚Ü§ b)) (rn‚ÇÑ {a = a} {e} {e'} {d}) ‚ü©
    (b ‚Ü§ e)((a ‚Ü§ b)((d ‚Ü§ e')((e ‚Ü§ a)((c ‚Ü§ d)((e' ‚Ü§ c)x))))) ‚â°‚ü® ap (b ‚Ü§ e) (rn‚ÇÑ {a = b} {a} {e'} {d} ) ‚ü©
    (b ‚Ü§ e)((d ‚Ü§ e')((a ‚Ü§ b)((e ‚Ü§ a)((c ‚Ü§ d)((e' ‚Ü§ c)x))))) ‚â°‚ü® rn‚ÇÑ {a = e} {b} {e'} {d} ‚ü©
    (d ‚Ü§ e')((b ‚Ü§ e)((a ‚Ü§ b)((e ‚Ü§ a)((c ‚Ü§ d)((e' ‚Ü§ c)x))))) ‚â°‚ü® ap ((d ‚Ü§ e') ‚àò (b ‚Ü§ e) ‚àò (a ‚Ü§ b)) (rn‚ÇÑ {a = a} {e} {d} {c}) ‚ü©
    (d ‚Ü§ e')((b ‚Ü§ e)((a ‚Ü§ b)((c ‚Ü§ d)((e ‚Ü§ a)((e' ‚Ü§ c)x))))) ‚â°‚ü® ap ((d ‚Ü§ e') ‚àò (b ‚Ü§ e)) (rn‚ÇÑ {a = b} {a} {d} {c}) ‚ü©
    (d ‚Ü§ e')((b ‚Ü§ e)((c ‚Ü§ d)((a ‚Ü§ b)((e ‚Ü§ a)((e' ‚Ü§ c)x))))) ‚â°‚ü® ap (d ‚Ü§ e') (rn‚ÇÑ {a = e} {b} {d} {c}) ‚ü©
    (d ‚Ü§ e')((c ‚Ü§ d)((b ‚Ü§ e)((a ‚Ü§ b)((e ‚Ü§ a)((e' ‚Ü§ c)x))))) ‚â°‚ü® ap ((d ‚Ü§ e') ‚àò (c ‚Ü§ d) ‚àò (b ‚Ü§ e) ‚àò (a ‚Ü§ b)) (rn‚ÇÑ {a = a} {e} {c} {e'}) ‚ü©
    (d ‚Ü§ e')((c ‚Ü§ d)((b ‚Ü§ e)((a ‚Ü§ b)((e' ‚Ü§ c)((e ‚Ü§ a)x))))) ‚â°‚ü® ap ((d ‚Ü§ e') ‚àò (c ‚Ü§ d) ‚àò (b ‚Ü§ e)) (rn‚ÇÑ {a = b} {a} {c} {e'}) ‚ü©
    (d ‚Ü§ e')((c ‚Ü§ d)((b ‚Ü§ e)((e' ‚Ü§ c)((a ‚Ü§ b)((e ‚Ü§ a)x))))) ‚â°‚ü® ap ((d ‚Ü§ e') ‚àò (c ‚Ü§ d)) (rn‚ÇÑ {a = e} {b} {c} {e'}) ‚ü©
    (d ‚Ü§ e')((c ‚Ü§ d)((e' ‚Ü§ c)((b ‚Ü§ e)((a ‚Ü§ b)((e ‚Ü§ a)x))))) ‚â°Àò‚ü® ap ((d ‚Ü§ e') ‚àò (c ‚Ü§ d) ‚àò (e' ‚Ü§ c)) (‚âÄ‚Çê‚Çêfresh a b e x) ‚ü©
    (d ‚Ü§ e')((c ‚Ü§ d)((e' ‚Ü§ c)((a ‚âÄ‚Çê‚Çê b)x)))                 ‚â°Àò‚ü® ‚âÄ‚Çê‚Çêfresh c d e' ((a ‚âÄ‚Çê‚Çê b)x) ‚ü©
    (c ‚âÄ‚Çê‚Çê d)((a ‚âÄ‚Çê‚Çê b)x)                                   ‚àé

  ts‚ÇÑ : -- Equation (34)
    {x : X}
    {a b c : ùî∏}
    ‚¶É _ : b ‚â† c ‚¶Ñ
    ‚¶É _ : c ‚â† a ‚¶Ñ
    ‚Üí -------------------------------------------
    (a ‚âÄ‚Çê‚Çê b)((c ‚âÄ‚Çê‚Çê a)x) ‚â° (c ‚âÄ‚Çê‚Çê b)((a ‚âÄ‚Çê‚Çê b)x)
  ts‚ÇÑ {x} {a} {b} {c} with b ‚â°? a
  ... | yes b‚â°a =
    (a ‚âÄ‚Çê‚Çê b)((c ‚âÄ‚Çê‚Çê a)x) ‚â°‚ü® ap (Œª a ‚Üí (a ‚âÄ‚Çê‚Çê b)((c ‚âÄ‚Çê‚Çê a)x)) (sym b‚â°a) ‚ü©
    (b ‚âÄ‚Çê‚Çê b)((c ‚âÄ‚Çê‚Çê b)x) ‚â°‚ü® ts‚ÇÅ ‚àô ap (c ‚âÄ‚Çê‚Çê b) (sym ts‚ÇÅ) ‚ü©
    (c ‚âÄ‚Çê‚Çê b)((b ‚âÄ‚Çê‚Çê b)x) ‚â°‚ü® ap (Œª b‚ÇÄ ‚Üí (c ‚âÄ‚Çê‚Çê b)((b‚ÇÄ ‚âÄ‚Çê‚Çê b)x)) b‚â°a ‚ü©
    (c ‚âÄ‚Çê‚Çê b)((a ‚âÄ‚Çê‚Çê b)x) ‚àé
  ... | no f =
    let
      as = [ a ] ‚à™ [ b ] ‚à™ [ c ] ‚à™ –òe‚ÇÅ (asupp x)
      e = new as
      as' = [ e ] ‚à™ as
      e' = new as'
      instance
        _ : e # x
        _ = –òe‚ÇÇ (asupp x) e ‚¶É ‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (unfinite as))) ‚¶Ñ
        _ : e ‚â† a
        _ = ‚àâ‚à∑‚ÇÅ (unfinite as)
        _ : e ‚â† b
        _ = ‚àâ‚à∑‚ÇÅ (‚àâ‚à∑‚ÇÇ (unfinite as))
        _ : e ‚â† c
        _ = ‚àâ‚à∑‚ÇÅ (‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (unfinite as)))
        _ : e # (c ‚âÄ‚Çê‚Çê a)x
        _ = #‚âÄ‚Çê‚Çê c a e x
        _ : e' # x
        _ = –òe‚ÇÇ (asupp x) e' ‚¶É ‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (unfinite as')))) ‚¶Ñ
        _ : e' ‚â† c
        _ = ‚àâ‚à∑‚ÇÅ (‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (unfinite as'))))
        _ : e' ‚â† a
        _ = ‚àâ‚à∑‚ÇÅ (‚àâ‚à∑‚ÇÇ (unfinite as'))
        _ : e' # x
        _ = –òe‚ÇÇ (asupp x) e' ‚¶É ‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (unfinite as')))) ‚¶Ñ
        _ : e' ‚â† a
        _ = ‚àâ‚à∑‚ÇÅ (‚àâ‚à∑‚ÇÇ (unfinite as'))
        _ : e' ‚â† b
        _ = ‚àâ‚à∑‚ÇÅ (‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (unfinite as')))
        _ : e # (a ‚âÄ‚Çê‚Çê b)x
        _ = #‚âÄ‚Çê‚Çê a b e x
        _ : a ‚â† e'
        _ = sym‚â† e' a auto
        _ : b ‚â† e'
        _ = sym‚â† e' b auto
        _ : a ‚â† c
        _ = sym‚â† c a auto
        _ : e' ‚â† e
        _ = ‚àâ‚à∑‚ÇÅ (unfinite as')
        _ : e ‚â† e'
        _ = sym‚â† e' e auto
        _ : c ‚â† e'
        _ = sym‚â† e' c auto
        _ : c ‚â† b
        _ = sym‚â† b c auto
        _ : b ‚â† a
        _ = ¬¨‚â°‚Üí‚â†  f
    in
    (a ‚âÄ‚Çê‚Çê b)((c ‚âÄ‚Çê‚Çê a)x)                                   ‚â°‚ü® ‚âÄ‚Çê‚Çêfresh a b e ((c ‚âÄ‚Çê‚Çê a)x) ‚ü©
    (b ‚Ü§ e)((a ‚Ü§ b)((e ‚Ü§ a)((c ‚âÄ‚Çê‚Çê a)x)))                   ‚â°‚ü® ap ((b ‚Ü§ e) ‚àò (a ‚Ü§ b) ‚àò (e ‚Ü§ a)) (‚âÄ‚Çê‚Çêfresh c a e' x) ‚ü©
    (b ‚Ü§ e)((a ‚Ü§ b)((e ‚Ü§ a)((a ‚Ü§ e')((c ‚Ü§ a)((e' ‚Ü§ c)x))))) ‚â°‚ü® ap ((b ‚Ü§ e) ‚àò (a ‚Ü§ b)) rn‚ÇÉ ‚ü©
    (b ‚Ü§ e)((a ‚Ü§ b)((e ‚Ü§ e')((e ‚Ü§ a)((c ‚Ü§ a)((e' ‚Ü§ c)x))))) ‚â°‚ü® ap ((b ‚Ü§ e) ‚àò (a ‚Ü§ b) ‚àò (e ‚Ü§ e')) (rn‚ÇÇ {a = a} {e} {c}) ‚ü©
    (b ‚Ü§ e)((a ‚Ü§ b)((e ‚Ü§ e')((c ‚Ü§ a)((e' ‚Ü§ c)x))))          ‚â°‚ü® ap ((b ‚Ü§ e) ‚àò (a ‚Ü§ b)) (rn‚ÇÑ {a = e'} {e} {a} {c}) ‚ü©
    (b ‚Ü§ e)((a ‚Ü§ b)((c ‚Ü§ a)((e ‚Ü§ e')((e' ‚Ü§ c)x))))          ‚â°‚ü® ap ((b ‚Ü§ e) ‚àò (a ‚Ü§ b) ‚àò (c ‚Ü§ a)) rn‚ÇÉ ‚ü©
    (b ‚Ü§ e)((a ‚Ü§ b)((c ‚Ü§ a)((e ‚Ü§ c)((e ‚Ü§ e')x))))           ‚â°‚ü® ap ((b ‚Ü§ e) ‚àò (a ‚Ü§ b) ‚àò (c ‚Ü§ a) ‚àò (e ‚Ü§ c)) (#‚Üíren# auto e) ‚ü©
    (b ‚Ü§ e)((a ‚Ü§ b)((c ‚Ü§ a)((e ‚Ü§ c)x)))                     ‚â°Àò‚ü® ap ((b ‚Ü§ e) ‚àò (a ‚Ü§ b) ‚àò (c ‚Ü§ a)) (#‚Üíren# (#‚Ü§ x c e e') c) ‚ü©
    (b ‚Ü§ e)((a ‚Ü§ b)((c ‚Ü§ a)((c ‚Ü§ e')((e ‚Ü§ c)x))))           ‚â°Àò‚ü® ap ((b ‚Ü§ e) ‚àò (a ‚Ü§ b)) rn‚ÇÉ ‚ü©
    (b ‚Ü§ e)((a ‚Ü§ b)((c ‚Ü§ e')((e' ‚Ü§ a)((e ‚Ü§ c)x))))          ‚â°Àò‚ü® ap (b ‚Ü§ e) (rn‚ÇÑ {a = e'} {c} {b} {a}) ‚ü©
    (b ‚Ü§ e)((c ‚Ü§ e')((a ‚Ü§ b)((e' ‚Ü§ a)((e ‚Ü§ c)x))))          ‚â°Àò‚ü® ap ((b ‚Ü§ e) ‚àò (c ‚Ü§ e')) (rn‚ÇÇ {a = b} {c} {a}) ‚ü©
    (b ‚Ü§ e)((c ‚Ü§ e')((c ‚Ü§ b)((a ‚Ü§ b)((e' ‚Ü§ a)((e ‚Ü§ c)x))))) ‚â°Àò‚ü® ap ((b ‚Ü§ e) ‚àò (c ‚Ü§ e') ‚àò (c ‚Ü§ b) ‚àò (a ‚Ü§ b)) (rn‚ÇÑ {a = c} {e} {a} {e'}) ‚ü©
    (b ‚Ü§ e)((c ‚Ü§ e')((c ‚Ü§ b)((a ‚Ü§ b)((e ‚Ü§ c)((e' ‚Ü§ a)x))))) ‚â°Àò‚ü® ap ((b ‚Ü§ e) ‚àò (c ‚Ü§ e') ‚àò (c ‚Ü§ b)) (rn‚ÇÑ {a = c} {e} {b} {a}) ‚ü©
    (b ‚Ü§ e)((c ‚Ü§ e')((c ‚Ü§ b)((e ‚Ü§ c)((a ‚Ü§ b)((e' ‚Ü§ a)x))))) ‚â°Àò‚ü® ap (b ‚Ü§ e) rn‚ÇÉ ‚ü©
    (b ‚Ü§ e)((c ‚Ü§ b)((b ‚Ü§ e')((e ‚Ü§ c)((a ‚Ü§ b)((e' ‚Ü§ a)x))))) ‚â°Àò‚ü® ap ((b ‚Ü§ e) ‚àò (c ‚Ü§ b)) (rn‚ÇÑ {a = c} {e} {e'} {b}) ‚ü©
    (b ‚Ü§ e)((c ‚Ü§ b)((e ‚Ü§ c)((b ‚Ü§ e')((a ‚Ü§ b)((e' ‚Ü§ a)x))))) ‚â°Àò‚ü® ap ((b ‚Ü§ e) ‚àò (c ‚Ü§ b) ‚àò (e ‚Ü§ c)) (‚âÄ‚Çê‚Çêfresh a b e' x) ‚ü©
    (b ‚Ü§ e)((c ‚Ü§ b)((e ‚Ü§ c)((a ‚âÄ‚Çê‚Çê b)x)))                   ‚â°Àò‚ü® ‚âÄ‚Çê‚Çêfresh c b e ((a ‚âÄ‚Çê‚Çê b)x) ‚ü©
    (c ‚âÄ‚Çê‚Çê b)((a ‚âÄ‚Çê‚Çê b)x)                                   ‚àé

  ts‚ÇÖ : -- Equation (35)
    {x : X}
    {a b c : ùî∏}
    ‚¶É _ : b ‚â† c ‚¶Ñ
    ‚Üí -------------------------------------
    (c ‚Ü§ b)((a ‚âÄ‚Çê‚Çê b)x) ‚â° (a ‚Ü§ b)((c ‚Ü§ a)x)
  ts‚ÇÖ {x} {a} {b} {c} with b ‚â°? a
  ... | yes b‚â°a =
    (c ‚Ü§ b)((a ‚âÄ‚Çê‚Çê b)x) ‚â°‚ü® ap (Œª b ‚Üí (c ‚Ü§ b)((a ‚âÄ‚Çê‚Çê b)x)) b‚â°a ‚ü©
    (c ‚Ü§ a)((a ‚âÄ‚Çê‚Çê a)x) ‚â°‚ü® ap (c ‚Ü§ a) ts‚ÇÅ ‚àô sym rn‚ÇÅ ‚ü©
    (a ‚Ü§ a)((c ‚Ü§ a)x)   ‚â°‚ü® ap (Œª a‚ÇÄ ‚Üí (a ‚Ü§ a‚ÇÄ)((c ‚Ü§ a)x)) (sym b‚â°a) ‚ü©
    (a ‚Ü§ b)((c ‚Ü§ a)x)   ‚àé
  ... | no f =
    let
      as = [ a ] ‚à™ [ b ] ‚à™ [ c ] ‚à™ –òe‚ÇÅ (asupp x)
      d = new as
      instance
        _ : d # x
        _ = –òe‚ÇÇ (asupp x) d ‚¶É ‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (unfinite as))) ‚¶Ñ
        _ : d ‚â† a
        _ = ‚àâ‚à∑‚ÇÅ (unfinite as)
        _ : d ‚â† b
        _ = ‚àâ‚à∑‚ÇÅ (‚àâ‚à∑‚ÇÇ (unfinite as))
        _ : b ‚â† a
        _ = ¬¨‚â°‚Üí‚â† f
        _ : c ‚â† b
        _ = sym‚â† b c auto
        _ : a ‚â† d
        _ = sym‚â† d a auto
    in
    (c ‚Ü§ b)((a ‚âÄ‚Çê‚Çê b)x)                 ‚â°‚ü® ap (c ‚Ü§ b) (‚âÄ‚Çê‚Çêfresh a b d x) ‚ü©
    (c ‚Ü§ b)((b ‚Ü§ d)((a ‚Ü§ b)((d ‚Ü§ a)x))) ‚â°‚ü® rn‚ÇÉ  ‚ü©
    (c ‚Ü§ d)((c ‚Ü§ b)((a ‚Ü§ b)((d ‚Ü§ a)x))) ‚â°‚ü® ap (c ‚Ü§ d) (rn‚ÇÇ {a = b} {c} {a}) ‚ü©
    (c ‚Ü§ d)((a ‚Ü§ b)((d ‚Ü§ a)x))          ‚â°‚ü® rn‚ÇÑ {a = d} {c} {b} {a} ‚ü©
    (a ‚Ü§ b)((c ‚Ü§ d)((d ‚Ü§ a)x))          ‚â°‚ü® ap (a ‚Ü§ b) rn‚ÇÉ ‚ü©
    (a ‚Ü§ b)((c ‚Ü§ a)((c ‚Ü§ d)x))          ‚â°‚ü® ap ((a ‚Ü§ b) ‚àò (c ‚Ü§ a)) (#‚Üíren# auto c) ‚ü©
    (a ‚Ü§ b)((c ‚Ü§ a)x)                   ‚àé

  ts‚ÇÜ : -- Equation (36)
    {x : X}
    {a b c d : ùî∏}
    ‚¶É _ : b ‚â† c ‚¶Ñ
    ‚¶É _ : c ‚â† a ‚¶Ñ
    ‚¶É _ : a ‚â† d ‚¶Ñ
    ‚¶É _ : d ‚â† b ‚¶Ñ
    ‚Üí ---------------------------------------
    (a ‚âÄ‚Çê‚Çê b)((d ‚Ü§ c)x) ‚â° (d ‚Ü§ c)((a ‚âÄ‚Çê‚Çê b)x)
  ts‚ÇÜ {x} {a} {b} {c} {d} =
    let
      as = [ a ] ‚à™ [ b ] ‚à™ [ c ] ‚à™ [ d ] ‚à™ –òe‚ÇÅ (asupp x)
      e = new as
      instance
        _ : e # x
        _ = –òe‚ÇÇ (asupp x) e ‚¶É ‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (unfinite as)))) ‚¶Ñ
        _ : e ‚â† a
        _ = ‚àâ‚à∑‚ÇÅ (unfinite as)
        _ : e ‚â† b
        _ = ‚àâ‚à∑‚ÇÅ (‚àâ‚à∑‚ÇÇ (unfinite as))
        _ : e ‚â† c
        _ = ‚àâ‚à∑‚ÇÅ (‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (unfinite as)))
        _ : e ‚â† d
        _ = ‚àâ‚à∑‚ÇÅ (‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (unfinite as))))
        _ : e # (d ‚Ü§ c)x
        _ = #‚Ü§ x c d e
        _ : a ‚â† c
        _ = sym‚â† c a auto
        _ : d ‚â† a
        _ = sym‚â† a d auto
        _ : d ‚â† e
        _ = sym‚â† e d auto
    in
    (a ‚âÄ‚Çê‚Çê b)((d ‚Ü§ c)x)                 ‚â°‚ü® ‚âÄ‚Çê‚Çêfresh a b e ((d ‚Ü§ c)x) ‚ü©
    (b ‚Ü§ e)((a ‚Ü§ b)((e ‚Ü§ a)((d ‚Ü§ c)x))) ‚â°‚ü® ap ((b ‚Ü§ e) ‚àò (a ‚Ü§ b)) (rn‚ÇÑ {a = a} {e} {c} {d}) ‚ü©
    (b ‚Ü§ e)((a ‚Ü§ b)((d ‚Ü§ c)((e ‚Ü§ a)x))) ‚â°‚ü® ap (b ‚Ü§ e) (rn‚ÇÑ {a = b} {a} {c} {d}) ‚ü©
    (b ‚Ü§ e)((d ‚Ü§ c)((a ‚Ü§ b)((e ‚Ü§ a)x))) ‚â°‚ü® rn‚ÇÑ {a = e} {b} {c} {d} ‚ü©
    (d ‚Ü§ c)((b ‚Ü§ e)((a ‚Ü§ b)((e ‚Ü§ a)x))) ‚â°Àò‚ü® ap (d ‚Ü§ c) (‚âÄ‚Çê‚Çêfresh a b e x) ‚ü©
    (d ‚Ü§ c)((a ‚âÄ‚Çê‚Çê b)x)                 ‚àé

  ts‚Çá : -- Equation (37)
    {x : X}
    {a b c : ùî∏}
    ‚¶É _ : b ‚â† c ‚¶Ñ
    ‚¶É _ : c ‚â† a ‚¶Ñ
    ‚Üí ---------------------------------------
    (a ‚âÄ‚Çê‚Çê b)((a ‚Ü§ c)x) ‚â° (b ‚Ü§ c)((a ‚âÄ‚Çê‚Çê b)x)
  ts‚Çá {x} {a} {b} {c} =
    let
      as = [ a ] ‚à™ [ b ] ‚à™ [ c ] ‚à™ –òe‚ÇÅ (asupp x)
      d = new as
      instance
        _ : d # x
        _ = –òe‚ÇÇ (asupp x) d ‚¶É ‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (unfinite as))) ‚¶Ñ
        _ : d ‚â† a
        _ = ‚àâ‚à∑‚ÇÅ (unfinite as)
        _ : d ‚â† b
        _ = ‚àâ‚à∑‚ÇÅ (‚àâ‚à∑‚ÇÇ (unfinite as))
        _ : d ‚â† c
        _ = ‚àâ‚à∑‚ÇÅ (‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (unfinite as)))
        _ : d # (a ‚Ü§ c)x
        _ = #‚Ü§ x c a d
        _ : a ‚â† c
        _ = sym‚â† c a auto
    in
    (a ‚âÄ‚Çê‚Çê b)((a ‚Ü§ c)x)                 ‚â°‚ü® ‚âÄ‚Çê‚Çêfresh a b d ((a ‚Ü§ c)x) ‚ü©
    (b ‚Ü§ d)((a ‚Ü§ b)((d ‚Ü§ a)((a ‚Ü§ c)x))) ‚â°‚ü® ap ((b ‚Ü§ d) ‚àò (a ‚Ü§ b)) rn‚ÇÉ ‚ü©
    (b ‚Ü§ d)((a ‚Ü§ b)((d ‚Ü§ c)((d ‚Ü§ a)x))) ‚â°‚ü® ap (b ‚Ü§ d) (rn‚ÇÑ {a = b} {a} {c} {d}) ‚ü©
    (b ‚Ü§ d)((d ‚Ü§ c)((a ‚Ü§ b)((d ‚Ü§ a)x))) ‚â°‚ü® rn‚ÇÉ ‚ü©
    (b ‚Ü§ c)((b ‚Ü§ d)((a ‚Ü§ b)((d ‚Ü§ a)x))) ‚â°Àò‚ü® ap (b ‚Ü§ c) (‚âÄ‚Çê‚Çêfresh a b d x) ‚ü©
    (b ‚Ü§ c)((a ‚âÄ‚Çê‚Çê b)x)                 ‚àé

  ts‚Çà : -- Equation (38)
    {x : X}
    {a b c : ùî∏}
    ‚¶É _ : b ‚â† c ‚¶Ñ
    ‚¶É _ : c ‚â† a ‚¶Ñ
    ‚Üí ---------------------------------------
    (a ‚âÄ‚Çê‚Çê b)((c ‚Ü§ a)x) ‚â° (c ‚Ü§ b)((a ‚âÄ‚Çê‚Çê b)x)
  ts‚Çà {x} {a} {b} {c} with b ‚â°? a
  ... | yes b‚â°a =
    (a ‚âÄ‚Çê‚Çê b)((c ‚Ü§ a)x) ‚â°‚ü® ap (Œª a ‚Üí (a ‚âÄ‚Çê‚Çê b)((c ‚Ü§ a)x)) (sym b‚â°a) ‚ü©
    (b ‚âÄ‚Çê‚Çê b)((c ‚Ü§ b)x) ‚â°‚ü® ts‚ÇÅ ‚àô ap (c ‚Ü§ b) (sym ts‚ÇÅ) ‚ü©
    (c ‚Ü§ b)((b ‚âÄ‚Çê‚Çê b)x) ‚â°‚ü® ap (Œª b‚ÇÄ ‚Üí (c ‚Ü§ b)((b‚ÇÄ ‚âÄ‚Çê‚Çê b)x)) b‚â°a ‚ü©
    (c ‚Ü§ b)((a ‚âÄ‚Çê‚Çê b)x) ‚àé
  ... | no f =
    let
      as = [ a ] ‚à™ [ b ] ‚à™ [ c ] ‚à™ –òe‚ÇÅ (asupp x)
      d = new as
      instance
        _ : d # x
        _ = –òe‚ÇÇ (asupp x) d ‚¶É ‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (unfinite as))) ‚¶Ñ
        _ : d ‚â† a
        _ = ‚àâ‚à∑‚ÇÅ (unfinite as)
        _ : d ‚â† b
        _ = ‚àâ‚à∑‚ÇÅ (‚àâ‚à∑‚ÇÇ (unfinite as))
        _ : d ‚â† c
        _ = ‚àâ‚à∑‚ÇÅ (‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (unfinite as)))
        _ : d # (c ‚Ü§ a)x
        _ = #‚Ü§ x a c d
        _ : a ‚â† c
        _ = sym‚â† c a auto
        _ : d # (a ‚Ü§ b)((c ‚Ü§ a)x)
        _ = #‚Ü§ _ b a d
        _ : b ‚â† a
        _ = ¬¨‚â°‚Üí‚â† f
        _ : c ‚â† b
        _ = sym‚â† b c auto
        _ : a ‚â† d
        _ = sym‚â† d a auto
    in
    (a ‚âÄ‚Çê‚Çê b)((c ‚Ü§ a)x)                 ‚â°‚ü® ‚âÄ‚Çê‚Çêfresh a b d ((c ‚Ü§ a)x) ‚ü©
    (b ‚Ü§ d)((a ‚Ü§ b)((d ‚Ü§ a)((c ‚Ü§ a)x))) ‚â°‚ü® ap ((b ‚Ü§ d) ‚àò (a ‚Ü§ b)) (rn‚ÇÇ {a = a} {d} {c}) ‚ü©
    (b ‚Ü§ d)((a ‚Ü§ b)((c ‚Ü§ a)x))          ‚â°‚ü® #‚Üíren# auto b ‚ü©
    (a ‚Ü§ b)((c ‚Ü§ a)x)                   ‚â°Àò‚ü® ap ((a ‚Ü§ b) ‚àò (c ‚Ü§ a)) (#‚Üíren# auto c) ‚ü©
    (a ‚Ü§ b)((c ‚Ü§ a)((c ‚Ü§ d)x))          ‚â°Àò‚ü® ap (a ‚Ü§ b) rn‚ÇÉ ‚ü©
    (a ‚Ü§ b)((c ‚Ü§ d)((d ‚Ü§ a)x))          ‚â°Àò‚ü® rn‚ÇÑ {a = d} {c} {b} {a} ‚ü©
    (c ‚Ü§ d)((a ‚Ü§ b)((d ‚Ü§ a)x))          ‚â°Àò‚ü® ap (c ‚Ü§ d) (rn‚ÇÇ {a = b}{c}{a}) ‚ü©
    (c ‚Ü§ d)((c ‚Ü§ b)((a ‚Ü§ b)((d ‚Ü§ a)x))) ‚â°Àò‚ü® rn‚ÇÉ ‚ü©
    (c ‚Ü§ b)((b ‚Ü§ d)((a ‚Ü§ b)((d ‚Ü§ a)x))) ‚â°Àò‚ü® ap (c ‚Ü§ b) (‚âÄ‚Çê‚Çêfresh a b d x) ‚ü©
    (c ‚Ü§ b)((a ‚âÄ‚Çê‚Çê b)x)                 ‚àé

  ts‚Çâ : -- Equation (39)
    {x : X}
    {a b : ùî∏}
    ‚Üí ---------------------------------------
    (a ‚âÄ‚Çê‚Çê b)((b ‚Ü§ a)x) ‚â° (a ‚Ü§ b)((a ‚âÄ‚Çê‚Çê b)x)
  ts‚Çâ {x} {a} {b} with b ‚â°? a
  ... | yes b‚â°a =
    (a ‚âÄ‚Çê‚Çê b)((b ‚Ü§ a)x) ‚â°‚ü® ap (Œª b ‚Üí (a ‚âÄ‚Çê‚Çê b)((b ‚Ü§ a)x)) b‚â°a ‚ü©
    (a ‚âÄ‚Çê‚Çê a)((a ‚Ü§ a)x) ‚â°‚ü® ts‚ÇÅ ‚àô ap (a ‚Ü§ a) (sym ts‚ÇÅ) ‚ü©
    (a ‚Ü§ a)((a ‚âÄ‚Çê‚Çê a)x) ‚â°‚ü® ap (Œª a‚ÇÄ ‚Üí (a ‚Ü§ a‚ÇÄ)((a ‚âÄ‚Çê‚Çê a‚ÇÄ)x)) (sym b‚â°a) ‚ü©
    (a ‚Ü§ b)((a ‚âÄ‚Çê‚Çê b)x) ‚àé
  ... | no f =
    let
      as = [ a ] ‚à™ [ b ] ‚à™ –òe‚ÇÅ (asupp x)
      c = new as
      instance
        _ : c # x
        _ = –òe‚ÇÇ (asupp x) c ‚¶É ‚àâ‚à∑‚ÇÇ (‚àâ‚à∑‚ÇÇ (unfinite as)) ‚¶Ñ
        _ : c ‚â† a
        _ = ‚àâ‚à∑‚ÇÅ (unfinite as)
        _ : c ‚â† b
        _ = ‚àâ‚à∑‚ÇÅ (‚àâ‚à∑‚ÇÇ (unfinite as))
        _ : c # (b ‚Ü§ a)x
        _ = #‚Ü§ x a b c
        _ : b ‚â† a
        _ = ¬¨‚â°‚Üí‚â† f
        _ : a ‚â† b
        _ = sym‚â† b a auto
        _ : c # (a ‚Ü§ b)x
        _ = #‚Ü§ x b a c
        _ : a ‚â† c
        _ = sym‚â† c a auto
    in
    (a ‚âÄ‚Çê‚Çê b)((b ‚Ü§ a)x)                 ‚â°‚ü® ‚âÄ‚Çê‚Çêfresh a b c ((b ‚Ü§ a)x) ‚ü©
    (b ‚Ü§ c)((a ‚Ü§ b)((c ‚Ü§ a)((b ‚Ü§ a)x))) ‚â°‚ü® ap ((b ‚Ü§ c) ‚àò (a ‚Ü§ b)) (rn‚ÇÇ {a = a} {c} {b}) ‚ü©
    (b ‚Ü§ c)((a ‚Ü§ b)((b ‚Ü§ a)x))          ‚â°‚ü® ap (b ‚Ü§ c) rn‚ÇÉ ‚ü©
    (b ‚Ü§ c)((a ‚Ü§ a)((a ‚Ü§ b)x))          ‚â°‚ü® ap (b ‚Ü§ c) rn‚ÇÅ ‚ü©
    (b ‚Ü§ c)((a ‚Ü§ b)x)                   ‚â°‚ü® #‚Üíren# auto b ‚ü©
    (a ‚Ü§ b)x                            ‚â°Àò‚ü® ap (a ‚Ü§ b) (#‚Üíren# auto a) ‚ü©
    (a ‚Ü§ b)((a ‚Ü§ c)x)                   ‚â°Àò‚ü® ap (a ‚Ü§ b) rn‚ÇÅ ‚ü©
    (a ‚Ü§ b)((a ‚Ü§ a)((a ‚Ü§ c)x))          ‚â°Àò‚ü® ap (a ‚Ü§ b) rn‚ÇÉ ‚ü©
    (a ‚Ü§ b)((a ‚Ü§ c)((c ‚Ü§ a)x))          ‚â°Àò‚ü® rn‚ÇÑ {a = c} {a} {b} {a} ‚ü©
    (a ‚Ü§ c)((a ‚Ü§ b)((c ‚Ü§ a)x))          ‚â°Àò‚ü® ap (a ‚Ü§ c) (rn‚ÇÇ {a = b} {a} {a}) ‚ü©
    (a ‚Ü§ c)((a ‚Ü§ b)((a ‚Ü§ b)((c ‚Ü§ a)x))) ‚â°Àò‚ü® rn‚ÇÉ ‚ü©
    (a ‚Ü§ b)((b ‚Ü§ c)((a ‚Ü§ b)((c ‚Ü§ a)x))) ‚â°Àò‚ü® ap (a ‚Ü§ b) (‚âÄ‚Çê‚Çêfresh a b c x) ‚ü©
    (a ‚Ü§ b)((a ‚âÄ‚Çê‚Çê b)x)                 ‚àé
