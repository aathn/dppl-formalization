--------------------------------------------------------------
-- This file was adapted from the code accompanying the paper
--
-- Andrew M. Pitts, "Locally Nameless Sets", POPL 2023
--
-- (¬© 2023 Andrew Pitts, University of Cambridge)
--
-- https://amp12.github.io/LocallyNamelessSets/
--------------------------------------------------------------

module Lib.LocallyNameless.Support where

open import Lib.Prelude
open import Lib.LocallyNameless.Unfinite
open import Lib.LocallyNameless.oc-Sets
open import Lib.LocallyNameless.Freshness
open import Lib.LocallyNameless.LocalClosedness

open import Data.Nat.Order using (<-not-equal)

open FinsetSyntax

----------------------------------------------------------------------
-- Locally nameless sets [Definition 2.9]
----------------------------------------------------------------------
record lns (X : Type) : Type where
  constructor mklns
  field
    ‚¶É ocSet ‚¶Ñ : oc X
    asupp : (x : X) ‚Üí –ò[ a ‚àà ùî∏ ] a # x
    isupp : (x : X) ‚Üí Œ£[ i ‚àà Nat ] (i ‚âª x)

open lns ‚¶É ... ‚¶Ñ public

infix 4 _atom-supports_
_atom-supports_ :
  {X : Type}
  ‚¶É _ : oc X ‚¶Ñ
  (A : Finset ùî∏)
  (x : X)
  ‚Üí ----------
  Type
A atom-supports x = ‚àÄ a ‚Üí a ‚àâ A ‚Üí a # x

----------------------------------------------------------------------
-- Locally nameless set of indices and atoms [Example 2.10]
----------------------------------------------------------------------
lnsNatùî∏ : lns Natùî∏
ocSet ‚¶É lnsNatùî∏ ‚¶Ñ = ocNatùî∏
asupp ‚¶É lnsNatùî∏ ‚¶Ñ (inl i) = –òi √ò Œª _ ‚Üí refl
asupp ‚¶É lnsNatùî∏ ‚¶Ñ (inr a) = –òi [ a ] –∏‚ÇÇ
  where
  –∏‚ÇÇ : (b : ùî∏)‚¶É _ : b ‚àâ [ a ] ‚¶Ñ ‚Üí b # inr a
  –∏‚ÇÇ b ‚¶É p ‚¶Ñ = if·µà-no (b ‚â°? a) ‚àâ‚à∑‚ÇÅ
isupp ‚¶É lnsNatùî∏ ‚¶Ñ (inl i) = (suc i , s‚ÇÇ)
  where
  s‚ÇÇ : suc i ‚âª inl i
  s‚ÇÇ j ‚¶É p ‚¶Ñ = new √ò , if·µà-‚â† (<-not-equal p ‚àò sym)
isupp ‚¶É lnsNatùî∏ ‚¶Ñ (inr a) = (0 , Œª _ ‚Üí (a , refl))

----------------------------------------------------------------------
-- Lambda terms [Example 2.11]
----------------------------------------------------------------------
module LambdaTerm where
  data Lam : Type where
    var : Natùî∏ ‚Üí Lam
    lam : Lam ‚Üí Lam
    app : Lam √ó Lam ‚Üí Lam

  pattern bvar i = var (inl i)
  pattern fvar a = var (inr a)

  lam-inj : ‚àÄ{t t'} ‚Üí lam t ‚â° lam t' ‚Üí t ‚â° t'
  lam-inj {t} p = ap f p where
    f = Œª {(lam t) ‚Üí t ; _ ‚Üí t}

  app-inj :
    {t‚ÇÅ t‚ÇÇ t‚ÇÅ' t‚ÇÇ' : Lam}
    (_ : app(t‚ÇÅ , t‚ÇÇ) ‚â° app(t‚ÇÅ' , t‚ÇÇ'))
    ‚Üí ---------------------------------
    (t‚ÇÅ ‚â° t‚ÇÅ') √ó (t‚ÇÇ ‚â° t‚ÇÇ')
  app-inj {t‚ÇÅ} p = ap f‚ÇÅ p , ap f‚ÇÇ p where
    f‚ÇÅ = Œª {(app(t‚ÇÅ , _)) ‚Üí t‚ÇÅ ; _ ‚Üí t‚ÇÅ}
    f‚ÇÇ = Œª {(app(_ , t‚ÇÇ)) ‚Üí t‚ÇÇ ; _ ‚Üí t‚ÇÅ}

  -- Lam is an oc-set
  instance
    ocLam : oc Lam
    ocLam = mkoc opn cls ax‚ÇÅ {!!} {!!} {!!} {!!} {!!} {!!} {!!} {!!} -- ax‚ÇÇ ax‚ÇÉ ax‚ÇÑ ax‚ÇÖ ax‚ÇÜ ax‚Çá ax‚Çà ax‚Çâ
      where
      X = Lam
      opn : Nat ‚Üí ùî∏ ‚Üí X ‚Üí X
      opn i a (var v)   = var ((i ~> a) v)
      opn i a (lam t) = lam(opn (suc i) a t)
      opn i a (app(t , t')) = app(opn i a t , opn i a t')
      cls : Nat ‚Üí ùî∏ ‚Üí X ‚Üí X
      cls i a (var v)   = var ((i <~ a) v)
      cls i a (lam t) = lam(cls (suc i) a t)
      cls i a (app(t , t')) = app(cls i a t , cls i a t')
      ax‚ÇÅ :
        (i : Nat)
        (a b : ùî∏)
        (t : X)
        ‚Üí -----------------------------
        opn i a (opn i b t) ‚â° opn i b t
      ax‚ÇÅ i a b (var v) = ap var (oc‚ÇÅ i a b v)
      ax‚ÇÅ i a b (lam t) = ap lam (ax‚ÇÅ (suc i) a b t)
      ax‚ÇÅ i a b (app(t , t')) =
        ap‚ÇÇ (Œª t‚ÇÅ t‚ÇÇ ‚Üí app(t‚ÇÅ , t‚ÇÇ)) (ax‚ÇÅ i a b t) (ax‚ÇÅ i a b t')
--       ax‚ÇÇ :
--         (i j : Nat)
--         (a : ùî∏)
--         (t : X)
--         ‚Üí -----------------------------
--         cls i a (cls j a t) ‚â° cls j a t
--       ax‚ÇÇ i j a (var v)
--         rewrite oc‚ÇÇ i j a v = refl
--       ax‚ÇÇ i j a (lam t)
--         rewrite ax‚ÇÇ (1 + i) (j +1) a t = refl
--       ax‚ÇÇ i j a (app(t , t'))
--         rewrite ax‚ÇÇ i j a t | ax‚ÇÇ i j a t' =  refl
--       ax‚ÇÉ :
--         (i : Nat)
--         (a : ùî∏)
--         (t : X)
--         ‚Üí -----------------------------
--         cls i a (opn i a t) ‚â° cls i a t
--       ax‚ÇÉ i a (var v)
--         rewrite oc‚ÇÉ i a v = refl
--       ax‚ÇÉ i a (lam t)
--         rewrite ax‚ÇÉ (1 + i) a t = refl
--       ax‚ÇÉ i a (app(t , t'))
--         rewrite ax‚ÇÉ i a t | ax‚ÇÉ i a t' = refl
--       ax‚ÇÑ :
--         (i : Nat)
--         (a : ùî∏)
--         (t : X)
--         ‚Üí -----------------------------
--           opn i a (cls i a t) ‚â° opn i a t
--       ax‚ÇÑ i a (var v)
--         rewrite oc‚ÇÑ i a v = refl
--       ax‚ÇÑ i a (lam t)
--         rewrite ax‚ÇÑ (1 + i) a t = refl
--       ax‚ÇÑ i a (app(t , t'))
--         rewrite ax‚ÇÑ i a t | ax‚ÇÑ i a t' = refl
--       ax‚ÇÖ :
--         (i j : Nat)
--         (a b : ùî∏)
--         (t : X)
--         ‚¶É _ : i ‚â† j ‚¶Ñ
--         ‚Üí ---------------------------------------
--         opn i a (opn j b t) ‚â° opn j b (opn i a t)
--       ax‚ÇÖ i j a b (var v)
--         rewrite oc‚ÇÖ i j a b v ‚¶É it ‚¶Ñ = refl
--       ax‚ÇÖ i j a b (lam t)
--         rewrite ax‚ÇÖ (i +1) (j +1) a b t ‚¶É +1‚â† {i} it ‚¶Ñ = refl
--       ax‚ÇÖ i j a b  (app(t , t'))
--         rewrite ax‚ÇÖ i j a b t ‚¶É it ‚¶Ñ | ax‚ÇÖ i j a b t' ‚¶É it ‚¶Ñ = refl
--       ax‚ÇÜ :
--         (i j : Nat)
--         (a b : ùî∏)
--         (t : X)
--           ‚¶É _ : a ‚â† b ‚¶Ñ
--         ‚Üí ---------------------------------------
--         cls i a (cls j b t) ‚â° cls j b (cls i a t)
--       ax‚ÇÜ i j a b (var v)
--         rewrite oc‚ÇÜ i j a b v ‚¶É it ‚¶Ñ = refl
--       ax‚ÇÜ i j a b (lam t)
--         rewrite ax‚ÇÜ (i +1) (j +1) a b t ‚¶É it ‚¶Ñ = refl
--       ax‚ÇÜ i j a b (app(t , t'))
--         rewrite ax‚ÇÜ i j a b t ‚¶É it ‚¶Ñ | ax‚ÇÜ i j a b t' ‚¶É it ‚¶Ñ = refl
--       ax‚Çá :
--         (i j : Nat)
--         (a b : ùî∏)
--         (t : X)
--         ‚¶É _ : i ‚â† j ‚¶Ñ
--         ‚¶É _ : a ‚â† b ‚¶Ñ
--         ‚Üí ---------------------------------------
--           opn i a (cls j b t) ‚â° cls j b (opn i a t)
--       ax‚Çá i j a b (var v)
--         rewrite oc‚Çá i j a b v ‚¶É it ‚¶Ñ ‚¶É it ‚¶Ñ = refl
--       ax‚Çá i j a b (lam t)
--         rewrite ax‚Çá (i +1) (j +1) a b t ‚¶É +1‚â† {i} it ‚¶Ñ ‚¶É it ‚¶Ñ = refl
--       ax‚Çá i j a b (app(t , t'))
--         rewrite ax‚Çá i j a b t ‚¶É it ‚¶Ñ ‚¶É it ‚¶Ñ
--         | ax‚Çá i j a b t' ‚¶É it ‚¶Ñ ‚¶É it ‚¶Ñ = refl
--       ax‚Çà :
--         (i j : Nat)
--         (a b : ùî∏)
--         (t : X)
--         ‚Üí -----------------------------------------------------------
--         opn i b (cls i a (opn j b t)) ‚â° opn j b (cls j a (opn i a t))
--       ax‚Çà i j a b (var v)
--         rewrite oc‚Çà i j a b v = refl
--       ax‚Çà i j a b (lam t)
--         rewrite ax‚Çà (i +1) (j +1) a b t = refl
--       ax‚Çà i j a b  (app(t , t'))
--         rewrite ax‚Çà i j a b t | ax‚Çà i j a b t' = refl
--       ax‚Çâ :
--         (i j : Nat)
--         (a b : ùî∏)
--         (t : X)
--         ‚Üí -----------------------------------------------------------
--         cls j a (opn i a (cls j b t)) ‚â° cls j b (opn i b (cls i a t))
--       ax‚Çâ i j a b (var v)
--         rewrite oc‚Çâ i j a b v = refl
--       ax‚Çâ i j a b (lam t)
--         rewrite ax‚Çâ (i +1) (j +1) a b t = refl
--       ax‚Çâ i j a b (app(t , t'))
--         rewrite ax‚Çâ i j a b t | ax‚Çâ i j a b t' = refl


--   -- Free variables deined inductively
--   fv : Lam ‚Üí Fset ùî∏
--   fv (bvar _)      = √ò
--   fv (fvar a)      = [ a ]
--   fv (lam t)       = fv t
--   fv (app(t , t')) = fv t ‚à™ fv t'

--   -- Freshness coincides with "not-a-free-variable-of"
--   -- (cf. Proposition 4.2)
--   fas‚ÇÅ :
--     (t : Lam)
--     (a : ùî∏)
--     (_ : a ‚àâ fv t)
--     ‚Üí ------------
--     a # t
--   fas‚ÇÅ (bvar i) a p = refl
--   fas‚ÇÅ (fvar b) a _          with  a ‚âê b
--   fas‚ÇÅ (fvar _) _ _          | neq _ = refl
--   fas‚ÇÅ (fvar b) _ (‚àâ[]‚¶É p ‚¶Ñ) | equ with () ‚Üê ¬¨‚â† b p
--   fas‚ÇÅ (lam t) a p = ap lam p'
--     where
--     p' : (1 <~ a)t ‚â° t
--     p' =
--       proof
--         (1 <~ a)t
--       [ ap (1 <~ a) (fas‚ÇÅ t a p) ]‚â°
--       (1 <~ a)((0 <~ a)t)
--       ‚â°[ oc‚ÇÇ 1 0 a t ]
--         (0 <~ a)t
--       ‚â°[ fas‚ÇÅ t a p ]
--         t
--       qed
--   fas‚ÇÅ (app(t , t')) a (‚àâ‚à™‚¶É p ‚¶Ñ‚¶É p' ‚¶Ñ)
--     rewrite fas‚ÇÅ t a p | fas‚ÇÅ t' a p' = refl

--   fas‚ÇÇ :
--     (t : Lam)
--     (a : ùî∏)
--     (_ : a # t)
--     ‚Üí ---------
--     a ‚àâ fv t
--   fas‚ÇÇ (bvar _) _ _ = ‚àâ√ò
--   fas‚ÇÇ (fvar b) a p  with a ‚âê b in eq
--   fas‚ÇÇ (fvar b) a _  | neq f = ‚àâ[] {x = a} {b} ‚¶É dec-neq a b f ‚¶Ñ
--   fas‚ÇÇ (fvar _) _ () | equ
--   fas‚ÇÇ (lam t) a p = fas‚ÇÇ t a p'
--     where
--     p' : (0 <~ a)t ‚â° t
--     p' =
--       proof
--         (0 <~ a)t
--       [ ap (0 <~ a) (lam-inj p) ]‚â°
--         (0 <~ a)((1 <~ a)t)
--       ‚â°[ oc‚ÇÇ 0 1 a t ]
--         (1 <~ a)t
--       ‚â°[ lam-inj p ]
--         t
--       qed
--   fas‚ÇÇ (app(t , t')) a p = ‚àâ‚à™ {xs = fv t} {fv t'}
--     ‚¶É fas‚ÇÇ t  a (œÄ‚ÇÅ (app-inj p)) ‚¶Ñ
--     ‚¶É fas‚ÇÇ t' a (œÄ‚ÇÇ (app-inj p)) ‚¶Ñ

--   -- Inductive closed-at-level predicate
--   data lc-at : Nat ‚Üí Lam ‚Üí Type where
--     lc-at-bvar :
--       {i j : Nat}
--       ‚¶É _ : j < i ‚¶Ñ
--       ‚Üí --------------
--       lc-at i (bvar j)
--     lc-at-fvar :
--       {i : Nat}
--       {a : ùî∏}
--       ‚Üí -------------
--       lc-at i (fvar a)
--     lc-at-lam :
--       {i : Nat}
--       {t : Lam}
--       (_ : lc-at (i +1) t)
--       ‚Üí ------------------
--       lc-at i (lam t)
--     lc-at-app :
--       {i : Nat}
--       {t t' : Lam}
--       (_ : lc-at i t)
--       (_ : lc-at i t')
--       ‚Üí -------------------
--       lc-at i (app(t , t'))

--   -- Local closedness coincides with closed-at-level
--   -- (cf. Proposition 4.3)
--   fis‚ÇÅ :
--     (i : Nat)
--     (t : Lam)
--     (p : lc-at i t)
--     ‚Üí -------------
--     i ‚âª t
--   fis‚ÇÅ i (bvar j) lc-at-bvar k
--     rewrite <‚Üí‚â† j k (<‚â§ it it) = (new √ò , refl)
--   fis‚ÇÅ _ (fvar _) lc-at-fvar _ = (new √ò , refl)
--   fis‚ÇÅ i (lam t) (lc-at-lam p) j  =
--     (new √ò , ap lam (‚âª3 {a = new √ò} (fis‚ÇÅ (i +1) t p) (+1‚â§ it)))
--   fis‚ÇÅ i (app (t , t')) (lc-at-app p p') j
--     with e ‚Üê ‚âª3 {a = new √ò} (fis‚ÇÅ i t p) it
--     | e' ‚Üê ‚âª3 {a = new √ò} (fis‚ÇÅ i t' p') it
--     = (new √ò , ap‚ÇÇ (Œª x y ‚Üí app (x , y)) e e')

--   fis‚ÇÇ :
--     (i : Nat)
--     (t : Lam)
--     (p : i ‚âª t)
--     ‚Üí ---------
--     lc-at i t
--   fis‚ÇÇ i (bvar j) p = lc-at-bvar‚¶É trich' ¬¨i‚â§j ‚¶Ñ
--     where
--     ¬¨i‚â§j : ¬¨ (i ‚â§ j)
--     ¬¨i‚â§j i‚â§j
--       with (_ , q) ‚Üê p j ‚¶É i‚â§j ‚¶Ñ
--       rewrite dec-equ j
--       with () ‚Üê q
--   fis‚ÇÇ _ (fvar _) _ = lc-at-fvar
--   fis‚ÇÇ i (lam t) p = lc-at-lam (fis‚ÇÇ (i +1) t i+1‚âªt)
--     where
--     i+1‚âªt : i +1 ‚âª t
--     i+1‚âªt _ ‚¶É +1‚â§ ev ‚¶Ñ
--       with (a , e) ‚Üê  p _  ‚¶É ev ‚¶Ñ = (a , lam-inj e)
--   fis‚ÇÇ i (app(t , t')) p = lc-at-app (fis‚ÇÇ i t i‚âªt) (fis‚ÇÇ i t' i‚âªt')
--     where
--     i‚âªt : i ‚âª t
--     i‚âªt j ‚¶É q ‚¶Ñ with (a , e) ‚Üê p j ‚¶É q ‚¶Ñ = (a , œÄ‚ÇÅ (app-inj e))
--     i‚âªt' : i ‚âª t'
--     i‚âªt' j ‚¶É q ‚¶Ñ with (a , e) ‚Üê p j ‚¶É q ‚¶Ñ = (a , œÄ‚ÇÇ (app-inj e))

--   -- Boundvariables are not locally closed
--   ¬¨0‚âªbvar : ‚àÄ i ‚Üí ¬¨(0 ‚âª bvar i)
--   ¬¨0‚âªbvar i p with fis‚ÇÇ 0 (bvar i) p
--   ... | lc-at-bvar ‚¶É q ‚¶Ñ with () ‚Üê q

--   -- Free variables are locally closed
--   0‚âªfvar : ‚àÄ a ‚Üí 0 ‚âª fvar a
--   0‚âªfvar a = fis‚ÇÅ 0 (fvar a) lc-at-fvar

--   -- Local closure of lambda abstractions
--   0‚âªlam : ‚àÄ t ‚Üí 1 ‚âª t ‚Üí 0 ‚âª lam t
--   0‚âªlam t p = fis‚ÇÅ 0 (lam t) (lc-at-lam (fis‚ÇÇ 1 t p))

--   0‚âªlam' : ‚àÄ t ‚Üí 0 ‚âª lam t ‚Üí 1 ‚âª t
--   0‚âªlam' t p with fis‚ÇÇ 0 (lam t) p
--   ... | lc-at-lam q = fis‚ÇÅ 1 t q

--   -- Local closure for application terms
--   0‚âªapp : ‚àÄ t t' ‚Üí 0 ‚âª t ‚Üí 0 ‚âª t' ‚Üí 0 ‚âª app(t , t')
--   0‚âªapp t t' p p' =
--     fis‚ÇÅ 0 (app(t , t')) (lc-at-app (fis‚ÇÇ 0 t p) (fis‚ÇÇ 0 t' p'))
--   0‚âªapp' : ‚àÄ t t' ‚Üí 0 ‚âª app(t , t') ‚Üí (0 ‚âª t) √ó (0 ‚âª t')
--   0‚âªapp' t t' p with fis‚ÇÇ 0 (app(t , t')) p
--   ... | lc-at-app q q' = (fis‚ÇÅ 0 t q , fis‚ÇÅ 0 t' q')


--   -- Lam is a locally nameless set
--   instance
--     lnsLam : lns Lam
--     ocSet ‚¶É lnsLam ‚¶Ñ = ocLam
--     asupp ‚¶É lnsLam ‚¶Ñ t = –òi (fv t) Œª a ‚¶É p ‚¶Ñ ‚Üí fas‚ÇÅ t a p
--     isupp ‚¶É lnsLam ‚¶Ñ t = (lv t , lv‚âª t)
--       where
--       lv : Lam ‚Üí Nat
--       lv (bvar i)    = i +1
--       lv (fvar _)    = 0
--       lv (lam t)    = lv t
--       lv (app(t , t')) = max (lv t) (lv t')

--       lv‚âª : (t : Lam) ‚Üí lv t ‚âª t
--       lv‚âª (bvar i) = fis‚ÇÅ (i +1) (bvar i) (lc-at-bvar‚¶É ‚â§refl ‚¶Ñ)
--       lv‚âª (fvar a) = fis‚ÇÅ 0 (fvar a) lc-at-fvar
--       lv‚âª (lam t) j with (a , e) ‚Üê lv‚âª t (j +1) ‚¶É ‚â§+1 it ‚¶Ñ = (a , ap lam e)
--       lv‚âª (app(t , t')) j
--         with (a , e) ‚Üê lv‚âª t j ‚¶É ‚â§trans ‚â§max‚ÇÅ it ‚¶Ñ
--         | (a' , e') ‚Üê lv‚âª t' j ‚¶É ‚â§trans ‚â§max‚ÇÇ it ‚¶Ñ =
--         (a , ap‚ÇÇ (Œª x y ‚Üí app (x , y)) e (‚âª2 {b = a} e'))

-- ----------------------------------------------------------------------
-- -- Properties of open/close operations wrt freshness [Lemma 2.12]
-- ----------------------------------------------------------------------
-- module _
--   {X : Type}
--   ‚¶É _ : oc X ‚¶Ñ
--   {i : Nat}
--   {a : ùî∏}
--   {A : Fset ùî∏}
--   {x : X}
--   (f : A atom-supports x)
--   where
--   ~>atom-supports : A ‚à™ [ a ] atom-supports (i ~> a)x
--   ~>atom-supports b (‚àâ‚à™‚¶É _ ‚¶Ñ‚¶É ‚àâ[] ‚¶Ñ) =
--     #1 {i = i +1}{0}
--     (proof
--        ((i +1) <~ b) ((i ~> a) x)
--      [ oc‚Çá i (i +1) a b x ‚¶É  ‚â†+1 i ‚¶Ñ ‚¶É symm‚â† b a it ‚¶Ñ ]‚â°
--        (i ~> a) ((i +1 <~ b)x)
--      ‚â°[ ap (i ~> a) (#1 {j = i +1} (f b it)) ]
--        (i ~> a) x
--      qed)

--   <~atom-supports : A -[ a ] atom-supports (i <~ a)x
--   <~atom-supports b p with b ‚âê a
--   ... | neq g =
--     proof
--       (0 <~ b) ((i <~ a) x)
--     ‚â°[ oc‚ÇÜ 0 i b a x ‚¶É ¬¨‚â°‚Üí‚â† g ‚¶Ñ ]
--       (i <~ a) ((0 <~ b)x)
--     ‚â°[ ap (i <~ a) (f b (‚àâ-[] p (¬¨‚â°‚Üí‚â† g))) ]
--       (i <~ a) x
--     qed
--   ... | equ = oc‚ÇÇ 0 i b x

-- #<~ :
--   {X : Type}
--   ‚¶É _ : oc X ‚¶Ñ
--   (i : Nat)
--   (a b : ùî∏)
--   (x : X)
--   ‚¶É _ : a # x ‚¶Ñ
--   ‚Üí -----------
--   a # (i <~ b)x
-- #<~ i a b x with a ‚âê b
-- ... | equ = oc‚ÇÇ _ _ _ _
-- ... | neq f =
--   proof
--     (0 <~ a) ((i <~ b) x)
--   ‚â°[ oc‚ÇÜ _ _ _ _ _ ‚¶É ¬¨‚â°‚Üí‚â† f ‚¶Ñ ]
--     (i <~ b) ((0 <~ a) x)
--   ‚â°[ ap (i <~ b) (#2 it) ]
--     (i <~ b)x
--   qed

-- #~> :
--   {X : Type}
--   ‚¶É _ : oc X ‚¶Ñ
--   (i : Nat)
--   (a b : ùî∏)
--   (x : X)
--   ‚¶É _ : a # x ‚¶Ñ
--   ‚¶É _ : a ‚â† b ‚¶Ñ
--   ‚Üí -----------
--   a # (i ~> b)x
-- #~> i a b x = #3 {i = i +1}
--   (proof
--      (i +1 <~ a)((i ~> b)x)
--    [ oc‚Çá _ _ _ _ _ ‚¶É ‚â†+1 i ‚¶Ñ‚¶É symm‚â† a b it ‚¶Ñ ]‚â°
--      (i ~> b)((i +1 <~ a)x)
--    ‚â°[ ap (i ~> b) (#2 it) ]
--      (i ~> b)x
--    qed)

-- ----------------------------------------------------------------------
-- -- Properties of open/close operations wrt local closure [Lemma 2.13]
-- ----------------------------------------------------------------------
-- module _
--   {X : Type}
--   ‚¶É _ : oc X ‚¶Ñ
--   {i : Nat}
--   {a : ùî∏}
--   {x : X}
--   where
--   ~>index-supports : -- Equation (10)
--     {j : Nat}
--     (_ : j ‚âª x)
--     ‚Üí -----------
--     j ‚âª (i ~> a)x
--   ~>index-supports p k with k ‚âê i
--   ... | neq f = (a ,
--     (proof
--        (k ~> a)((i ~> a) x)
--      ‚â°[ oc‚ÇÖ _ _ _ _ _ ‚¶É ¬¨‚â°‚Üí‚â† f ‚¶Ñ ]
--        (i ~> a)((k ~> a) x)
--      ‚â°[ ap (i ~> a) (‚âª3 p it) ]
--        (i ~> a) x
--      qed))
--   ... | equ = (a , oc‚ÇÅ _ _ _ _)

--   ~>index-supports' : -- Equation (11)
--     i +1 ‚âª x ‚Üí i ‚âª (i ~> a) x
--   ~>index-supports' p j with j ‚âê i
--   ... | neq f = (a ,
--     (proof
--        (j ~> a)((i ~> a) x)
--      ‚â°[ oc‚ÇÖ _ _ _ _ _ ‚¶É ¬¨‚â°‚Üí‚â† f ‚¶Ñ  ]
--        (i ~> a) ((j ~> a) x)
--      ‚â°[ ap (i ~> a) (‚âª3 p (‚â§‚â† it (symm‚â† j i (¬¨‚â°‚Üí‚â† f)))) ]
--        (i ~> a) x
--      qed))
--   ... | equ = (a , oc‚ÇÅ _ _ _ _)

--   <~index-supports : -- Equation (12)
--     {j : Nat}
--     (_ : j ‚âª x)
--     ‚Üí ------------------------
--     max j (i +1) ‚âª (i <~ a) x
--   <~index-supports p k with (b , ‚àâ[]) ‚Üê fresh{ùî∏} [ a ] =
--     (b ,
--       (proof
--         (k ~> b)((i <~ a) x)
--       ‚â°[ oc‚Çá _ _ _ _ _ ‚¶É +1‚â§‚Üí‚â† i k (‚â§trans ‚â§max‚ÇÇ it) ‚¶Ñ ]
--         (i <~ a)((k ~> b) x)
--       ‚â°[ ap (i <~ a) (‚âª3 p (‚â§trans ‚â§max‚ÇÅ it)) ]
--         (i <~ a) x
--       qed))
