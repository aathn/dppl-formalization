--------------------------------------------------------------
-- This file was adapted from the code accompanying the paper
--
-- Andrew M. Pitts, "Locally Nameless Sets", POPL 2023
--
-- (¬© 2023 Andrew Pitts, University of Cambridge)
--
-- https://amp12.github.io/LocallyNamelessSets/
--------------------------------------------------------------

module Lib.LocallyNameless.Support where

open import Lib.Prelude
open import Lib.Dec
open import Lib.Finset
open import Lib.LocallyNameless.Unfinite
open import Lib.LocallyNameless.oc-Sets
open import Lib.LocallyNameless.Freshness
open import Lib.LocallyNameless.LocalClosedness

open import Data.Nat.Base using (suc-inj)
open import Data.Nat.Order using (<-not-equal ; <-from-not-‚â§ ; <-from-‚â§)

open FinsetSyntax
open NatOrd

----------------------------------------------------------------------
-- Locally nameless sets [Definition 2.9]
----------------------------------------------------------------------
record lns (X : Type) : Type where
  constructor mklns
  field
    ‚¶É ocSet ‚¶Ñ : oc X
    asupp : (x : X) ‚Üí –ò[ a ‚àà ùî∏ ] a # x
    isupp : (x : X) ‚Üí Œ£[ i ‚àà Nat ] (i ‚âª x)

open lns ‚¶É ... ‚¶Ñ public

infix 4 _atom-supports_
_atom-supports_ :
  {X : Type}
  ‚¶É _ : oc X ‚¶Ñ
  (A : Finset ùî∏)
  (x : X)
  ‚Üí ----------
  Type
A atom-supports x = ‚àÄ a ‚Üí a ‚àâ A ‚Üí a # x

----------------------------------------------------------------------
-- Locally nameless set of indices and atoms [Example 2.10]
----------------------------------------------------------------------
lnsNatùî∏ : lns Natùî∏
ocSet ‚¶É lnsNatùî∏ ‚¶Ñ = ocNatùî∏
asupp ‚¶É lnsNatùî∏ ‚¶Ñ (inl i) = –òi √ò Œª _ ‚Üí refl
asupp ‚¶É lnsNatùî∏ ‚¶Ñ (inr a) = –òi [ a ] –∏‚ÇÇ
  where
  –∏‚ÇÇ : (b : ùî∏)‚¶É _ : b ‚àâ [ a ] ‚¶Ñ ‚Üí b # inr a
  –∏‚ÇÇ b ‚¶É p ‚¶Ñ = if·µà-no (b ‚â°? a) (‚àâ‚à∑‚ÇÅ auto)
isupp ‚¶É lnsNatùî∏ ‚¶Ñ (inl i) = (suc i , s‚ÇÇ)
  where
  s‚ÇÇ : suc i ‚âª inl i
  s‚ÇÇ j ‚¶É p ‚¶Ñ = new √ò , if·µà-‚â† (<-not-equal p ‚àò sym)
isupp ‚¶É lnsNatùî∏ ‚¶Ñ (inr a) = (0 , Œª _ ‚Üí (a , refl))

----------------------------------------------------------------------
-- Lambda terms [Example 2.11]
----------------------------------------------------------------------
module LambdaTerm where
  data Lam : Type where
    var : Natùî∏ ‚Üí Lam
    lam : Lam ‚Üí Lam
    app : Lam √ó Lam ‚Üí Lam

  pattern bvar i = var (inl i)
  pattern fvar a = var (inr a)

  lam-inj : ‚àÄ{t t'} ‚Üí lam t ‚â° lam t' ‚Üí t ‚â° t'
  lam-inj {t} p = ap f p where
    f = Œª {(lam t) ‚Üí t ; _ ‚Üí t}

  app-inj :
    {t‚ÇÅ t‚ÇÇ t‚ÇÅ' t‚ÇÇ' : Lam}
    (_ : app(t‚ÇÅ , t‚ÇÇ) ‚â° app(t‚ÇÅ' , t‚ÇÇ'))
    ‚Üí ---------------------------------
    (t‚ÇÅ ‚â° t‚ÇÅ') √ó (t‚ÇÇ ‚â° t‚ÇÇ')
  app-inj {t‚ÇÅ} p = ap f‚ÇÅ p , ap f‚ÇÇ p where
    f‚ÇÅ = Œª {(app(t‚ÇÅ , _)) ‚Üí t‚ÇÅ ; _ ‚Üí t‚ÇÅ}
    f‚ÇÇ = Œª {(app(_ , t‚ÇÇ)) ‚Üí t‚ÇÇ ; _ ‚Üí t‚ÇÅ}

  bvar‚â†fvar : ‚àÄ{i a} ‚Üí ¬¨ bvar i ‚â° fvar a
  bvar‚â†fvar p = subst distinguish p tt where
    distinguish : Lam ‚Üí Type
    distinguish (bvar _) = ‚ä§
    distinguish (fvar _) = ‚ä•
    distinguish _ = ‚ä§

  -- Lam is an oc-set
  instance
    ocLam : oc Lam
    ocLam = mkoc opn cls ax‚ÇÅ ax‚ÇÇ ax‚ÇÉ ax‚ÇÑ ax‚ÇÖ ax‚ÇÜ ax‚Çá ax‚Çà ax‚Çâ
      where
      X = Lam
      opn : Nat ‚Üí ùî∏ ‚Üí X ‚Üí X
      opn i a (var v)   = var ((i ~> a) v)
      opn i a (lam t) = lam(opn (suc i) a t)
      opn i a (app(t , t')) = app(opn i a t , opn i a t')
      cls : Nat ‚Üí ùî∏ ‚Üí X ‚Üí X
      cls i a (var v)   = var ((i <~ a) v)
      cls i a (lam t) = lam(cls (suc i) a t)
      cls i a (app(t , t')) = app(cls i a t , cls i a t')
      ax‚ÇÅ :
        (i : Nat)
        (a b : ùî∏)
        (t : X)
        ‚Üí -----------------------------
        opn i a (opn i b t) ‚â° opn i b t
      ax‚ÇÅ i a b (var v) = ap var (oc‚ÇÅ i a b v)
      ax‚ÇÅ i a b (lam t) = ap lam (ax‚ÇÅ (suc i) a b t)
      ax‚ÇÅ i a b (app(t , t')) =
        ap app $ ap‚ÇÇ _,_ (ax‚ÇÅ i a b t) (ax‚ÇÅ i a b t')
      ax‚ÇÇ :
        (i j : Nat)
        (a : ùî∏)
        (t : X)
        ‚Üí -----------------------------
        cls i a (cls j a t) ‚â° cls j a t
      ax‚ÇÇ i j a (var v) = ap var (oc‚ÇÇ i j a v)
      ax‚ÇÇ i j a (lam t) = ap lam (ax‚ÇÇ (suc i) (suc j) a t)
      ax‚ÇÇ i j a (app(t , t')) =
        ap app $ ap‚ÇÇ _,_ (ax‚ÇÇ i j a t) (ax‚ÇÇ i j a t')
      ax‚ÇÉ :
        (i : Nat)
        (a : ùî∏)
        (t : X)
        ‚Üí -----------------------------
        cls i a (opn i a t) ‚â° cls i a t
      ax‚ÇÉ i a (var v) = ap var (oc‚ÇÉ i a v)
      ax‚ÇÉ i a (lam t) = ap lam (ax‚ÇÉ (suc i) a t)
      ax‚ÇÉ i a (app(t , t')) =
        ap app $ ap‚ÇÇ _,_ (ax‚ÇÉ i a t) (ax‚ÇÉ i a t')
      ax‚ÇÑ :
        (i : Nat)
        (a : ùî∏)
        (t : X)
        ‚Üí -----------------------------
          opn i a (cls i a t) ‚â° opn i a t
      ax‚ÇÑ i a (var v) = ap var (oc‚ÇÑ i a v)
      ax‚ÇÑ i a (lam t) = ap lam (ax‚ÇÑ (suc i) a t)
      ax‚ÇÑ i a (app(t , t')) =
        ap app $ ap‚ÇÇ _,_ (ax‚ÇÑ i a t) (ax‚ÇÑ i a t')
      ax‚ÇÖ :
        (i j : Nat)
        (a b : ùî∏)
        (t : X)
        ‚¶É _ : i ‚â† j ‚¶Ñ
        ‚Üí ---------------------------------------
        opn i a (opn j b t) ‚â° opn j b (opn i a t)
      ax‚ÇÖ i j a b (var v) = ap var (oc‚ÇÖ i j a b v)
      ax‚ÇÖ i j a b (lam t) =
        ap lam (ax‚ÇÖ (suc i) (suc j) a b t ‚¶É inj‚â† suc-inj auto ‚¶Ñ)
      ax‚ÇÖ i j a b  (app(t , t')) =
        ap app $ ap‚ÇÇ _,_ (ax‚ÇÖ i j a b t) (ax‚ÇÖ i j a b t')
      ax‚ÇÜ :
        (i j : Nat)
        (a b : ùî∏)
        (t : X)
          ‚¶É _ : a ‚â† b ‚¶Ñ
        ‚Üí ---------------------------------------
        cls i a (cls j b t) ‚â° cls j b (cls i a t)
      ax‚ÇÜ i j a b (var v) = ap var (oc‚ÇÜ i j a b v)
      ax‚ÇÜ i j a b (lam t) = ap lam (ax‚ÇÜ (suc i) (suc j) a b t)
      ax‚ÇÜ i j a b (app(t , t')) =
        ap app $ ap‚ÇÇ _,_ (ax‚ÇÜ i j a b t) (ax‚ÇÜ i j a b t')
      ax‚Çá :
        (i j : Nat)
        (a b : ùî∏)
        (t : X)
        ‚¶É _ : i ‚â† j ‚¶Ñ
        ‚¶É _ : a ‚â† b ‚¶Ñ
        ‚Üí ---------------------------------------
          opn i a (cls j b t) ‚â° cls j b (opn i a t)
      ax‚Çá i j a b (var v) = ap var (oc‚Çá i j a b v)
      ax‚Çá i j a b (lam t) =
        ap lam (ax‚Çá (suc i) (suc j) a b t ‚¶É inj‚â† suc-inj auto ‚¶Ñ)
      ax‚Çá i j a b (app(t , t')) =
        ap app $ ap‚ÇÇ _,_ (ax‚Çá i j a b t) (ax‚Çá i j a b t')
      ax‚Çà :
        (i j : Nat)
        (a b : ùî∏)
        (t : X)
        ‚Üí -----------------------------------------------------------
        opn i b (cls i a (opn j b t)) ‚â° opn j b (cls j a (opn i a t))
      ax‚Çà i j a b (var v) = ap var (oc‚Çà i j a b v)
      ax‚Çà i j a b (lam t) = ap lam (ax‚Çà (suc i) (suc j) a b t)
      ax‚Çà i j a b (app(t , t')) =
        ap app $ ap‚ÇÇ _,_ (ax‚Çà i j a b t) (ax‚Çà i j a b t')
      ax‚Çâ :
        (i j : Nat)
        (a b : ùî∏)
        (t : X)
        ‚Üí -----------------------------------------------------------
        cls j a (opn i a (cls j b t)) ‚â° cls j b (opn i b (cls i a t))
      ax‚Çâ i j a b (var v) = ap var (oc‚Çâ i j a b v)
      ax‚Çâ i j a b (lam t) = ap lam (ax‚Çâ (suc i) (suc j) a b t)
      ax‚Çâ i j a b (app(t , t')) =
        ap app $ ap‚ÇÇ _,_ (ax‚Çâ i j a b t) (ax‚Çâ i j a b t')


  -- Free variables defined inductively
  fv : Lam ‚Üí Finset ùî∏
  fv (bvar _)      = √ò
  fv (fvar a)      = [ a ]
  fv (lam t)       = fv t
  fv (app(t , t')) = fv t ‚à™ fv t'

  -- Freshness coincides with "not-a-free-variable-of"
  -- (cf. Proposition 4.2)
  fas‚ÇÅ :
    (t : Lam)
    (a : ùî∏)
    (_ : a ‚àâ fv t)
    ‚Üí ------------
    a # t
  fas‚ÇÅ (bvar i) a p = refl
  fas‚ÇÅ (fvar b) a _ with no _ ‚Üê a ‚â°? b = refl
  fas‚ÇÅ (lam t) a p = ap lam p'
    where
    p' : (1 <~ a)t ‚â° t
    p' =
      (1 <~ a)t           ‚â°Àò‚ü® ap (1 <~ a) (fas‚ÇÅ t a p) ‚ü©
      (1 <~ a)((0 <~ a)t) ‚â°‚ü® oc‚ÇÇ 1 0 a t ‚ü©
        (0 <~ a)t         ‚â°‚ü® fas‚ÇÅ t a p ‚ü©
        t                 ‚àé
  fas‚ÇÅ (app(t , t')) a p =
    ap app $ ap‚ÇÇ _,_ (fas‚ÇÅ t a (‚àâ‚à™‚ÇÅ p)) (fas‚ÇÅ t' a (‚àâ‚à™‚ÇÇ (fv t) p))

  fas‚ÇÇ :
    (t : Lam)
    (a : ùî∏)
    (_ : a # t)
    ‚Üí ---------
    a ‚àâ fv t
  fas‚ÇÇ (bvar _) _ _ = tt
  fas‚ÇÇ (fvar b) a p with a ‚â°? b
  fas‚ÇÇ (fvar b) _ p  | no _  = tt
  fas‚ÇÇ (fvar b) _ p  | yes _ = bvar‚â†fvar p
  fas‚ÇÇ (lam t) a p = fas‚ÇÇ t a p'
    where
    p' : (0 <~ a)t ‚â° t
    p' =
      (0 <~ a)t           ‚â°Àò‚ü® ap (0 <~ a) (lam-inj p) ‚ü©
      (0 <~ a)((1 <~ a)t) ‚â°‚ü® oc‚ÇÇ 0 1 a t ‚ü©
      (1 <~ a)t           ‚â°‚ü® lam-inj p ‚ü©
      t                   ‚àé
  fas‚ÇÇ (app(t , t')) a p =
    ‚àâ‚à™ (fas‚ÇÇ t  a (fst (app-inj p))) (fas‚ÇÇ t' a (snd (app-inj p)))

  -- Inductive closed-at-level predicate
  data lc-at : Nat ‚Üí Lam ‚Üí Type where
    lc-at-bvar :
      {i j : Nat}
      ‚¶É _ : j < i ‚¶Ñ
      ‚Üí --------------
      lc-at i (bvar j)
    lc-at-fvar :
      {i : Nat}
      {a : ùî∏}
      ‚Üí -------------
      lc-at i (fvar a)
    lc-at-lam :
      {i : Nat}
      {t : Lam}
      (_ : lc-at (suc i) t)
      ‚Üí ------------------
      lc-at i (lam t)
    lc-at-app :
      {i : Nat}
      {t t' : Lam}
      (_ : lc-at i t)
      (_ : lc-at i t')
      ‚Üí -------------------
      lc-at i (app(t , t'))

  -- Local closedness coincides with closed-at-level
  -- (cf. Proposition 4.3)
  fis‚ÇÅ :
    (i : Nat)
    (t : Lam)
    (p : lc-at i t)
    ‚Üí -------------
    i ‚âª t
  fis‚ÇÅ i (bvar j) lc-at-bvar k =
    (new √ò , ap var (if·µà-‚â† (<-not-equal (‚â§-trans {y = i} auto auto) ‚àò sym)))
  fis‚ÇÅ _ (fvar _) lc-at-fvar _ = (new √ò , refl)
  fis‚ÇÅ i (lam t) (lc-at-lam p) j  =
    (new √ò , ap lam (‚âª3 {a = new √ò} (fis‚ÇÅ (suc i) t p) auto))
  fis‚ÇÅ i (app (t , t')) (lc-at-app p p') j
    with e ‚Üê ‚âª3 {a = new √ò} (fis‚ÇÅ i t p) auto
    | e' ‚Üê ‚âª3 {a = new √ò} (fis‚ÇÅ i t' p') auto
    = (new √ò , ap app (ap‚ÇÇ _,_ e e'))

  fis‚ÇÇ :
    (i : Nat)
    (t : Lam)
    (p : i ‚âª t)
    ‚Üí ---------
    lc-at i t
  fis‚ÇÇ i (bvar j) p = lc-at-bvar ‚¶É <-from-not-‚â§ _ _ ¬¨i‚â§j ‚¶Ñ
    where
    ¬¨i‚â§j : ¬¨ (i ‚â§ j)
    ¬¨i‚â§j i‚â§j with (_ , q) ‚Üê p j ‚¶É i‚â§j ‚¶Ñ =
      bvar‚â†fvar (sym q ‚àô ap var (if·µà-‚â° (refl {x = j})))
  fis‚ÇÇ _ (fvar _) _ = lc-at-fvar
  fis‚ÇÇ i (lam t) p = lc-at-lam (fis‚ÇÇ (suc i) t i+1‚âªt)
    where
    i+1‚âªt : suc i ‚âª t
    i+1‚âªt _ ‚¶É s‚â§s q ‚¶Ñ with (a , e) ‚Üê p _ ‚¶É q ‚¶Ñ = (a , lam-inj e)
  fis‚ÇÇ i (app(t , t')) p = lc-at-app (fis‚ÇÇ i t i‚âªt) (fis‚ÇÇ i t' i‚âªt')
    where
    i‚âªt : i ‚âª t
    i‚âªt j with (a , e) ‚Üê p j = (a , fst (app-inj e))
    i‚âªt' : i ‚âª t'
    i‚âªt' j with (a , e) ‚Üê p j = (a , snd (app-inj e))

  -- Bound variables are not locally closed
  ¬¨0‚âªbvar : ‚àÄ i ‚Üí ¬¨(0 ‚âª bvar i)
  ¬¨0‚âªbvar i p with fis‚ÇÇ 0 (bvar i) p
  ... | lc-at-bvar ‚¶É () ‚¶Ñ

  -- Free variables are locally closed
  0‚âªfvar : ‚àÄ a ‚Üí 0 ‚âª fvar a
  0‚âªfvar a = fis‚ÇÅ 0 (fvar a) lc-at-fvar

  -- Local closure of lambda abstractions
  0‚âªlam : ‚àÄ t ‚Üí 1 ‚âª t ‚Üí 0 ‚âª lam t
  0‚âªlam t p = fis‚ÇÅ 0 (lam t) (lc-at-lam (fis‚ÇÇ 1 t p))

  0‚âªlam' : ‚àÄ t ‚Üí 0 ‚âª lam t ‚Üí 1 ‚âª t
  0‚âªlam' t p with fis‚ÇÇ 0 (lam t) p
  ... | lc-at-lam q = fis‚ÇÅ 1 t q

  -- Local closure for application terms
  0‚âªapp : ‚àÄ t t' ‚Üí 0 ‚âª t ‚Üí 0 ‚âª t' ‚Üí 0 ‚âª app(t , t')
  0‚âªapp t t' p p' =
    fis‚ÇÅ 0 (app(t , t')) (lc-at-app (fis‚ÇÇ 0 t p) (fis‚ÇÇ 0 t' p'))
  0‚âªapp' : ‚àÄ t t' ‚Üí 0 ‚âª app(t , t') ‚Üí (0 ‚âª t) √ó (0 ‚âª t')
  0‚âªapp' t t' p with fis‚ÇÇ 0 (app(t , t')) p
  ... | lc-at-app q q' = (fis‚ÇÅ 0 t q , fis‚ÇÅ 0 t' q')


  -- Lam is a locally nameless set
  instance
    lnsLam : lns Lam
    ocSet ‚¶É lnsLam ‚¶Ñ = ocLam
    asupp ‚¶É lnsLam ‚¶Ñ t = –òi (fv t) Œª a ‚¶É p ‚¶Ñ ‚Üí fas‚ÇÅ t a p
    isupp ‚¶É lnsLam ‚¶Ñ t = (lv t , lv‚âª t)
      where
      lv : Lam ‚Üí Nat
      lv (bvar i)    = suc i
      lv (fvar _)    = 0
      lv (lam t)    = lv t
      lv (app(t , t')) = max (lv t) (lv t')

      lv‚âª : (t : Lam) ‚Üí lv t ‚âª t
      lv‚âª (bvar i) = fis‚ÇÅ (suc i) (bvar i) (lc-at-bvar ‚¶É ‚â§-refl ‚¶Ñ)
      lv‚âª (fvar a) = fis‚ÇÅ 0 (fvar a) lc-at-fvar
      lv‚âª (lam t) j with (a , e) ‚Üê lv‚âª t (suc j) = (a , ap lam e)
      lv‚âª (app(t , t')) j
        with (a , e) ‚Üê lv‚âª t j ‚¶É ‚â§-trans (max-‚â§l _ _) auto ‚¶Ñ
        | (a' , e') ‚Üê lv‚âª t' j ‚¶É ‚â§-trans (max-‚â§r _ _) auto ‚¶Ñ =
        (a , ap‚ÇÇ (Œª x y ‚Üí app (x , y)) e (‚âª2 {b = a} e'))

----------------------------------------------------------------------
-- Properties of open/close operations wrt freshness [Lemma 2.12]
----------------------------------------------------------------------
module _
  {X : Type}
  ‚¶É _ : oc X ‚¶Ñ
  {i : Nat}
  {a : ùî∏}
  {A : Finset ùî∏}
  {x : X}
  (f : A atom-supports x)
  where
  ~>atom-supports : A ‚à™ [ a ] atom-supports (i ~> a)x
  ~>atom-supports b p =
    #1 {i = suc i}{0}
    ((suc i <~ b) ((i ~> a) x) ‚â°Àò‚ü® oc‚Çá i (suc i) a b x ‚¶É ¬¨‚â°‚Üí‚â† (<-not-equal auto) ‚¶Ñ ‚¶É sym‚â† b a (‚àâ‚à∑‚ÇÅ (‚àâ‚à™‚ÇÇ A p)) ‚¶Ñ ‚ü©
     (i ~> a) ((suc i <~ b)x)  ‚â°‚ü® ap (i ~> a) (#1 {j = suc i} (f b (‚àâ‚à™‚ÇÅ p))) ‚ü©
     (i ~> a) x                ‚àé)

  <~atom-supports : A -[ a ] atom-supports (i <~ a)x
  <~atom-supports b p with b ‚â°? a
  ... | no g =
    (0 <~ b) ((i <~ a) x) ‚â°‚ü® oc‚ÇÜ 0 i b a x ‚¶É ¬¨‚â°‚Üí‚â† g ‚¶Ñ ‚ü©
    (i <~ a) ((0 <~ b)x)  ‚â°‚ü® ap (i <~ a) (f b (minus-‚àâ p g)) ‚ü©
    (i <~ a) x            ‚àé
  ... | yes b‚â°a = ap (Œª b ‚Üí (0 <~ b)((i <~ a) x)) b‚â°a ‚àô oc‚ÇÇ 0 i a x

#<~ :
  {X : Type}
  ‚¶É _ : oc X ‚¶Ñ
  (i : Nat)
  (a b : ùî∏)
  (x : X)
  ‚¶É _ : a # x ‚¶Ñ
  ‚Üí -----------
  a # (i <~ b)x
#<~ i a b x with a ‚â°? b
... | yes a‚â°b = ap (Œª a ‚Üí (0 <~ a)((i <~ b) x)) a‚â°b ‚àô oc‚ÇÇ _ _ _ _
... | no f =
  (0 <~ a) ((i <~ b) x) ‚â°‚ü® oc‚ÇÜ _ _ _ _ _ ‚¶É ¬¨‚â°‚Üí‚â† f ‚¶Ñ ‚ü©
  (i <~ b) ((0 <~ a) x) ‚â°‚ü® ap (i <~ b) (#2 auto) ‚ü©
  (i <~ b)x             ‚àé

#~> :
  {X : Type}
  ‚¶É _ : oc X ‚¶Ñ
  (i : Nat)
  (a b : ùî∏)
  (x : X)
  ‚¶É _ : a # x ‚¶Ñ
  ‚¶É _ : a ‚â† b ‚¶Ñ
  ‚Üí -----------
  a # (i ~> b)x
#~> i a b x = #3 {i = suc i}
  ((suc i <~ a)((i ~> b)x) ‚â°Àò‚ü® oc‚Çá _ _ _ _ _ ‚¶É ¬¨‚â°‚Üí‚â† (<-not-equal auto) ‚¶Ñ ‚¶É sym‚â† a b auto ‚¶Ñ ‚ü©
   (i ~> b)((suc i <~ a)x) ‚â°‚ü® ap (i ~> b) (#2 auto) ‚ü©
   (i ~> b)x               ‚àé)

----------------------------------------------------------------------
-- Properties of open/close operations wrt local closure [Lemma 2.13]
----------------------------------------------------------------------
module _
  {X : Type}
  ‚¶É _ : oc X ‚¶Ñ
  {i : Nat}
  {a : ùî∏}
  {x : X}
  where
  ~>index-supports : -- Equation (10)
    {j : Nat}
    (_ : j ‚âª x)
    ‚Üí -----------
    j ‚âª (i ~> a)x
  ~>index-supports p k with k ‚â°? i
  ... | no f = (a ,
    ((k ~> a)((i ~> a) x) ‚â°‚ü® oc‚ÇÖ _ _ _ _ _ ‚¶É ¬¨‚â°‚Üí‚â† f ‚¶Ñ ‚ü©
     (i ~> a)((k ~> a) x) ‚â°‚ü® ap (i ~> a) (‚âª3 p auto) ‚ü©
     (i ~> a) x           ‚àé))
  ... | yes k‚â°i = (a , ap (Œª k ‚Üí (k ~> a)((i ~> a) x)) k‚â°i ‚àô oc‚ÇÅ _ _ _ _)

  ~>index-supports' : -- Equation (11)
    suc i ‚âª x ‚Üí i ‚âª (i ~> a) x
  ~>index-supports' p j with j ‚â°? i
  ... | no f = (a ,
    ((j ~> a)((i ~> a) x)  ‚â°‚ü® oc‚ÇÖ _ _ _ _ _ ‚¶É ¬¨‚â°‚Üí‚â† f ‚¶Ñ ‚ü©
     (i ~> a) ((j ~> a) x) ‚â°‚ü® ap (i ~> a) (‚âª3 p (<-from-‚â§ (f ‚àò sym) auto)) ‚ü©
     (i ~> a) x            ‚àé))
  ... | yes j‚â°i = (a , ap (Œª j ‚Üí (j ~> a)((i ~> a) x)) j‚â°i ‚àô oc‚ÇÅ _ _ _ _)

  <~index-supports : -- Equation (12)
    {j : Nat}
    (_ : j ‚âª x)
    ‚Üí ------------------------
    max j (suc i) ‚âª (i <~ a) x
  <~index-supports p k with (b , q) ‚Üê fresh{ùî∏} [ a ] =
    (b ,
      ((k ~> b)((i <~ a) x) ‚â°‚ü® oc‚Çá _ _ _ _ _ ‚¶É i‚â†k ‚¶Ñ ‚¶É ‚àâ‚à∑‚ÇÅ q ‚¶Ñ ‚ü©
       (i <~ a)((k ~> b) x) ‚â°‚ü® ap (i <~ a) (‚âª3 p (‚â§-trans (max-‚â§l _ _) auto)) ‚ü©
       (i <~ a) x           ‚àé))
    where i‚â†k = ¬¨‚â°‚Üí‚â† (<-not-equal (‚â§-trans (max-‚â§r _ _) auto) ‚àò sym)
