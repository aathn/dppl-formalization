--------------------------------------------------------------
-- This file was adapted from the code accompanying the paper
--
-- Andrew M. Pitts, "Locally Nameless Sets", POPL 2023
--
-- (¬© 2023 Andrew Pitts, University of Cambridge)
--
-- https://amp12.github.io/LocallyNamelessSets/
--------------------------------------------------------------

module Lib.LocallyNameless.Category where

open import Lib.Prelude
open import Lib.Finset
open import Lib.LocallyNameless.Unfinite
open import Lib.LocallyNameless.oc-Sets
open import Lib.LocallyNameless.Freshness
open import Lib.LocallyNameless.LocalClosedness
open import Lib.LocallyNameless.Support
open import Lib.LocallyNameless.AbstractionConcretion
open import Lib.LocallyNameless.RenamingReindexingSwapping

open FinsetSyntax
open NatOrd

----------------------------------------------------------------------
-- Morphisms of oc-sets [Equation (40)]
----------------------------------------------------------------------
record oc-hom
  {X Y : Type}
  ‚¶É _ : oc X ‚¶Ñ
  ‚¶É _ : oc Y ‚¶Ñ
  (f : X ‚Üí Y)
  : ----------
  Type
  where
  constructor mkoc-hom
  field
    oc-hom-open  : ‚àÄ{i a} x ‚Üí f((i ~> a)x) ‚â° (i ~> a)(f x)
    oc-hom-close : ‚àÄ{i a} x ‚Üí f((i <~ a)x) ‚â° (i <~ a)(f x)

open oc-hom ‚¶É ... ‚¶Ñ public

module _
  (X Y : Type)
  ‚¶É _ : oc X ‚¶Ñ
  ‚¶É _ : oc Y ‚¶Ñ
  (f : X ‚Üí Y)
  ‚¶É _ :  oc-hom f ‚¶Ñ
  where
  oc-hom-# : ‚àÄ a x ‚Üí a # x ‚Üí a # f x -- Equation (41)
  oc-hom-# a x a#x =
    (0 <~ a)(f x) ‚â°Àò‚ü® oc-hom-close x ‚ü©
    f((0 <~ a)x)  ‚â°‚ü® ap f a#x ‚ü©
    f x           ‚àé

  oc-hom-‚âª : ‚àÄ i x ‚Üí i ‚âª x ‚Üí i ‚âª f x -- Equation (42)
  oc-hom-‚âª  i x i‚âªx j with (a , e) ‚Üê i‚âªx j = (a ,
    ((j ~> a) (f x) ‚â°Àò‚ü® oc-hom-open x ‚ü©
     f((j ~> a)x)   ‚â°‚ü® ap f e ‚ü©
     f x            ‚àé))

----------------------------------------------------------------------
-- Morphisms of locally nameless sets [Section 3.2]
----------------------------------------------------------------------
record lns-hom
  {X Y : Type}
  ‚¶É _ : lns X ‚¶Ñ
  ‚¶É _ : lns Y ‚¶Ñ
  (f : X ‚Üí Y)
  : -----------
  Type
  where
  constructor mklns-hom
  field
    ‚¶É ochom ‚¶Ñ : oc-hom f

open lns-hom ‚¶É ... ‚¶Ñ public

----------------------------------------------------------------------
-- Cartesian product of locally nameless sets [Lemma 3.3]
----------------------------------------------------------------------
lns√ó : {X Y : Type}‚¶É _ : lns X ‚¶Ñ ‚¶É _ : lns Y ‚¶Ñ ‚Üí lns (X √ó Y)
ocSet ‚¶É lns√ó ‚¶Ñ = oc√ó
asupp ‚¶É lns√ó ‚¶Ñ (x , y) with –òi as f ‚Üê asupp x | –òi bs g ‚Üê asupp y =
  –òi (as ‚à™ bs) h
  where
  h :
    (c : ùî∏)
    ‚¶É _ : c ‚àâ (as ‚à™ bs) ‚¶Ñ
    ‚Üí -------------------------------
    ((0 <~ c)x , (0 <~ c)y) ‚â° (x , y)
  h c ‚¶É p ‚¶Ñ = ap‚ÇÇ _,_ (f c ‚¶É ‚àâ‚à™‚ÇÅ p ‚¶Ñ) (g c ‚¶É ‚àâ‚à™‚ÇÇ as p ‚¶Ñ)
isupp ‚¶É lns√ó ‚¶Ñ (x , y) with (i , p) ‚Üê isupp x | (j , q) ‚Üê isupp y =
  (max i j , h)
  where
  h :
    (k : Nat)
    ‚¶É _ : max i j ‚â§ k ‚¶Ñ
    ‚Üí -----------------------------------------
    Œ£[ c ‚àà ùî∏ ] ((k ~> c)x , (k ~> c)y) ‚â° (x , y)
  h k ‚¶É r ‚¶Ñ
    with (a , e) ‚Üê p k ‚¶É ‚â§-trans (max-‚â§l _ _) r ‚¶Ñ
    | (b , e') ‚Üê q k ‚¶É ‚â§-trans (max-‚â§r _ _) r ‚¶Ñ = (a , ee')
    where
    ee' : ((k ~> a)x , (k ~> a)y) ‚â° (x , y)
    ee' = ap‚ÇÇ _,_ e (‚âª2 e')

----------------------------------------------------------------------
-- Dependent product of locally nameless sets
----------------------------------------------------------------------
ocŒ£ :
  (X : Type)
  (Y : X ‚Üí Type)
  ‚¶É ocY : ‚àÄ{x} ‚Üí oc (Y x) ‚¶Ñ
  ‚Üí -----------------------
  oc (Œ£ X Y)
_~>_ ‚¶É ocŒ£ X Y ‚¶Ñ i a (x , y) = (x , (i ~> a)y)
_<~_ ‚¶É ocŒ£ X Y ‚¶Ñ i a (x , y) = (x , (i <~ a)y)
oc‚ÇÅ  ‚¶É ocŒ£ X Y ‚¶Ñ i a b (_ , y) = ap (_ ,_) (oc‚ÇÅ i a b y)
oc‚ÇÇ  ‚¶É ocŒ£ X Y ‚¶Ñ i j a (_ , y) = ap (_ ,_) (oc‚ÇÇ i j a y)
oc‚ÇÉ  ‚¶É ocŒ£ X Y ‚¶Ñ i a (_ , y) = ap (_ ,_) (oc‚ÇÉ i a y)
oc‚ÇÑ  ‚¶É ocŒ£ X Y ‚¶Ñ i a (_ , y) = ap (_ ,_) (oc‚ÇÑ i a y)
oc‚ÇÖ  ‚¶É ocŒ£ X Y ‚¶Ñ i j a b (_ , y) = ap (_ ,_) (oc‚ÇÖ i j a b y)
oc‚ÇÜ  ‚¶É ocŒ£ X Y ‚¶Ñ i j a b (_ , y) = ap (_ ,_) (oc‚ÇÜ i j a b y)
oc‚Çá  ‚¶É ocŒ£ X Y ‚¶Ñ i j a b (_ , y) = ap (_ ,_) (oc‚Çá i j a b y)
oc‚Çà  ‚¶É ocŒ£ X Y ‚¶Ñ  i j a b (_ , y) = ap (_ ,_) (oc‚Çà i j a b y)
oc‚Çâ  ‚¶É ocŒ£ X Y ‚¶Ñ i j a b (_ , y) = ap (_ ,_) (oc‚Çâ i j a b y)

lnsŒ£ :
  (X : Type)
  (Y : X ‚Üí Type)
  ‚¶É lnsY : ‚àÄ{x} ‚Üí lns (Y x) ‚¶Ñ
  ‚Üí -------------------------
  lns (Œ£ X Y)
ocSet ‚¶É lnsŒ£ X Y ‚¶É lnsY ‚¶Ñ ‚¶Ñ = ocŒ£ X Y ‚¶É Œª{x} ‚Üí ocSet ‚¶É lnsY {x} ‚¶Ñ ‚¶Ñ
asupp ‚¶É lnsŒ£ X Y ‚¶É lnsY ‚¶Ñ ‚¶Ñ (x , y) with –òi –∏‚ÇÅ –∏‚ÇÇ ‚Üê asupp y = –òi –∏‚ÇÅ –∏‚ÇÇ'
  where
  instance
    _ : oc (Y x)
    _ = ocSet ‚¶É lnsY {x} ‚¶Ñ
  –∏‚ÇÇ' :
    (a : ùî∏)
    ‚¶É _ : a ‚àâ –∏‚ÇÅ ‚¶Ñ
    ‚Üí ------------------------
    (x , (0 <~ a) y) ‚â° (x , y)
  –∏‚ÇÇ' a = ap (x ,_) (–∏‚ÇÇ a)
isupp ‚¶É lnsŒ£ X Y ‚¶É lnsY ‚¶Ñ ‚¶Ñ (x , y) with (i , f) ‚Üê isupp y = (i , g)
  where
  instance
    _ : oc (Y x)
    _ = ocSet ‚¶É lnsY {x} ‚¶Ñ
  g :
    (j : Nat)
    ‚¶É _ : i ‚â§ j ‚¶Ñ
    ‚Üí ----------------------------------
    Œ£[ a ‚àà ùî∏ ] (x , (j ~> a) y) ‚â° (x , y)
  g j with (a , p) ‚Üê f j = (a , ap (x ,_) p)
