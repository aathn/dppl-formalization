open import Lib.Reals
module Properties.Typing (R : Reals‚ÇÄ) where

-- Lemmas purely about typing

open import Syntax R
open import Typing R
open import Properties.Util

open import Lib.Prelude
open import Lib.Unfinite
open import Lib.oc-Sets
open import Lib.LocalClosedness
open import Lib.Freshness
open import Lib.FunExt
open import Lib.AbstractionConcretion hiding (abs)
open import Lib.BindingSignature
open import Lib.Substitution

open import Data.List using (_++_ ; map)
open import Data.List.Properties using (map-++ ; ++-conical ≥)
open import Data.List.Relation.Binary.Sublist.Propositional using (_‚äÜ_ ; [] ; _‚à∑_ ; _‚à∑ ≥_ ; ‚äÜ-reflexive ; lookup)
open import Data.List.Relation.Binary.Sublist.Propositional.Properties using (++‚Å∫ ; All-resp-‚äÜ)
open import Data.List.Relation.Binary.Pointwise as P using (Pointwise ; [] ; _‚à∑_)
open import Data.List.Relation.Unary.Any using (here ; there)
open import Data.List.Relation.Unary.Any.Properties using (++‚Å∫ ≥)
open import Data.List.Relation.Unary.All as A using (All ; [] ; _‚à∑_)
open import Data.List.Relation.Unary.AllPairs using ([] ; _‚à∑_)
open import Data.List.Membership.Propositional using () renaming (_‚àà_ to _‚ààÀ°_)
open import Data.List.Membership.Propositional.Properties using (‚àà-‚àÉ++)
open import Data.Nat.Properties using (m‚â§n‚áím‚äîn‚â°n)
open import Data.Product using (‚àÉ-syntax)
import Relation.Binary.PropositionalEquality as ‚â°

infixl 5 _&_
_&_ : TyEnv ‚Üí TyEnv ‚Üí TyEnv
Œì & Œì‚Ä≤ = Œì‚Ä≤ ++ Œì

sub-refl : ‚àÄ {T} ‚Üí T <: T
sub-refl {treal c} = sreal ‚â§refl
sub-refl {T ‚áí[ x ] T‚ÇÅ} = sarr sub-refl sub-refl ‚â§refl
sub-refl {ttup ts} = stup (Œª i ‚Üí sub-refl)
sub-refl {tdist T} = sdist sub-refl

sub-trans : ‚àÄ {T‚ÇÅ T‚ÇÇ T‚ÇÉ} ‚Üí T‚ÇÅ <: T‚ÇÇ ‚Üí T‚ÇÇ <: T‚ÇÉ ‚Üí T‚ÇÅ <: T‚ÇÉ
sub-trans (sreal H‚â§) (sreal H‚â§‚Ä≤) = sreal (‚â§trans H‚â§‚Ä≤ H‚â§)
sub-trans (stup Hsubs) (stup Hsubs‚Ä≤) = stup (Œª i ‚Üí sub-trans (Hsubs i) (Hsubs‚Ä≤ i))
sub-trans (sarr Hsub1 Hsub4 H‚â§) (sarr Hsub2 Hsub3 H‚â§‚Ä≤) =
  sarr (sub-trans Hsub2 Hsub1) (sub-trans Hsub4 Hsub3) (‚â§trans H‚â§ H‚â§‚Ä≤)
sub-trans (sdist Hsub1) (sdist Hsub2) = sdist (sub-trans Hsub1 Hsub2)

sub-‚äÜ
  : ‚àÄ {Œì‚ÇÅ Œì‚ÇÇ Œì‚ÇÅ‚Ä≤}
  ‚Üí Œì‚ÇÇ <:·¥± Œì‚ÇÅ
  ‚Üí Œì‚ÇÅ‚Ä≤ ‚äÜ Œì‚ÇÅ
  ‚Üí -------------------------------
    ‚àÉ[ Œì‚ÇÇ‚Ä≤ ] Œì‚ÇÇ‚Ä≤ <:·¥± Œì‚ÇÅ‚Ä≤ √ó Œì‚ÇÇ‚Ä≤ ‚äÜ Œì‚ÇÇ
sub-‚äÜ [] [] = [] , [] , []
sub-‚äÜ (Hsub ‚à∑ Hsubs) (y ‚à∑ ≥ H‚äÜ) =
  let Œì‚ÇÇ‚Ä≤ , Hsub‚Ä≤ , H‚äÜ‚Ä≤ = sub-‚äÜ Hsubs H‚äÜ
  in  Œì‚ÇÇ‚Ä≤ , Hsub‚Ä≤ , _ ‚à∑ ≥ H‚äÜ‚Ä≤
sub-‚äÜ (Hsub ‚à∑ Hsubs) (refl ‚à∑ H‚äÜ) =
  let Œì‚ÇÇ‚Ä≤ , Hsub‚Ä≤ , H‚äÜ‚Ä≤ = sub-‚äÜ Hsubs H‚äÜ
  in  _ :: Œì‚ÇÇ‚Ä≤ , Hsub ‚à∑ Hsub‚Ä≤ , refl ‚à∑ H‚äÜ‚Ä≤

sub-dom
  : ‚àÄ {Œì‚ÇÅ Œì‚ÇÇ}
  ‚Üí Œì‚ÇÅ <:·¥± Œì‚ÇÇ
  ‚Üí ---------------
    dom Œì‚ÇÅ ‚â° dom Œì‚ÇÇ
sub-dom [] = refl
sub-dom (x‚â°y ‚à∑ Hsub) = ap‚ÇÇ _‚à™_ (ap [_] $ œÄ‚ÇÅ x‚â°y) (sub-dom Hsub)

dom-distinct
  : ‚àÄ {Œì‚ÇÅ Œì‚ÇÇ}
  ‚Üí dom Œì‚ÇÅ ‚â° dom Œì‚ÇÇ
  ‚Üí -------------------------
    Distinct Œì‚ÇÅ ‚Üí Distinct Œì‚ÇÇ
dom-distinct {Œì‚ÇÇ = []} Hdom [] = []
dom-distinct {Œì‚ÇÇ = (y , T) :: Œì‚ÇÇ} Hdom (H‚àâ ‚à∑ Hd) with refl ‚Üê ‚à™inj‚ÇÅ Hdom =
  subst (y ‚àâ_) (‚à™inj‚ÇÇ Hdom) H‚àâ ‚à∑ dom-distinct (‚à™inj‚ÇÇ Hdom) Hd

‚â§·∂ú-<:-trans
  : ‚àÄ {c T‚ÇÅ T‚ÇÇ}
  ‚Üí c ‚â§·∂ú T‚ÇÅ
  ‚Üí T‚ÇÇ <: T‚ÇÅ
  ‚Üí --------
    c ‚â§·∂ú T‚ÇÇ
‚â§·∂ú-<:-trans H‚â§ (sreal H‚â§‚Ä≤) = ‚â§trans H‚â§ H‚â§‚Ä≤
‚â§·∂ú-<:-trans H‚â§ (stup Hsubs) i = ‚â§·∂ú-<:-trans (H‚â§ i) (Hsubs i)
‚â§·∂ú-<:-trans H‚â§ (sarr _ _ _) = tt
‚â§·∂ú-<:-trans H‚â§ (sdist _) = tt

‚â§·¥±-<:·¥±-trans
  : ‚àÄ {c Œì‚ÇÅ Œì‚ÇÇ}
  ‚Üí c ‚â§·¥± Œì‚ÇÅ
  ‚Üí Œì‚ÇÇ <:·¥± Œì‚ÇÅ
  ‚Üí ---------
    c ‚â§·¥± Œì‚ÇÇ
‚â§·¥±-<:·¥±-trans [] [] = []
‚â§·¥±-<:·¥±-trans (H‚â§ ‚à∑ H‚â§‚Ä≤) ((_ , Hsub) ‚à∑ Hsub‚Ä≤) =
  ‚â§·∂ú-<:-trans H‚â§ Hsub ‚à∑ ‚â§·¥±-<:·¥±-trans H‚â§‚Ä≤ Hsub‚Ä≤

sub-env
  : ‚àÄ {Œì‚ÇÅ Œì‚ÇÇ t e T}
  ‚Üí Œì‚ÇÅ ‚ä¢ t :[ e ] T
  ‚Üí Œì‚ÇÇ <:·¥± Œì‚ÇÅ
  ‚Üí ---------------
    Œì‚ÇÇ ‚ä¢ t :[ e ] T
sub-env tvar ((refl , Hsub) ‚à∑ []) = tsub tvar ‚â§refl Hsub
sub-env (tabs (–òi As Hcof)) Hsub =
  tabs $ –òi As Œª y ‚Üí sub-env (Hcof y) ((refl , sub-refl) ‚à∑ Hsub)
sub-env (tapp Htype Htype‚ÇÅ) Hsub =
  tapp (sub-env Htype Hsub) (sub-env Htype‚ÇÅ Hsub)
sub-env (tprim Hœï Htypes Hd) Hsub =
  tprim Hœï (Œª i ‚Üí sub-env (Htypes i) Hsub) (dom-distinct (symm $ sub-dom Hsub) Hd)
sub-env treal [] = treal
sub-env (ttup Htypes Hd) Hsub =
  ttup (Œª i ‚Üí sub-env (Htypes i) Hsub) (dom-distinct (symm $ sub-dom Hsub) Hd)
sub-env (tproj i Htype) Hsub = tproj i (sub-env Htype Hsub)
sub-env (tif Htype Htype‚ÇÅ Htype‚ÇÇ) Hsub =
  tif (sub-env Htype Hsub) (sub-env Htype‚ÇÅ Hsub) (sub-env Htype‚ÇÇ Hsub)
sub-env (tdiff Hc Htype Htype‚ÇÅ) Hsub =
  tdiff Hc (sub-env Htype Hsub) (sub-env Htype‚ÇÅ Hsub)
sub-env (tsolve Htype Htype‚ÇÅ Htype‚ÇÇ H‚â§) Hsub =
  tsolve (sub-env Htype Hsub) (sub-env Htype‚ÇÅ Hsub) (sub-env Htype‚ÇÇ Hsub) H‚â§
sub-env (tdist HD Htypes Hd) Hsub =
  tdist HD (Œª i ‚Üí sub-env (Htypes i) Hsub) (dom-distinct (symm $ sub-dom Hsub) Hd)
sub-env (tassume Htype) Hsub = tassume (sub-env Htype Hsub)
sub-env (tweight Htype) Hsub = tweight (sub-env Htype Hsub)
sub-env (texpect Htype) Hsub = texpect (sub-env Htype Hsub)
sub-env (tinfer Htype H‚â§) Hsub  = tinfer (sub-env Htype Hsub) (‚â§·¥±-<:·¥±-trans H‚â§ Hsub)
sub-env (tweaken Htype H‚äÜ Hd) Hsub =
  let Œì‚ÇÇ‚Ä≤ , Hsub‚Ä≤ , H‚äÜ‚Ä≤ = sub-‚äÜ Hsub H‚äÜ
  in  tweaken (sub-env Htype Hsub‚Ä≤) H‚äÜ‚Ä≤ (dom-distinct (symm $ sub-dom Hsub) Hd)
sub-env (tsub Htype H‚â§ Hsub‚Ä≤) Hsub = tsub (sub-env Htype Hsub) H‚â§ Hsub‚Ä≤
sub-env (tpromote Htype H‚â§) Hsub = tpromote (sub-env Htype Hsub) (‚â§·¥±-<:·¥±-trans H‚â§ Hsub)

well-typed-distinct
  : ‚àÄ {Œì t e T}
  ‚Üí Œì ‚ä¢ t :[ e ] T
  ‚Üí --------------
    Distinct Œì

well-typed-distinct tvar = ‚àâ√ò ‚à∑ []
well-typed-distinct (tabs (–òi As Hcof))
  with x , x‚àâAs ‚Üê fresh As
  with _ ‚à∑ Hd ‚Üê well-typed-distinct (Hcof x {{x‚àâAs}}) = Hd
well-typed-distinct (tapp Htype Htype‚ÇÅ) = well-typed-distinct Htype
well-typed-distinct (tprim Hœï Htypes Hd) = Hd
well-typed-distinct treal = []
well-typed-distinct (ttup Htypes Hd) = Hd
well-typed-distinct (tproj i Htype) = well-typed-distinct Htype
well-typed-distinct (tif Htype Htype‚ÇÅ Htype‚ÇÇ) = well-typed-distinct Htype
well-typed-distinct (tdiff _ Htype Htype‚ÇÅ) = well-typed-distinct Htype
well-typed-distinct (tsolve Htype Htype‚ÇÅ Htype‚ÇÇ _) = well-typed-distinct Htype
well-typed-distinct (tdist HD Htypes Hd) = Hd
well-typed-distinct (tassume Htype) = well-typed-distinct Htype
well-typed-distinct (tweight Htype) = well-typed-distinct Htype
well-typed-distinct (texpect Htype) = well-typed-distinct Htype
well-typed-distinct (tinfer Htype _)  = well-typed-distinct Htype
well-typed-distinct (tweaken _ _ Hd) = Hd
well-typed-distinct (tsub Htype _ _) = well-typed-distinct Htype
well-typed-distinct (tpromote Htype _) = well-typed-distinct Htype

tabs-inv :
  ‚àÄ {Œì T‚ÇÄ t e T e‚Ä≤ T‚ÇÅ T‚ÇÇ}
  ‚Üí Œì ‚ä¢ abs T‚ÇÄ t :[ e ] T
  ‚Üí T ‚â° T‚ÇÅ ‚áí[ e‚Ä≤ ] T‚ÇÇ
  ‚Üí ----------------------------------------------
    –ò x ‚à∂ ùî∏ , Œì , x ‚à∂ T‚ÇÅ ‚ä¢ conc (t ‚ÇÄ) x :[ e‚Ä≤ ] T‚ÇÇ
tabs-inv (tabs Habs) refl = Habs
tabs-inv {Œì} {T‚ÇÄ} (tweaken Htype H‚äÜ Hd) Heq
  with –òi As Hcof ‚Üê tabs-inv Htype Heq =
  –òi (dom Œì ‚à™ As) Œª { x {{‚àâ‚à™}} ‚Üí tweaken (Hcof x) (refl ‚à∑ H‚äÜ) (it ‚à∑ Hd) }
tabs-inv (tsub Htype H‚â§ (sarr Hsub‚ÇÄ Hsub‚ÇÅ He)) refl
  with –òi As Hcof ‚Üê tabs-inv Htype refl =
  –òi As Œª x ‚Üí sub-env (tsub (Hcof x) He Hsub‚ÇÅ) ((refl , Hsub‚ÇÄ) ‚à∑ P.refl (refl , sub-refl))
tabs-inv (tpromote {T = _ ‚áí[ _ ] _} Htype H‚â§) refl =
  tabs-inv Htype refl

ttup-inv :
  ‚àÄ {n Œì vs e T Ts}
  ‚Üí Œì ‚ä¢ tup {n} vs :[ e ] T
  ‚Üí T ‚â° ttup Ts
  ‚Üí --------------------------
    ‚àÄ i ‚Üí Œì ‚ä¢ vs i :[ e ] Ts i
ttup-inv (ttup Hvs _) refl = Hvs
ttup-inv (tweaken Htype H‚äÜ Hd) Heq = Œª i ‚Üí
  tweaken (ttup-inv Htype Heq i) H‚äÜ Hd
ttup-inv (tsub Htype H‚â§ (stup Hsubs)) refl = Œª i ‚Üí
  tsub (ttup-inv Htype refl i) H‚â§ (Hsubs i)
ttup-inv (tpromote {T = ttup _} Htype H‚â§) refl = Œª i ‚Üí
  tpromote (ttup-inv Htype refl i) H‚â§

texpect-inv :
  ‚àÄ {Œì D rs e T T‚Ä≤}
  ‚Üí Œì ‚ä¢ dist D (real ‚àò rs) :[ e ] T
  ‚Üí T ‚â° tdist T‚Ä≤
  ‚Üí -----------------------------------------------
    ‚àÉ[ cs ] ‚àÉ[ T‚Ä≥ ] DistTy D ‚â° (cs , T‚Ä≥) √ó T‚Ä≥ <: T‚Ä≤
texpect-inv (tdist HD _ _) refl = _ , _ , HD , sub-refl
texpect-inv (tweaken Htype H‚äÜ Hd) Heq =
  texpect-inv Htype Heq
texpect-inv (tsub Htype H‚â§ (sdist Hsub)) refl with texpect-inv Htype refl
... | cs , T , Heq , Hsub‚Ä≤ = cs , T , Heq , sub-trans Hsub‚Ä≤ Hsub
texpect-inv (tpromote {T = tdist _} Htype H‚â§) refl =
  texpect-inv Htype refl

tinfer-inv :
  ‚àÄ {Œì v e T T‚Ä≤}
  ‚Üí Œì ‚ä¢ infer v :[ e ] T
  ‚Üí T ‚â° tdist T‚Ä≤
  ‚Üí --------------------------------
    Œì ‚ä¢ v ‚ÇÄ :[ e ] tunit ‚áí[ rnd ] T‚Ä≤
tinfer-inv (tinfer Htype _) refl = Htype
tinfer-inv (tweaken Htype H‚äÜ Hd) Heq =
  tweaken (tinfer-inv Htype Heq) H‚äÜ Hd
tinfer-inv (tsub Htype H‚â§ (sdist Hsub)) refl =
  tsub (tinfer-inv Htype refl) H‚â§ (sarr sub-refl Hsub ‚â§refl)
tinfer-inv (tpromote {T = tdist _} Htype H‚â§) refl =
  tpromote (tinfer-inv Htype refl) H‚â§

dom-‚àà : ‚àÄ {Œì x} ‚Üí x ‚àà dom Œì ‚Üí ‚àÉ[ T ] (x , T) ‚ààÀ° Œì
dom-‚àà {x :: Œì} (‚àà‚à™‚ÇÅ ‚àà[]) = _ , here refl
dom-‚àà {x :: Œì} (‚àà‚à™‚ÇÇ x‚ààŒì) with T , H‚àà ‚Üê dom-‚àà x‚ààŒì = T , there H‚àà

‚àà-dom : ‚àÄ {Œì x T} ‚Üí (x , T) ‚ààÀ° Œì ‚Üí x ‚àà dom Œì
‚àà-dom {x :: Œì} (here refl) = ‚àà‚à™‚ÇÅ ‚àà[]
‚àà-dom {x :: Œì} (there H‚àà)  = ‚àà‚à™‚ÇÇ (‚àà-dom H‚àà)

‚àâ-dom-‚äÜ
  : ‚àÄ {Œî Œì x}
  ‚Üí x ‚àâ dom Œì
  ‚Üí Œî ‚äÜ Œì
  ‚Üí ---------
    x ‚àâ dom Œî
‚àâ-dom-‚äÜ {[]} H‚àâ H‚äÜ = ‚àâ√ò
‚àâ-dom-‚äÜ {_ :: Œî} ‚àâ‚à™ (_ ‚à∑ ≥ H‚äÜ) = ‚àâ-dom-‚äÜ it H‚äÜ
‚àâ-dom-‚äÜ {y :: Œî} (‚àâ‚à™ {{p}}) (refl ‚à∑ H‚äÜ) = ‚àâ‚à™ {{p = p}} {{‚àâ-dom-‚äÜ it H‚äÜ}}

‚àâ-dom-fv
  : ‚àÄ {x Œì t e T}
  ‚Üí Œì ‚ä¢ t :[ e ] T
  ‚Üí x ‚àâ dom Œì
  ‚Üí ---------
    x ‚àâ fv t
‚àâ-dom-fv tvar (‚àâ‚à™ {{p}}) = p
‚àâ-dom-fv {x} (tabs {t = t} (–òi As Hcof)) H‚àâ
  with y , ‚àâ‚à™ {{‚àâ[]}} ‚Üê fresh {ùî∏} ([ x ] ‚à™ As)
  with Hnin ‚Üê ‚àâ-dom-fv {x} (Hcof y) (‚àâ‚à™ {{p = ‚àâ[] {{p = symm‚â† y x it}}}} {{H‚àâ}}) =
  ‚àâ‚à™ {{p = open-notin (t ‚ÇÄ) Hnin}}
‚àâ-dom-fv (tapp Htype Htype‚ÇÅ) H‚àâ =
  ‚àâ‚à™ {{p = ‚àâ-dom-fv Htype H‚àâ}} {{‚àâ‚à™ {{p = ‚àâ-dom-fv Htype‚ÇÅ H‚àâ}}}}
‚àâ-dom-fv (tprim _ Htypes _) H‚àâ = ‚àâ‚ãÉ‚Ä≤ _ Œª i ‚Üí ‚àâ-dom-fv (Htypes i) H‚àâ
‚àâ-dom-fv treal H‚àâ = ‚àâ√ò
‚àâ-dom-fv (ttup Htypes _) H‚àâ = ‚àâ‚ãÉ‚Ä≤ _ Œª i ‚Üí ‚àâ-dom-fv (Htypes i) H‚àâ
‚àâ-dom-fv (tproj i Htype) H‚àâ = ‚àâ‚à™ {{p = ‚àâ-dom-fv Htype H‚àâ}}
‚àâ-dom-fv (tif Htype Htype‚ÇÅ Htype‚ÇÇ) H‚àâ =
  ‚àâ‚à™ {{p = ‚àâ-dom-fv Htype H‚àâ}}
    {{‚àâ‚à™ {{p = ‚àâ-dom-fv Htype‚ÇÅ H‚àâ}}
      {{‚àâ‚à™ {{p = ‚àâ-dom-fv Htype‚ÇÇ H‚àâ}} }} }}
‚àâ-dom-fv (tdiff _ Htype Htype‚ÇÅ) H‚àâ =
  ‚àâ‚à™ {{p = ‚àâ-dom-fv Htype H‚àâ}} {{‚àâ‚à™ {{p = ‚àâ-dom-fv Htype‚ÇÅ H‚àâ}}}}
‚àâ-dom-fv (tsolve Htype Htype‚ÇÅ Htype‚ÇÇ _) H‚àâ =
  ‚àâ‚à™ {{p = ‚àâ-dom-fv Htype H‚àâ}}
    {{‚àâ‚à™ {{p = ‚àâ-dom-fv Htype‚ÇÅ H‚àâ}}
      {{‚àâ‚à™ {{p = ‚àâ-dom-fv Htype‚ÇÇ H‚àâ}} }} }}
‚àâ-dom-fv (tdist _ Htypes _) H‚àâ = ‚àâ‚ãÉ‚Ä≤ _ Œª i ‚Üí ‚àâ-dom-fv (Htypes i) H‚àâ
‚àâ-dom-fv (tassume Htype) H‚àâ = ‚àâ‚à™ {{p = ‚àâ-dom-fv Htype H‚àâ}}
‚àâ-dom-fv (tweight Htype) H‚àâ = ‚àâ‚à™ {{p = ‚àâ-dom-fv Htype H‚àâ}}
‚àâ-dom-fv (texpect Htype) H‚àâ = ‚àâ‚à™ {{p = ‚àâ-dom-fv Htype H‚àâ}}
‚àâ-dom-fv (tinfer Htype _) H‚àâ  = ‚àâ‚à™ {{p = ‚àâ-dom-fv Htype H‚àâ}}
‚àâ-dom-fv (tweaken Htype H‚äÜ _) H‚àâ = ‚àâ-dom-fv Htype (‚àâ-dom-‚äÜ H‚àâ H‚äÜ)
‚àâ-dom-fv (tsub Htype _ _) H‚àâ = ‚àâ-dom-fv Htype H‚àâ
‚àâ-dom-fv (tpromote Htype _) H‚àâ = ‚àâ-dom-fv Htype H‚àâ

++-dom : ‚àÄ {Œì x} Œì‚Ä≤ ‚Üí x ‚àâ dom (Œì‚Ä≤ ++ Œì) ‚Üí x ‚àâ dom Œì‚Ä≤ ‚à™ dom Œì
++-dom [] H‚àâ = ‚àâ‚à™ {{q = H‚àâ}}
++-dom ((y , T) :: Œì‚Ä≤) (‚àâ‚à™ {{p = H‚àâ‚ÇÅ}} {{H‚àâ‚ÇÇ}}) with ‚àâ‚à™ ‚Üê ++-dom Œì‚Ä≤ H‚àâ‚ÇÇ =
  ‚àâ‚à™ {{p = ‚àâ‚à™ {{p = H‚àâ‚ÇÅ}}}}

dom-++ : ‚àÄ {Œì‚Ä≤ Œì x} ‚Üí x ‚àâ dom Œì‚Ä≤ ‚à™ dom Œì ‚Üí x ‚àâ dom (Œì‚Ä≤ ++ Œì)
dom-++ {[]} ‚àâ‚à™ = it
dom-++ {_ :: Œì‚Ä≤} {Œì} {x} (‚àâ‚à™ {{‚àâ‚à™ {{p = H‚àâ}}}}) = ‚àâ‚à™ {{p = H‚àâ}} {{dom-++ it}}

distinct-weaken
  : ‚àÄ {Œì‚Ä≤ Œì x T}
  ‚Üí Distinct (Œì , x ‚à∂ T & Œì‚Ä≤)
  ‚Üí -------------------------
    Distinct (Œì & Œì‚Ä≤)
distinct-weaken {[]} (x ‚à∑ Hd) = Hd
distinct-weaken {Œì‚Ä≤ , x‚Ä≤ ‚à∂ T‚Ä≤} {Œì} {x} {T} (H‚àâ ‚à∑ Hd)
  with ‚àâ‚à™ {{q = ‚àâ‚à™}} ‚Üê ++-dom Œì‚Ä≤ H‚àâ =
  dom-++ it ‚à∑ distinct-weaken Hd

‚äÜ-strengthen
  : ‚àÄ {Œì‚ÇÇ Œì‚ÇÅ Œì x T}
  ‚Üí x ‚àâ dom Œì
  ‚Üí Œì ‚äÜ Œì‚ÇÅ , x ‚à∂ T & Œì‚ÇÇ
  ‚Üí -------------------
    Œì ‚äÜ Œì‚ÇÅ & Œì‚ÇÇ
‚äÜ-strengthen {[]} H‚àâ (.(_ , _) ‚à∑ ≥ H‚äÜ) = H‚äÜ
‚äÜ-strengthen {[]} {x = x} (‚àâ‚à™ {{‚àâ[]}}) (refl ‚à∑ H‚äÜ) with () ‚Üê ¬¨‚â† x it
‚äÜ-strengthen {x :: Œì‚ÇÇ} H‚àâ (.x ‚à∑ ≥ H‚äÜ) = x ‚à∑ ≥ (‚äÜ-strengthen H‚àâ H‚äÜ)
‚äÜ-strengthen {x :: Œì‚ÇÇ} ‚àâ‚à™ (x‚ÇÅ ‚à∑ H‚äÜ) = x‚ÇÅ ‚à∑ (‚äÜ-strengthen it H‚äÜ)

‚äÜ-dom
  : ‚àÄ {Œî Œì x}
  ‚Üí Œì ‚äÜ Œî
  ‚Üí x ‚àâ dom Œî
  ‚Üí ---------
    x ‚àâ dom Œì
‚äÜ-dom [] ‚àâ√ò = ‚àâ√ò
‚äÜ-dom {Œî , y ‚à∂ _} (_ ‚à∑ ≥ Hsub) ‚àâ‚à™ = ‚äÜ-dom Hsub it
‚äÜ-dom {Œî , _ ‚à∂ _} {Œì , _ ‚à∂ _} {x} (refl ‚à∑ Hsub) (‚àâ‚à™ {{H‚àâ}}) =
  ‚àâ‚à™ {{p = H‚àâ}} {{‚äÜ-dom Hsub it}}

‚äÜ-distinct
  : ‚àÄ {Œî Œì}
  ‚Üí Distinct Œì
  ‚Üí Œî ‚äÜ Œì
  ‚Üí ----------
    Distinct Œî
‚äÜ-distinct {[]} Hd H‚äÜ = []
‚äÜ-distinct {_ :: Œî} (_ ‚à∑ Hd) (_ ‚à∑ ≥ H‚äÜ) = ‚äÜ-distinct Hd H‚äÜ
‚äÜ-distinct {x :: Œî} (H‚àâ ‚à∑ Hd) (refl ‚à∑ H‚äÜ) =
  ‚äÜ-dom H‚äÜ H‚àâ ‚à∑ ‚äÜ-distinct Hd H‚äÜ

‚äÜ-split
  : ‚àÄ {Œì‚ÇÇ Œì‚ÇÅ Œî x T}
  ‚Üí x ‚àâ dom Œì‚ÇÅ ‚à™ dom Œì‚ÇÇ
  ‚Üí x ‚àà dom Œî
  ‚Üí Œî ‚äÜ Œì‚ÇÅ , x ‚à∂ T & Œì‚ÇÇ
  ‚Üí -------------------
    ‚àÉ[ Œî‚ÇÅ ] ‚àÉ[ Œî‚ÇÇ ]
    Œî‚ÇÅ ‚äÜ Œì‚ÇÅ √ó Œî‚ÇÇ ‚äÜ Œì‚ÇÇ √ó Œî ‚â° Œî‚ÇÅ , x ‚à∂ T & Œî‚ÇÇ

‚äÜ-split {[]} ‚àâ‚à™ H‚àà (.(_ , _) ‚à∑ ≥ Hsub) with _ , H‚àà‚Ä≤ ‚Üê dom-‚àà H‚àà
  with () ‚Üê ‚àâ‚Üí¬¨‚àà (‚àà-dom $ lookup Hsub H‚àà‚Ä≤)
‚äÜ-split {[]} ‚àâ‚à™ H‚àà (refl ‚à∑ Hsub) = _ , _ , Hsub , [] , refl
‚äÜ-split {x :: Œì‚ÇÇ} (‚àâ‚à™ {{q = ‚àâ‚à™}}) H‚àà (.x ‚à∑ ≥ Hsub)
  with  Œî‚ÇÅ , Œî‚ÇÇ , Hsub1 , Hsub2 , Heq ‚Üê ‚äÜ-split ‚àâ‚à™ H‚àà Hsub =
  Œî‚ÇÅ , Œî‚ÇÇ , Hsub1 , x ‚à∑ ≥ Hsub2 , Heq
‚äÜ-split {x :: Œì‚ÇÇ} (‚àâ‚à™ {{ q = ‚àâ‚à™ }}) (‚àà‚à™‚ÇÇ H‚àà) (refl ‚à∑ Hsub)
  with Œî‚ÇÅ , Œî‚ÇÇ , Hsub1 , Hsub2 , refl ‚Üê ‚äÜ-split ‚àâ‚à™ H‚àà Hsub =
  Œî‚ÇÅ , x :: Œî‚ÇÇ , Hsub1 , refl ‚à∑ Hsub2 , refl
‚äÜ-split {Œì‚ÇÇ , x ‚à∂ _} (‚àâ‚à™ {{ q = ‚àâ‚à™ {{ p = ‚àâ[] }} }}) (‚àà‚à™‚ÇÅ ‚àà[]) (refl ‚à∑ Hsub)
  with () ‚Üê ¬¨‚â† x it

distinct-‚àâ
  : ‚àÄ {Œì‚ÇÇ Œì‚ÇÅ x T}
  ‚Üí Distinct (Œì‚ÇÅ , x ‚à∂ T & Œì‚ÇÇ)
  ‚Üí --------------------------
    x ‚àâ dom Œì‚ÇÅ ‚à™ dom Œì‚ÇÇ
distinct-‚àâ {[]} {Œì‚ÇÅ} {x} (H‚àâ ‚à∑ _) = ‚àâ‚à™ {{p = H‚àâ}}
distinct-‚àâ {(y , _) :: Œì‚ÇÇ} {Œì‚ÇÅ} {x} {T} (H‚àâ ‚à∑ Hd)
  with ‚àâ‚à™ {{q = ‚àâ‚à™ {{‚àâ[]}}}} ‚Üê ++-dom Œì‚ÇÇ H‚àâ | ‚àâ‚à™ ‚Üê distinct-‚àâ Hd = it
  where instance
  _ : x ‚â† y
  _ = symm‚â† y x it

all-weaken
  : ‚àÄ {A : Set} {P : A ‚Üí Set} {l‚ÇÅ l‚ÇÇ x}
  ‚Üí All P (l‚ÇÅ ++ x :: l‚ÇÇ)
  ‚Üí ---------------------
    All P (l‚ÇÅ ++ l‚ÇÇ)
all-weaken {l‚ÇÅ = []} (px ‚à∑ Hall) = Hall
all-weaken {l‚ÇÅ = x :: l‚ÇÅ} (px ‚à∑ Hall) = px ‚à∑ all-weaken Hall

open LocalClosed
open Body

well-typed-lc
  : ‚àÄ {Œì t e T}
  ‚Üí Œì ‚ä¢ t :[ e ] T
  ‚Üí --------------
    lc-at 0 t
well-typed-lc tvar = lc-at-fvar
well-typed-lc (tabs {t = t} (–òi As Hcof)) = lc-at-op Œª
  { ‚ÇÄ ‚Üí let Hbody : body (t ‚ÇÄ)
            Hbody = –òi As Œª x ‚Üí lc-at‚Üí‚âª _ _ $ well-typed-lc (Hcof x)
        in ‚âª‚Üílc-at _ _ $ body‚Üí1‚âª _ Hbody
  }
well-typed-lc (tapp Htype Htype‚ÇÅ) = lc-at-op Œª
  { ‚ÇÄ ‚Üí well-typed-lc Htype
  ; ‚ÇÅ ‚Üí well-typed-lc Htype‚ÇÅ
  }
well-typed-lc (tprim _ Htypes _) = lc-at-op $ well-typed-lc ‚àò Htypes
well-typed-lc treal              = lc-at-op Œª()
well-typed-lc (ttup Htypes _)    = lc-at-op $ well-typed-lc ‚àò Htypes
well-typed-lc (tproj i Htype)    = lc-at-op Œª { ‚ÇÄ ‚Üí well-typed-lc Htype }
well-typed-lc (tif Htype Htype‚ÇÅ Htype‚ÇÇ) = lc-at-op Œª
  { ‚ÇÄ ‚Üí well-typed-lc Htype
  ; ‚ÇÅ ‚Üí well-typed-lc Htype‚ÇÅ
  ; ‚ÇÇ ‚Üí well-typed-lc Htype‚ÇÇ
  }
well-typed-lc (tdiff _ Htype Htype‚ÇÅ) = lc-at-op Œª
  { ‚ÇÄ ‚Üí well-typed-lc Htype
  ; ‚ÇÅ ‚Üí well-typed-lc Htype‚ÇÅ
  }
well-typed-lc (tsolve Htype Htype‚ÇÅ Htype‚ÇÇ _) = lc-at-op Œª
  { ‚ÇÄ ‚Üí well-typed-lc Htype
  ; ‚ÇÅ ‚Üí well-typed-lc Htype‚ÇÅ
  ; ‚ÇÇ ‚Üí well-typed-lc Htype‚ÇÇ
  }
well-typed-lc (tdist _ Htypes _) = lc-at-op $ well-typed-lc ‚àò Htypes
well-typed-lc (tassume Htype)  = lc-at-op Œª { ‚ÇÄ ‚Üí well-typed-lc Htype }
well-typed-lc (tweight Htype)  = lc-at-op Œª { ‚ÇÄ ‚Üí well-typed-lc Htype }
well-typed-lc (texpect Htype)  = lc-at-op Œª { ‚ÇÄ ‚Üí well-typed-lc Htype }
well-typed-lc (tinfer Htype _)   = lc-at-op Œª { ‚ÇÄ ‚Üí well-typed-lc Htype }
well-typed-lc (tweaken Htype _ _) = well-typed-lc Htype
well-typed-lc (tsub Htype _ _)    = well-typed-lc Htype
well-typed-lc (tpromote Htype _)  = well-typed-lc Htype

substitution-pres-typing
  : ‚àÄ {Œì‚Ä≤ x u T‚ÇÇ t e T‚ÇÅ}
  ‚Üí [ x ‚à∂ T‚ÇÇ ] & Œì‚Ä≤ ‚ä¢ t :[ e ] T‚ÇÅ
  ‚Üí [] ‚ä¢ u :[ det ] T‚ÇÇ
  ‚Üí ------------------------------
    [] & Œì‚Ä≤ ‚ä¢ (x => u) t :[ e ] T‚ÇÅ
substitution-pres-typing {Œì‚Ä≤} {x} {u} {T‚ÇÇ} Htype Hu = go Htype
  where
  go
    : ‚àÄ {Œì‚Ä≤ Œì‚ÇÄ t e T‚ÇÅ}
    ‚Üí {{Œì‚ÇÄ ‚â° [ x ‚à∂ T‚ÇÇ ] & Œì‚Ä≤}}
    ‚Üí Œì‚ÇÄ ‚ä¢ t :[ e ] T‚ÇÅ
    ‚Üí -------------------------
      [] & Œì‚Ä≤ ‚ä¢ (x => u) t :[ e ] T‚ÇÅ
  go {{Heq}} (tvar {x = x‚ÇÅ})
    with refl , refl , refl ‚Üê single-inv {{Heq}}
    rewrite dec-equ x = Hu
  go {Œì‚Ä≤} {{refl}} (tabs {t = t} (–òi As Hcof)) =
    tabs $ –òi ([ x ] ‚à™ As) Œª { y {{‚àâ‚à™ {{‚àâx}}}} ‚Üí
      let Heq : (x => u)((0 ~> y) (t ‚ÇÄ)) ‚â° (0 ~> y)((x => u) (t ‚ÇÄ))
          Heq = subst-open-comm (t ‚ÇÄ) (symm‚â† y x (‚àâ[]‚ÇÅ ‚àâx)) (lc-at‚Üí‚âª _ _ $ well-typed-lc Hu)
      in
      subst (Œª x ‚Üí _ ‚ä¢ x :[ _ ] _) Heq $ go {Œì‚Ä≤ , y ‚à∂ _} (Hcof y)
    }
  go (tapp Htype Htype‚ÇÅ) = tapp (go Htype) (go Htype‚ÇÅ)
  go {{refl}} (tprim Hœï Htypes Hd) = tprim Hœï (go ‚àò Htypes) (distinct-weaken Hd)
  go {Œì‚Ä≤} treal with () ‚Üê ++-conical ≥ Œì‚Ä≤ _ $ symm it
  go {{refl}} (ttup Htypes Hd) = ttup (go ‚àò Htypes) (distinct-weaken Hd)
  go (tproj i Htype) = tproj i $ go Htype
  go (tif Htype Htype‚ÇÅ Htype‚ÇÇ) =
    tif (go Htype) (go Htype‚ÇÅ) (go Htype‚ÇÇ)
  go (tdiff Hcs Htype Htype‚ÇÅ) =
    tdiff Hcs (go Htype) (go Htype‚ÇÅ)
  go (tsolve Htype Htype‚ÇÅ Htype‚ÇÇ H‚â§) =
    tsolve (go Htype) (go Htype‚ÇÅ) (go Htype‚ÇÇ) H‚â§
  go {{refl}} (tdist HD Htypes Hd) = tdist HD (go ‚àò Htypes) (distinct-weaken Hd)
  go (tassume Htype) = tassume $ go Htype
  go (tweight Htype) = tweight $ go Htype
  go (texpect Htype) = texpect $ go Htype
  go {{refl}} (tinfer Htype H‚â§) = tinfer (go Htype) (all-weaken H‚â§)
  go {{refl}} (tweaken {Œì‚Ä≤ = Œì‚ÇÇ} {t = t} Htype H‚äÜ Hd) with x ‚àà? dom Œì‚ÇÇ
  ... | yes H‚àà with Œî‚ÇÅ , Œî‚ÇÇ , [] , H‚äÜ‚ÇÅ , refl ‚Üê ‚äÜ-split (distinct-‚àâ Hd) H‚àà H‚äÜ =
    tweaken (go Htype) (++‚Å∫ H‚äÜ‚ÇÅ []) (distinct-weaken Hd)
  ... | no H‚àâ rewrite subst-fresh u t (‚àâ-dom-fv Htype (¬¨‚àà‚Üí‚àâ H‚àâ)) =
    tweaken Htype (‚äÜ-strengthen (¬¨‚àà‚Üí‚àâ H‚àâ) H‚äÜ) (distinct-weaken Hd)
  go (tsub Htype H‚â§ Hsub) = tsub (go Htype) H‚â§ Hsub
  go {{refl}} (tpromote Htype Hmul) = tpromote (go Htype) (all-weaken Hmul)
