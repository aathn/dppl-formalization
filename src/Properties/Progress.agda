module Properties.Progress (‚Ñù ùïÄ : Set) where

-- Proofs of progress for the DPPL semantics

open import Syntax ‚Ñù
open import Typing ‚Ñù
open import SmallStep ‚Ñù ùïÄ
open import Properties.SmallStep ‚Ñù ùïÄ
open import Properties.Util

open import Lib.Prelude
open import Lib.FunExt
open import Lib.EvalCtx

open import Data.List.Relation.Binary.Sublist.Propositional using ([])
open import Data.Product using (‚àÉ-syntax)
open import Data.Vec.Functional using (map)

module Progress (Ass : EvalAssumptions) where
  open Eval Ass
  open Step Ass

  progress-det
    : ‚àÄ {t T}
    ‚Üí [] ‚ä¢ t :[ det ] T
    ‚Üí ------------------------------
      Value t ‚äé ‚àÉ[ t‚Ä≤ ] t ‚Üídet t‚Ä≤

  progress-det (tabs _) = Œπ‚ÇÅ vabs
  progress-det treal    = Œπ‚ÇÅ vreal
  progress-det (tapp Htype Htype‚ÇÅ) =
    Œπ‚ÇÇ $ case (progress-det Htype) Œª
      { (Œπ‚ÇÇ (t‚Ä≤ , Hstep)) ‚Üí _ , cong-step·µà (Œª _ ()) Hstep
      ; (Œπ‚ÇÅ Hv) ‚Üí case (progress-det Htype‚ÇÅ) Œª
        { (Œπ‚ÇÇ (t‚Ä≤ , Hstep)) ‚Üí _ , cong-step·µà (Œª {‚ÇÄ (+1‚â§ 0‚â§) ‚Üí Hv}) Hstep
        ; (Œπ‚ÇÅ Hv‚ÇÅ) ‚Üí case (canonical-‚áí Htype Hv refl) Œª
          { (_ , t , Heq) ‚Üí _ , estep (eapp Heq Hv‚ÇÅ) }
        }
      }
  progress-det (tprim {ts = ts} Hœï Htypes _) =
    Œπ‚ÇÇ $ case (all-‚äé (progress-det ‚àò Htypes)) Œª
      { (Œπ‚ÇÅ Hvs) ‚Üí
        let Hreals : ts ‚â° map real _
            Hreals = funext Œª i ‚Üí œÄ‚ÇÇ $ canonical-real (Htypes i) (Hvs i) refl
        in _ , estep (eprim Hreals)
      ; (Œπ‚ÇÇ (j , (t‚Ä≤ , Hstep) , Hvs)) ‚Üí _ , cong-step·µà Hvs Hstep
      }
  progress-det (ttup Htypes _) =
    case (all-‚äé (progress-det ‚àò Htypes)) Œª
      { (Œπ‚ÇÇ (j , (t‚Ä≤ , Hstep) , Hvs)) ‚Üí Œπ‚ÇÇ $ _ , cong-step·µà Hvs Hstep
      ; (Œπ‚ÇÅ Hvs)                      ‚Üí Œπ‚ÇÅ $ vtup Hvs
      }
  progress-det (tproj i Htype) =
    Œπ‚ÇÇ $ case (progress-det Htype) Œª
      { (Œπ‚ÇÇ (t‚Ä≤ , Hstep)) ‚Üí _ , cong-step·µà (Œª _ ()) Hstep
      ; (Œπ‚ÇÅ Hv) ‚Üí case (canonical-tup Htype Hv refl) Œª
        { (ts , Heq , Hvs) ‚Üí _ , estep (eproj i Heq Hvs) }
      }
  progress-det (tif Htype Htype‚ÇÅ Htype‚ÇÇ) =
    Œπ‚ÇÇ $ case (progress-det Htype) Œª
      { (Œπ‚ÇÇ (t‚Ä≤ , Hstep)) ‚Üí _ , cong-step·µà (Œª _ ()) Hstep
      ; (Œπ‚ÇÅ Hv) ‚Üí case (canonical-real Htype Hv refl) Œª
        { (r , Heq) ‚Üí _ , estep (eif Heq) }
      }
  progress-det (tdiff _ Htype Htype‚ÇÅ) =
    Œπ‚ÇÇ $ case (progress-det Htype) Œª
      { (Œπ‚ÇÇ (t‚Ä≤ , Hstep)) ‚Üí _ , cong-step·µà (Œª _ ()) Hstep
      ; (Œπ‚ÇÅ Hv) ‚Üí case (progress-det Htype‚ÇÅ) Œª
        { (Œπ‚ÇÅ Hv‚ÇÅ) ‚Üí _ , estep (ediff Hv Hv‚ÇÅ)
        ; (Œπ‚ÇÇ (t‚Ä≤ , Hstep)) ‚Üí
          _ , cong-step·µà (Œª {‚ÇÄ (+1‚â§ 0‚â§) ‚Üí Hv}) Hstep
        }
      }
  progress-det (tsolve Htype Htype‚ÇÅ Htype‚ÇÇ) =
    Œπ‚ÇÇ $ case (progress-det Htype) Œª
      { (Œπ‚ÇÇ (t‚Ä≤ , Hstep)) ‚Üí _ , cong-step·µà (Œª _ ()) Hstep
      ; (Œπ‚ÇÅ Hv) ‚Üí case (progress-det Htype‚ÇÅ) Œª
        { (Œπ‚ÇÇ (t‚Ä≤ , Hstep)) ‚Üí _ , cong-step·µà (Œª {‚ÇÄ (+1‚â§ 0‚â§) ‚Üí Hv}) Hstep
        ; (Œπ‚ÇÅ Hv‚ÇÅ) ‚Üí case (progress-det Htype‚ÇÇ) Œª
          { (Œπ‚ÇÇ (t‚Ä≤ , Hstep)) ‚Üí
              _ , cong-step·µà
                    (Œª {‚ÇÄ (+1‚â§ 0‚â§) ‚Üí Hv ; ‚ÇÅ (+1‚â§ (+1‚â§ 0‚â§)) ‚Üí Hv‚ÇÅ})
                    Hstep
          ; (Œπ‚ÇÅ Hv‚ÇÇ) ‚Üí _ , estep (esolve Hv Hv‚ÇÅ Hv‚ÇÇ)
          }
        }
      }
  progress-det (tdist _ Htypes _) =
    case (all-‚äé (progress-det ‚àò Htypes)) Œª
      { (Œπ‚ÇÇ (j , (t‚Ä≤ , Hstep) , Hvs)) ‚Üí Œπ‚ÇÇ $ _ , cong-step·µà Hvs Hstep
      ; (Œπ‚ÇÅ Hvs)                      ‚Üí Œπ‚ÇÅ $ vdist Hvs
      }
  progress-det (texpect Htype) =
    Œπ‚ÇÇ $ case (progress-det Htype) Œª
      { (Œπ‚ÇÇ (t‚Ä≤ , Hstep)) ‚Üí _ , cong-step·µà (Œª _ ()) Hstep
      ; (Œπ‚ÇÅ Hv) ‚Üí case (canonical-dist Htype Hv refl) Œª
        { (Œπ‚ÇÅ (D , ts , Heq)) ‚Üí _ , estep (eexpectdist Heq)
        ; (Œπ‚ÇÇ (v , Heq , Hv)) ‚Üí _ , estep (eexpectinfer Heq Hv)
        }
      }
  progress-det (tinfer Htype) =
    case (progress-det Htype) Œª
      { (Œπ‚ÇÇ (t‚Ä≤ , Hstep)) ‚Üí Œπ‚ÇÇ $ _ , cong-step·µà (Œª _ ()) Hstep
      ; (Œπ‚ÇÅ Hv)           ‚Üí Œπ‚ÇÅ $ vinfer Hv
      }
  progress-det (tweaken Htype [] _) = progress-det Htype
  progress-det (tsub Htype 0‚â§ _)    = progress-det Htype
  progress-det (tpromote {[]} Htype H‚â§) = progress-det Htype


  progress-rnd
    : ‚àÄ {t T w p s}
    ‚Üí [] ‚ä¢ t :[ rnd ] T
    ‚Üí -------------------------------------------------
      Value t ‚äé ‚àë tws‚Ä≤ ‚à∂ _ , (t , w , p :: s) ‚Üírnd tws‚Ä≤

  progress-rnd (tapp Htype Htype‚ÇÅ) =
    Œπ‚ÇÇ $ case (progress-rnd Htype) Œª
      { (Œπ‚ÇÇ (_ , Hstep)) ‚Üí _ , cong-step ≥ (Œª _ ()) Hstep
      ; (Œπ‚ÇÅ Hv) ‚Üí case (progress-rnd Htype‚ÇÅ) Œª
        { (Œπ‚ÇÇ (_ , Hstep)) ‚Üí _ , cong-step ≥ (Œª {‚ÇÄ (+1‚â§ 0‚â§) ‚Üí Hv}) Hstep
        ; (Œπ‚ÇÅ Hv‚ÇÅ) ‚Üí case (canonical-‚áí Htype Hv refl) Œª
          { (_ , t , Heq) ‚Üí _ , estep (edet (eapp Heq Hv‚ÇÅ)) }
        }
      }
  progress-rnd (tprim {ts = ts} Hœï Htypes _) =
    Œπ‚ÇÇ $ case (all-‚äé (progress-rnd ‚àò Htypes)) Œª
      { (Œπ‚ÇÇ (j , (_ , Hstep) , Hvs)) ‚Üí _ , cong-step ≥ Hvs Hstep
      ; (Œπ‚ÇÅ Hvs) ‚Üí
        let Hreals : ts ‚â° map real _
            Hreals = funext Œª i ‚Üí œÄ‚ÇÇ $ canonical-real (Htypes i) (Hvs i) refl
        in _ , estep (edet (eprim Hreals))
      }
  progress-rnd (ttup Htypes _) =
    case (all-‚äé (progress-rnd ‚àò Htypes)) Œª
      { (Œπ‚ÇÇ (j , (_ , Hstep) , Hvs)) ‚Üí Œπ‚ÇÇ $ _ , cong-step ≥ Hvs Hstep
      ; (Œπ‚ÇÅ Hvs)                     ‚Üí Œπ‚ÇÅ $ vtup Hvs
      }
  progress-rnd (tproj i Htype) =
    Œπ‚ÇÇ $ case (progress-rnd Htype) Œª
      { (Œπ‚ÇÇ (_ , Hstep)) ‚Üí _ , cong-step ≥ (Œª _ ()) Hstep
      ; (Œπ‚ÇÅ Hv) ‚Üí case (canonical-tup Htype Hv refl) Œª
        { (ts , Heq , Hvs) ‚Üí _ , estep (edet (eproj i Heq Hvs)) }
      }
  progress-rnd (tif Htype Htype‚ÇÅ Htype‚ÇÇ) =
    Œπ‚ÇÇ $ case (progress-rnd Htype) Œª
      { (Œπ‚ÇÇ (_ , Hstep)) ‚Üí _ , cong-step ≥ (Œª _ ()) Hstep
      ; (Œπ‚ÇÅ Hv) ‚Üí case (canonical-real Htype Hv refl) Œª
        { (r , Heq) ‚Üí _ , estep (edet (eif Heq)) }
      }
  progress-rnd (tdiff _ Htype Htype‚ÇÅ) =
    Œπ‚ÇÇ $ case (progress-rnd Htype) Œª
      { (Œπ‚ÇÇ (_ , Hstep)) ‚Üí _ , cong-step ≥ (Œª _ ()) Hstep
      ; (Œπ‚ÇÅ Hv) ‚Üí case (progress-rnd Htype‚ÇÅ) Œª
        { (Œπ‚ÇÇ (_ , Hstep)) ‚Üí _ , cong-step ≥ (Œª {‚ÇÄ (+1‚â§ 0‚â§) ‚Üí Hv}) Hstep
        ; (Œπ‚ÇÅ Hv‚ÇÅ) ‚Üí _ , estep (edet (ediff Hv Hv‚ÇÅ))
        }
      }
  progress-rnd (tsolve Htype Htype‚ÇÅ Htype‚ÇÇ) =
    Œπ‚ÇÇ $ case (progress-rnd Htype) Œª
      { (Œπ‚ÇÇ (_ , Hstep)) ‚Üí _ , cong-step ≥ (Œª _ ()) Hstep
      ; (Œπ‚ÇÅ Hv) ‚Üí case (progress-rnd Htype‚ÇÅ) Œª
        { (Œπ‚ÇÇ (_ , Hstep)) ‚Üí _ , cong-step ≥ (Œª {‚ÇÄ (+1‚â§ 0‚â§) ‚Üí Hv}) Hstep
        ; (Œπ‚ÇÅ Hv‚ÇÅ) ‚Üí case (progress-rnd Htype‚ÇÇ) Œª
          { (Œπ‚ÇÇ (_ , Hstep)) ‚Üí
            _ , cong-step ≥
                  (Œª {‚ÇÄ (+1‚â§ 0‚â§) ‚Üí Hv ; ‚ÇÅ (+1‚â§ (+1‚â§ 0‚â§)) ‚Üí Hv‚ÇÅ})
                  Hstep
          ; (Œπ‚ÇÅ Hv‚ÇÇ) ‚Üí _ , estep (edet (esolve Hv Hv‚ÇÅ Hv‚ÇÇ))
          }
        }
      }
  progress-rnd (tdist _ Htypes _) =
    case (all-‚äé (progress-rnd ‚àò Htypes)) Œª
      { (Œπ‚ÇÇ (j , (_ , Hstep) , Hvs)) ‚Üí Œπ‚ÇÇ $ _ , cong-step ≥ Hvs Hstep
      ; (Œπ‚ÇÅ Hvs)                     ‚Üí Œπ‚ÇÅ $ vdist Hvs
      }
  progress-rnd (texpect Htype) =
    Œπ‚ÇÇ $ case (progress-rnd Htype) Œª
      { (Œπ‚ÇÇ (_ , Hstep)) ‚Üí _ , cong-step ≥ (Œª _ ()) Hstep
      ; (Œπ‚ÇÅ Hv) ‚Üí case (canonical-dist Htype Hv refl) Œª
        { (Œπ‚ÇÅ (D , ts , Heq)) ‚Üí _ , estep (edet (eexpectdist Heq))
        ; (Œπ‚ÇÇ (v , Heq , Hv)) ‚Üí _ , estep (edet (eexpectinfer Heq Hv))
        }
      }
  progress-rnd (tassume Htype) =
    Œπ‚ÇÇ $ case (progress-rnd Htype) Œª
      { (Œπ‚ÇÇ (_ , Hstep)) ‚Üí _ , cong-step ≥ (Œª _ ()) Hstep
      ; (Œπ‚ÇÅ Hv) ‚Üí case (canonical-dist Htype Hv refl) Œª
        { (Œπ‚ÇÅ (D , ts , Heq)) ‚Üí _ , estep (eassumedist Heq)
        ; (Œπ‚ÇÇ (v , Heq , Hv)) ‚Üí _ , estep (eassumeinfer Heq Hv)
        }
      }
  progress-rnd (tweight Htype) =
    Œπ‚ÇÇ $ case (progress-rnd Htype) Œª
      { (Œπ‚ÇÇ (_ , Hstep)) ‚Üí _ , cong-step ≥ (Œª _ ()) Hstep
      ; (Œπ‚ÇÅ Hv) ‚Üí case (canonical-real Htype Hv refl) Œª
        { (r , Heq) ‚Üí _ , estep (eweight Heq) }
      }
  progress-rnd (tinfer Htype) =
    case (progress-rnd Htype) Œª
      { (Œπ‚ÇÇ (_ , Hstep)) ‚Üí Œπ‚ÇÇ $ _ , cong-step ≥ (Œª _ ()) Hstep
      ; (Œπ‚ÇÅ Hv) ‚Üí Œπ‚ÇÅ $ vinfer Hv
      }
  progress-rnd (tweaken Htype [] _) = progress-rnd Htype
  progress-rnd (tsub Htype 0‚â§ _) =
    case (progress-det Htype) Œª
      { (Œπ‚ÇÅ Hv) ‚Üí Œπ‚ÇÅ Hv
      ; (Œπ‚ÇÇ (_ , Hstep)) ‚Üí Œπ‚ÇÇ $ _ , ‚Üídet‚äÜ‚Üírnd Hstep
      }
  progress-rnd (tsub Htype (+1‚â§ 0‚â§) _) = progress-rnd Htype
  progress-rnd (tpromote {[]} Htype H‚â§) = progress-rnd Htype
