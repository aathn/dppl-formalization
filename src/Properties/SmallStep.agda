open import Lib.Reals

module Properties.SmallStep (R : Reals‚ÇÄ) where

open Reals R hiding (refl)
open Interval R

-- Minor lemmas about the step relations (and typing)

open import Lib.Prelude
open import Lib.FunExt
open import Lib.BindingSignature
open import Lib.EvalCtx

import Data.List as L
open import Data.Product using (map‚ÇÅ)
open import Data.Vec.Functional using (map ; updateAt)
open import Data.Vec.Functional.Properties using (updateAt-updates)
open import Relation.Nullary using (Irrelevant)

open import Syntax R
open import Typing R
open import SmallStep R

-- Value t is irrelevant

value-irrelevant :
  {t : Term}
  ‚Üí --------------------
  Irrelevant (IsValue t)

value-irrelevant vlam vlam = refl
value-irrelevant vreal vreal = refl
value-irrelevant (vtup vs) (vtup vs‚Ä≤) =
  ap vtup (funext Œª i ‚Üí value-irrelevant (vs i) (vs‚Ä≤ i))
value-irrelevant (vdist vs) (vdist vs‚Ä≤) =
  ap vdist (funext Œª i ‚Üí value-irrelevant (vs i) (vs‚Ä≤ i))
value-irrelevant (vinfer v) (vinfer v‚Ä≤) =
  ap vinfer (value-irrelevant v v‚Ä≤)

-- Canonical forms

canonical-‚áí :
  {Œì : TyEnv}
  {c : Coeff}
  {t : Term}
  {e e‚Ä≤ : Eff}
  {T T‚ÇÅ T‚ÇÇ : Type}
  (_ : Œì ‚ä¢[ c ] t :[ e ] T)
  (_ : IsValue t)
  (_ : T ‚â° T‚ÇÅ ‚áí[ e‚Ä≤ ] T‚ÇÇ)
  ‚Üí -----------------------------
  ‚àÉ Œª T‚Ä≤ ‚Üí ‚àÉ Œª t‚Ä≤ ‚Üí t ‚â° lam T‚Ä≤ t‚Ä≤

canonical-‚áí (tlam _) _ refl = _ , _ , refl
canonical-‚áí (tsub Htype _ (sarr _ _ _)) Hval refl =
  canonical-‚áí Htype Hval refl
canonical-‚áí (tpromote {T = _ ‚áí[ _ ] _} Htype H‚â§) Hval Heq =
  canonical-‚áí Htype Hval Heq
canonical-‚áí (tdemote  {T = _ ‚áí[ _ ] _} Htype H‚â§) Hval Heq =
  canonical-‚áí Htype Hval Heq

canonical-real :
  {Œì : TyEnv}
  {c d : Coeff}
  {t : Term}
  {e : Eff}
  {T : Type}
  (_ : Œì ‚ä¢[ d ] t :[ e ] T)
  (_ : IsValue t)
  (_ : T ‚â° treal c)
  ‚Üí -----------------------
  ‚àÉ Œª r ‚Üí t ‚â° real r

canonical-real (treal _) _ _ = _ , refl
canonical-real (tsub Htype _ (sreal _)) Hval refl =
  canonical-real Htype Hval refl
canonical-real (tpromote {T = treal _} Htype H‚â§) Hval refl =
  canonical-real Htype Hval refl
canonical-real (tdemote {T = treal _} Htype H‚â§) Hval refl =
  canonical-real Htype Hval refl

canonical-tup :
  {Œì : TyEnv}
  {c : Coeff}
  {t : Term}
  {e : Eff}
  {T : Type}
  {n : ‚Ñï}
  {Ts : Vector Type n}
  (_ : Œì ‚ä¢[ c ] t :[ e ] T)
  (_ : IsValue t)
  (_ : T ‚â° ttup {n} Ts)
  ‚Üí --------------------------------------------
  ‚àÉ Œª ts ‚Üí t ‚â° tup {n} ts √ó ‚àÄ i ‚Üí IsValue (ts i)

canonical-tup (ttup _ _) (vtup Hvs) refl = _ , refl , Hvs
canonical-tup (tsub Htype _ (stup _)) Hval refl =
  canonical-tup Htype Hval refl
canonical-tup (tpromote {T = ttup _} Htype H‚â§) Hval refl =
  canonical-tup Htype Hval refl
canonical-tup (tdemote {T = ttup _} Htype H‚â§) Hval refl =
  canonical-tup Htype Hval refl

canonical-dist :
  {Œì : TyEnv}
  {c : Coeff}
  {t : Term}
  {e : Eff}
  {T T‚Ä≤ : Type}
  (_ : Œì ‚ä¢[ c ] t :[ e ] T)
  (_ : IsValue t)
  (_ : T ‚â° tdist T‚Ä≤)
  ‚Üí -------------------------------------------
    (‚àÉ Œª D ‚Üí ‚àÉ Œª rs ‚Üí t ‚â° dist D (map real rs))
  ‚äé (‚àÉ Œª v ‚Üí t ‚â° infer v √ó IsValue (v ‚ÇÄ))

canonical-dist (tdist {ts = ts} _ _ Htypes) (vdist Hvs) _ =
  let Hreals : ‚àÉ Œª rs ‚Üí ts ‚â° map real rs
      Hreals = _ , funext Œª i ‚Üí œÄ‚ÇÇ $ canonical-real (Htypes i) (Hvs i) refl
  in
  case Hreals Œª { (_ , refl) ‚Üí Œπ‚ÇÅ $ _ , _ , refl }
canonical-dist (tinfer _) (vinfer Hv) refl = Œπ‚ÇÇ $ _ , refl , Hv
canonical-dist (tsub Htype _ (sdist _)) Hval refl =
  canonical-dist Htype Hval refl
canonical-dist (tpromote {T = tdist _} Htype H‚â§) Hval Heq =
  canonical-dist Htype Hval Heq
canonical-dist (tdemote {T = tdist _} Htype H‚â§) Hval Heq =
  canonical-dist Htype Hval Heq

val-type-det :
  {Œì : TyEnv}
  {c : Coeff}
  {t : Term}
  {e : Eff}
  {T : Type}
  (_ : Œì ‚ä¢[ c ] t :[ e ] T)
  (_ : IsValue t)
  ‚Üí -----------------------
  Œì ‚ä¢[ c ] t :[ det ] T
val-type-det (tlam Htype) _ = tlam Htype
val-type-det (treal Hd) _ = treal Hd
val-type-det (ttup Hd Htypes) (vtup Hvs) =
  ttup Hd (Œª i ‚Üí val-type-det (Htypes i) (Hvs i))
val-type-det (tdist HD Hd Htypes) (vdist Hvs) =
  tdist HD Hd (Œª i ‚Üí val-type-det (Htypes i) (Hvs i))
val-type-det (tinfer Htype) (vinfer Hval) = tinfer (val-type-det Htype Hval)
val-type-det (tsub Htype He Hsub) Hval = tsub (val-type-det Htype Hval) 0‚â§ Hsub
val-type-det (tpromote Htype H‚â§) Hval = tpromote (val-type-det Htype Hval) H‚â§
val-type-det (tdemote Htype H‚â§) Hval = tdemote (val-type-det Htype Hval) H‚â§


module Step (Ass : EvalAssumptions) where
  open Eval Ass

  ‚Üídet‚äÜ‚Üírnd :
    {t t‚Ä≤ : Term}
    {w : ‚Ñù}
    {s : List ùïÄ}
    (_ : t ‚Üídet t‚Ä≤)
    ‚Üí ---------------------------
    (t , w , s) ‚Üírnd (t‚Ä≤ , w , s)

  ‚Üídet‚äÜ‚Üírnd (estep Hstep) = estep (edet Hstep)
  ‚Üídet‚äÜ‚Üírnd (econg ctx Hstep) = econg (_ , ctx , refl) (‚Üídet‚äÜ‚Üírnd Hstep)

  private
    module C1 = CongStep _‚Üí·µà_ DetCtx id refl id
    module C2 = CongStep _‚Üí ≥_ RndCtx map‚ÇÅ refl (Œª ctx ‚Üí _ , ctx , refl)

  cong-step·µà = C1.cong-step {unit} {unit}

  cong-step ≥ = Œª {ws ws‚Ä≤ o ts t‚Ä≤ n} ‚Üí
    C2.cong-step {unit , ws} {unit , ws‚Ä≤} {o} {ts} {t‚Ä≤} {n}

  ctx-value-inv :
    {E : Term ‚Üí Term}
    {t : Term}
    (_ : DetCtx E)
    ‚Üí -----------------------
    IsValue (E t) ‚Üí IsValue t

  ctx-value-inv {E} {t} (ectx {o} {j} {ts} _) Hv
    with ts' ‚Üê updateAt ts (ord {{eval-order {o}}} j) (const t) in HEt | Hv | HEt
  ... | vtup  Hvs | refl = subst IsValue (updateAt-updates j ts) (Hvs j)
  ... | vdist Hvs | refl = subst IsValue (updateAt-updates j ts) (Hvs j)
  ... | vinfer Hv‚ÇÄ | refl with ‚ÇÄ ‚Üê j = Hv‚ÇÄ

  value-cannot-step-det :
    {t t‚Ä≤ : Term}
    (_ : IsValue t)
    ‚Üí -------------
    ¬¨ t ‚Üídet t‚Ä≤

  value-cannot-step-det Hv (estep Hstep) with vlam ‚Üê Hv | () ‚Üê Hstep
  value-cannot-step-det Hv (econg Hctx Hstep) =
    value-cannot-step-det (ctx-value-inv Hctx Hv) Hstep

  value-cannot-step-rnd :
    {t t‚Ä≤ : Term √ó ‚Ñù √ó List ùïÄ}
    (_ : IsValue (t .œÄ‚ÇÅ))
    ‚Üí ------------------------
    ¬¨ t ‚Üírnd t‚Ä≤

  value-cannot-step-rnd Hv (estep Hstep) with vlam ‚Üê Hv | edet () ‚Üê Hstep
  value-cannot-step-rnd Hv (econg (_ , Hctx , refl) Hstep) =
    value-cannot-step-rnd (ctx-value-inv Hctx Hv) Hstep
