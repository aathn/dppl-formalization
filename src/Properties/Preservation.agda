module Properties.Preservation (‚Ñù ùïÄ : Set) where

open import Lib.Prelude
open import Lib.Unfinite
open import Lib.BindingSignature
open import Lib.EvalCtx

open import Function using (const)
open import Data.Vec.Functional using (map)
open import Data.List.Relation.Unary.AllPairs using ([])
open import Data.List.Relation.Binary.Sublist.Propositional using ([])

open import Syntax ‚Ñù
open import Typing ‚Ñù
open import SmallStep ‚Ñù ùïÄ
open import Properties.Typing ‚Ñù
open import Properties.SmallStep ‚Ñù ùïÄ
open import Properties.Util

ctx-type-inv
  : ‚àÄ {E Œì t e T}
  ‚Üí DetCtx E
  ‚Üí Œì ‚ä¢ E t :[ e ] T
  ‚Üí -------------------------------------------
    ‚àë (e‚Ä≤ , T‚Ä≤) ‚à∂ Eff √ó Type , Œì ‚ä¢ t :[ e‚Ä≤ ] T‚Ä≤
ctx-type-inv = {!!}

preservation-ctx
  : ‚àÄ {E Œì t‚ÇÅ t‚ÇÇ e T e‚Ä≤ T‚Ä≤}
  ‚Üí DetCtx E
  ‚Üí Œì ‚ä¢ t‚ÇÅ :[ e‚Ä≤ ] T‚Ä≤
  ‚Üí Œì ‚ä¢ t‚ÇÇ :[ e‚Ä≤ ] T‚Ä≤
  ‚Üí Œì ‚ä¢ E t‚ÇÅ :[ e ] T
  ‚Üí -----------------
    Œì ‚ä¢ E t‚ÇÇ :[ e ] T

preservation-ctx = {!!}

module _ (Ass : EvalAssumptions) where
  open Eval Ass
  open EvalAssumptions Ass

  record PresAssumptions : Set where
    field
      PrimCoeffBound
        : ‚àÄ {œï cs c}
        ‚Üí PrimTy œï ‚â° (cs , c)
        ‚Üí -------------------
          c ‚â§ cc

      DiffPres
        : ‚àÄ {Œì t‚ÇÄ t‚ÇÅ n m cs ds e}
        ‚Üí (‚àÄ i ‚Üí cs i ‚â§ cb)
        ‚Üí Œì ‚ä¢ t‚ÇÄ :[ e ] treals {n} cs ‚áí[ det ] treals {m} ds
        ‚Üí Œì ‚ä¢ t‚ÇÅ :[ e ] treals cs
        ‚Üí (v‚ÇÄ : Value t‚ÇÄ) (v‚ÇÅ : Value t‚ÇÅ)
        ‚Üí --------------------------------------------------------------------------
          Œì ‚ä¢ Diff (_ , v‚ÇÄ) (_ , v‚ÇÅ) :[ e ] treals {n} (const ca) ‚áí[ det ] treals ds

      SolvePres
        : ‚àÄ {Œì t‚ÇÄ t‚ÇÅ t‚ÇÇ Ts n c cs e}
        ‚Üí Œì ‚ä¢ t‚ÇÄ :[ e ] ttup {2} Ts ‚áí[ det ] treals cs
        ‚Üí Ts ‚ÇÄ ‚â° treal c ‚Üí Ts ‚ÇÅ ‚â° treals {n} cs
        ‚Üí Œì ‚ä¢ t‚ÇÅ :[ e ] treals cs
        ‚Üí Œì ‚ä¢ t‚ÇÇ :[ e ] treal cb
        ‚Üí (v‚ÇÄ : Value t‚ÇÄ) (v‚ÇÅ : Value t‚ÇÅ) (v‚ÇÇ : Value t‚ÇÇ)
        ‚Üí -----------------------------------------------------
          Œì ‚ä¢ Solve (_ , v‚ÇÄ) (_ , v‚ÇÅ) (_ , v‚ÇÇ) :[ e ] treals cs

      SamplePres
        : ‚àÄ {D cs T rs p}
        ‚Üí DistTy D ‚â° (cs , T)
        ‚Üí ---------------------------------
          [] ‚ä¢ Sample D rs p .œÄ‚ÇÅ :[ det ] T

      InferPres
        : ‚àÄ {Œì t e T p}
        ‚Üí Œì ‚ä¢ t :[ e ] tunit ‚áí[ rnd ] T
        ‚Üí (v : Value t)
        ‚Üí --------------------------------
          Œì ‚ä¢ Infer (_ , v) p .œÄ‚ÇÅ :[ e ] T


  module _ (PAss : PresAssumptions) where
    open PresAssumptions PAss

    preservation-det-step
      : ‚àÄ {t t‚Ä≤ e T}
      ‚Üí [] ‚ä¢ t :[ e ] T
      ‚Üí t ‚Üí·µà t‚Ä≤
      ‚Üí ---------------
        [] ‚ä¢ t‚Ä≤ :[ e ] T

    preservation-det-step (tapp {ts = ts} Htype Htype‚ÇÅ) (eapp {t = t} Heq Hv)
      rewrite Heq with –òi As Hcof ‚Üê tabs-inv Htype refl
      with x , ‚àâ‚à™ ‚Üê fresh {ùî∏} (As ‚à™ fv (t ‚ÇÄ))
      rewrite subst-intro {x = x} {0} {ts ‚ÇÅ} (t ‚ÇÄ) it =
      substitution-pres-typing (Hcof x) (val-type-det Htype‚ÇÅ Hv)
    preservation-det-step (tprim Hœï Htypes Hd) (eprim Heq) =
      tsub treal 0‚â§ (sreal (PrimCoeffBound Hœï))
    preservation-det-step (tproj i Htype) (eproj .i Heq Hvs) rewrite Heq =
      ttup-inv Htype refl i
    preservation-det-step (tif Htype Htype‚ÇÅ Htype‚ÇÇ) (eif {r} _) with r > ≥ 0 ≥
    ... | true  = Htype‚ÇÅ
    ... | false = Htype‚ÇÇ
    preservation-det-step (tdiff Hcs Htype Htype‚ÇÅ) (ediff Hv Hv‚ÇÅ) =
      DiffPres Hcs Htype Htype‚ÇÅ Hv Hv‚ÇÅ
    preservation-det-step (tsolve Htype Htype‚ÇÅ Htype‚ÇÇ) (esolve Hv Hv‚ÇÅ Hv‚ÇÇ) =
      SolvePres Htype refl refl Htype‚ÇÅ Htype‚ÇÇ Hv Hv‚ÇÅ Hv‚ÇÇ
    preservation-det-step (texpect Htype) (eexpectdist Heq) =
      tsub treal 0‚â§ sub-refl
    preservation-det-step (texpect Htype) (eexpectinfer Heq Hv) =
      tsub treal 0‚â§ sub-refl
    preservation-det-step (tweaken Htype [] Hd) Hstep =
      preservation-det-step Htype Hstep
    preservation-det-step (tsub Htype H‚â§ Hsub) Hstep =
      tsub (preservation-det-step Htype Hstep) H‚â§ Hsub
    preservation-det-step (tpromote Htype Heq) Hstep =
      tpromote (preservation-det-step Htype Hstep) Heq

    preservation-det
      : ‚àÄ {t t‚Ä≤ e T}
      ‚Üí [] ‚ä¢ t :[ e ] T
      ‚Üí t ‚Üídet t‚Ä≤
      ‚Üí ---------------
        [] ‚ä¢ t‚Ä≤ :[ e ] T

    preservation-det Htype (estep Hstep) = preservation-det-step Htype Hstep
    preservation-det Htype (econg Hctx Hstep) =
      let _ , Htype‚Ä≤ = ctx-type-inv Hctx Htype in
      preservation-ctx Hctx Htype‚Ä≤ (preservation-det Htype‚Ä≤ Hstep) Htype


    preservation-rnd-step
      : ‚àÄ {t w s t‚Ä≤ w‚Ä≤ s‚Ä≤ e T}
      ‚Üí [] ‚ä¢ t :[ e ] T
      ‚Üí (t , w , s) ‚Üí ≥ (t‚Ä≤ , w‚Ä≤ , s‚Ä≤)
      ‚Üí -----------------------------
        [] ‚ä¢ t‚Ä≤ :[ e ] T
    preservation-rnd-step Htype (edet Hstep) = preservation-det-step Htype Hstep
    preservation-rnd-step (tassume Htype) (eassumedist Heq) rewrite Heq
      with texpect-inv Htype refl
    ... | _ , _ , Heq , Hsub =
      tsub (SamplePres Heq) 0‚â§ Hsub
    preservation-rnd-step (tassume Htype) (eassumeinfer Heq Hv) rewrite Heq =
      InferPres (tinfer-inv Htype refl) Hv
    preservation-rnd-step (tweight Htype) (eweight Heq) =
      ttup (Œª()) []
    preservation-rnd-step (tweaken Htype [] Hd) Hstep =
      preservation-rnd-step Htype Hstep
    preservation-rnd-step (tsub Htype H‚â§ Hsub) Hstep =
      tsub (preservation-rnd-step Htype Hstep) H‚â§ Hsub
    preservation-rnd-step (tpromote Htype Heq) Hstep =
      tpromote (preservation-rnd-step Htype Hstep) Heq

    preservation-rnd
      : ‚àÄ {t w s t‚Ä≤ w‚Ä≤ s‚Ä≤ e T}
      ‚Üí [] ‚ä¢ t :[ e ] T
      ‚Üí (t , w , s) ‚Üírnd (t‚Ä≤ , w‚Ä≤ , s‚Ä≤)
      ‚Üí -------------------------------
        [] ‚ä¢ t‚Ä≤ :[ e ] T

    preservation-rnd Htype (estep Hstep) = preservation-rnd-step Htype Hstep
    preservation-rnd Htype (econg (E , Hctx , refl) Hstep) =
      let _ , Htype‚Ä≤ = ctx-type-inv Hctx Htype in
      preservation-ctx Hctx Htype‚Ä≤ (preservation-rnd Htype‚Ä≤ Hstep) Htype
