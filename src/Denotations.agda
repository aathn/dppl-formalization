open import Lib.Reals

module Denotations (R : Reals‚ÇÄ) where

open Reals R using (‚Ñù; 0·¥ø; _‚â≤?_)

open import Syntax R hiding (n; m; D)
open import Typing R

open import Lib.Prelude hiding ([]; [_]; _‚à∑_; _‚àà_; ‚ãÉ) renaming (id to id·∂†; _‚àò_ to _‚àò·∂†_)
open import Lib.Unfinite
open import Lib.Env hiding ([]; _‚à∑_)
open import Lib.Subvec
open import Lib.FunExt

open import Data.Fin using (splitAt)
open import Data.Fin.Properties using (to‚Ñï<n)
open import Data.List.Relation.Unary.All as All using (All)
open import Data.Sum using ([_,_])
open import Data.Sum.Properties using (inj‚ÇÅ-injective; inj‚ÇÇ-injective)
open import Data.Vec.Functional
open import Relation.Unary using (_‚àà_; Pred; ‚ãÉ)
open import Relation.Binary using (Rel)

open import Function using (Func ; Injection ; Inverse)
open import Function.Properties.Inverse using (Inverse‚áíInjection)
open import Relation.Binary.Bundles using (Setoid)
open import Function.Construct.Setoid as FuncS using (_‚àô_)
import Relation.Binary.Reasoning.Setoid as SetoidR

open import Categories.Adjoint using (_‚ä£_ ; Adjoint)
open import Categories.Adjoint.RAPL using (rapl)
open import Categories.Category using (Category)
open import Categories.Category.Concrete using (Concrete)
open import Categories.Category.Instance.Setoids using (Setoids)
open import Categories.Category.Instance.Zero using (Zero)
open import Categories.Category.Instance.Zero.Properties using (Zero-‚ä•)
open import Categories.Functor using (Functor; _‚àòF_) renaming (id to idF)
open import Categories.Functor.Presheaf using (Presheaf)
open import Categories.Functor.Hom
open import Categories.Functor.Properties using (Faithful; [_]-resp-‚âÖ)
open import Categories.Morphism.Duality using (‚âÖ‚áíop-‚âÖ)
open import Categories.NaturalTransformation using (NaturalTransformation)
open import Categories.Object.Initial using (Initial)
open import Categories.Object.Terminal using (Terminal ; IsTerminal ; up-to-iso)
open import Categories.Object.Terminal.Limit using (‚ä§‚áílimit; limit‚áí‚ä§)
import Categories.Diagram.Pullback as PB
import Categories.Morphism.Reasoning as MR
import Categories.Morphism as Morphism

open import Level using (_‚äî_) renaming (suc to lsuc)

open Func

private
  variable
    n m k : ‚Ñï

module _ {a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ : Level} {A : Setoid a‚ÇÅ a‚ÇÇ} {B : Setoid b‚ÇÅ b‚ÇÇ} where

  Im : Func A B ‚Üí Pred (Setoid.Carrier B) _
  Im f y = ‚àÉ Œª x ‚Üí y ‚âà f .to x
    where open Setoid B

  _‚âó_ : Rel (Func A B) _
  _‚âó_ = _‚âà_
    where open Setoid (FuncS.setoid A B)

record CCat (o ‚Ñì e : Level) : Set (lsuc (o ‚äî ‚Ñì ‚äî e)) where
  -- Our definition of concrete categories differs from the agda-categories library
  -- in that we require a terminal object (following Matache et al.).
  field
    Cat : Category o ‚Ñì e

  open Category Cat public
  open Hom Cat public
  open Functor

  field
    terminal : Terminal Cat

  open Terminal terminal public renaming (‚ä§ to ‚ãÜ ; ‚ä§-is-terminal to ‚ãÜ-is-terminal)

  field
    ‚ãÜ-hom-faithful : Faithful Hom[ ‚ãÜ ,-]

  obj‚à£_‚à£ : Obj ‚Üí Setoid ‚Ñì e
  obj‚à£ c ‚à£ = Hom[ ‚ãÜ , c ]

  hom‚à£_‚à£ : {o‚ÇÅ o‚ÇÇ : Obj} ‚Üí o‚ÇÅ ‚áí o‚ÇÇ ‚Üí Func obj‚à£ o‚ÇÅ ‚à£ obj‚à£ o‚ÇÇ ‚à£
  hom‚à£ f ‚à£ = record {
      to = Œª g ‚Üí f ‚àò g
    ; cong = ‚àò-resp-‚âà ≥
    }

record CSite
  {o ‚Ñì e : Level}
  (p i : Level)
  (ùíû : CCat o ‚Ñì e)
  : ----------------------
  Set (o ‚äî ‚Ñì ‚äî e ‚äî lsuc (p ‚äî i))
  where
  open CCat ùíû
  open Setoid hiding (_‚âà_)
  field
    cover-fam : Obj ‚Üí Set p
    cover-idx : {c : Obj} ‚Üí cover-fam c ‚Üí Set i
    cover-dom : {c : Obj} (fs : cover-fam c) ‚Üí cover-idx fs ‚Üí Obj
    cover : {c : Obj} (fs : cover-fam c) (i : cover-idx fs) ‚Üí cover-dom fs i ‚áí c

    coverage-pullback :
      {Y Z : Obj}
      (g : Y ‚áí Z)
      (fs : cover-fam Z)
      ‚Üí ------------------------------
      ‚àÉ Œª hs ‚Üí ‚àÄ j ‚Üí ‚àÉ‚ÇÇ Œª i k ‚Üí
      g ‚àò cover hs j ‚âà cover fs i ‚àò k

    coverage-covers :
      {c : Obj}
      (fs : cover-fam c)
      (x : obj‚à£ c ‚à£ .Carrier)
      ‚Üí --------------------------------
      x ‚àà ‚ãÉ _ Œª i ‚Üí Im hom‚à£ cover fs i ‚à£

record CSheaf
  {o ‚Ñì e p i : Level}
  (o‚Ä≤ e‚Ä≤ : Level)
  {ùíû : CCat o ‚Ñì e}
  (S : CSite p i ùíû)
  : -------------------------------------
  Set (o ‚äî ‚Ñì ‚äî e ‚äî i ‚äî p ‚äî lsuc (o‚Ä≤ ‚äî e‚Ä≤))
  where
  open CSite S
  open CCat ùíû

  field
    Psh : Presheaf Cat (Setoids o‚Ä≤ e‚Ä≤)

  open Functor Psh public
  open Setoid

  module X = Setoid (F‚ÇÄ ‚ãÜ)

  ‚à£_‚à£ : Setoid o‚Ä≤ e‚Ä≤
  ‚à£_‚à£ = F‚ÇÄ ‚ãÜ

  F-maps : (c : Obj) ‚Üí F‚ÇÄ c .Carrier ‚Üí Func obj‚à£ c ‚à£ ‚à£_‚à£
  F-maps c Fc = record
    { to = Œª f ‚Üí F‚ÇÅ f .to Fc
    ; cong = Œª {x} {y} z ‚Üí F-resp-‚âà z
    }

  R[_,_] : (c : Obj) ‚Üí Pred (Func obj‚à£ c ‚à£ ‚à£_‚à£) _
  R[_,_] c f = ‚àÉ Œª Fc ‚Üí f ‚âó F-maps c Fc

  field
    is-sheaf :
      {c : Obj}
      (g : Func obj‚à£ c ‚à£ ‚à£_‚à£)
      (fs : cover-fam c)
      (_ : ‚àÄ i ‚Üí g ‚àô hom‚à£ cover fs i ‚à£ ‚àà R[_,_] _)
      ‚Üí ------------------------------------------
      g ‚àà R[_,_] c

    is-concrete :
      {c : Obj} ‚Üí injection (F‚ÇÄ c ._‚âà_) _‚âó_ (F-maps c)

module Pull {o ‚Ñì e p i : Level}
  {ùíû ùíü : CCat o ‚Ñì e}
  (S : CSite p i ùíû)
  where

  open CSite
  module C = CCat ùíû
  module D = CCat ùíü

  module _
    (L : Functor C.Cat D.Cat) (R : Functor D.Cat C.Cat)
    (adjoint : L ‚ä£ R) (L‚ãÜ-is-terminal : IsTerminal D.Cat (Functor.F‚ÇÄ L C.‚ãÜ))
    where

    private
      module L = Functor L
      module R = Functor R
      module LR = Functor (L ‚àòF R)
      module RL = Functor (R ‚àòF L)
      module L‚ãÜ = IsTerminal L‚ãÜ-is-terminal
      open Adjoint adjoint

      R‚ãÜ-terminal : Terminal C.Cat
      R‚ãÜ-terminal =
        limit‚áí‚ä§ C.Cat $ rapl adjoint ZI.! $ ‚ä§‚áílimit D.Cat D.terminal
        where module ZI = Initial (Zero-‚ä• {o} {‚Ñì} {e})

      module R‚ãÜ = IsTerminal (Terminal.‚ä§-is-terminal R‚ãÜ-terminal)

    PullSite : CSite p i ùíü
    PullSite .cover-fam c = S .cover-fam $ R.F‚ÇÄ c
    PullSite .cover-idx fs = S .cover-idx fs
    PullSite .cover-dom fs n = L.F‚ÇÄ $ S .cover-dom fs n
    PullSite .cover fs n = Radjunct $ S .cover fs n
    PullSite .coverage-pullback g fs =
      let hs , pb-prop = S .coverage-pullback (R.F‚ÇÅ g) fs in
      hs , Œª j ‚Üí
        let i , k , H‚âà = pb-prop j
            H‚âà‚Ä≤ = begin
              g D.‚àò Radjunct (S .cover hs j)                  ‚âà‚ü® pullÀ° (counit.sym-commute g) ‚óã D.assoc ‚ü©
              counit.Œ∑ _ D.‚àò LR.F‚ÇÅ g D.‚àò L.F‚ÇÅ (S .cover hs j) ‚âà‚ü® refl‚ü©‚àò‚ü® ‚ü∫ L.homomorphism ‚ü©
              counit.Œ∑ _ D.‚àò L.F‚ÇÅ (R.F‚ÇÅ g C.‚àò S .cover hs j)  ‚âà‚ü® refl‚ü©‚àò‚ü® L.F-resp-‚âà H‚âà ‚ü©
              counit.Œ∑ _ D.‚àò L.F‚ÇÅ (S .cover fs i C.‚àò k)       ‚âà‚ü® refl‚ü©‚àò‚ü® L.homomorphism ‚ü©
              counit.Œ∑ _ D.‚àò L.F‚ÇÅ (S .cover fs i) D.‚àò L.F‚ÇÅ k  ‚âà‚ü® D.sym-assoc ‚ü©
              Radjunct (S .cover fs i) D.‚àò L.F‚ÇÅ k             ‚àé
        in
        i , L.F‚ÇÅ k , H‚âà‚Ä≤
      where open D.HomReasoning
            open MR D.Cat
    PullSite .coverage-covers {c} fs x =
      let n , y , H‚âà = S .coverage-covers fs (C.hom‚à£ R.F‚ÇÅ x ‚à£ .to R‚ãÜ.!)
          H‚âà‚Ä≤ = begin
            x                                                              ‚âà‚ü® ‚ü∫ D.identity ≥ ‚ü©
            x D.‚àò D.id                                                     ‚âà‚ü® refl‚ü©‚àò‚ü® (‚ü∫ (D.!-unique _) ‚óã D.!-unique _) ‚ü©
            x D.‚àò Radjunct R‚ãÜ.! D.‚àò L‚ãÜ.!                                   ‚âà‚ü® pullÀ° (pullÀ° (counit.sym-commute _) ‚óã D.assoc) ‚óã D.assoc ‚ü©
            counit.Œ∑ _ D.‚àò (LR.F‚ÇÅ x D.‚àò L.F‚ÇÅ R‚ãÜ.!) D.‚àò L‚ãÜ.!                ‚âà‚ü® refl‚ü©‚àò‚ü® (‚ü∫ L.homomorphism ‚óã L.F-resp-‚âà H‚âà ‚óã L.homomorphism) ‚ü©‚àò‚ü®refl ‚ü©
            counit.Œ∑ _ D.‚àò (L.F‚ÇÅ (S .cover fs n) D.‚àò L.F‚ÇÅ y) D.‚àò L‚ãÜ.!      ‚âà‚ü® (refl‚ü©‚àò‚ü® D.assoc) ‚óã D.sym-assoc ‚ü©
            D.hom‚à£ Radjunct (S .cover fs n) ‚à£ .to (D.hom‚à£ L.F‚ÇÅ y ‚à£ .to L‚ãÜ.!) ‚àé
      in
      n , D.hom‚à£ L.F‚ÇÅ y ‚à£ .to L‚ãÜ.! , H‚âà‚Ä≤
      where open D.HomReasoning
            open MR D.Cat

    module _
      {o‚Ä≤ ‚Ñì‚Ä≤ : Level}
      (F : CSheaf o‚Ä≤ ‚Ñì‚Ä≤ S)
      where

      private
        module F = CSheaf F
        open CSheaf
        open Setoid
        open Morphism

        ‚ãÜ-lemma : R.F‚ÇÅ L‚ãÜ.! C.‚àò R‚ãÜ.! C.‚âà unit.Œ∑ _
        ‚ãÜ-lemma = begin
          R.F‚ÇÅ L‚ãÜ.! C.‚àò R‚ãÜ.!               ‚âà‚ü® C.sym-assoc ‚óã ‚ü∫ R.homomorphism ‚ü©‚àò‚ü®refl ‚ü©
          R.F‚ÇÅ (L‚ãÜ.! D.‚àò D.!) C.‚àò unit.Œ∑ _ ‚âà‚ü® R.F-resp-‚âà L‚ãÜ.!-unique‚ÇÇ ‚ü©‚àò‚ü®refl ‚ü©
          R.F‚ÇÅ D.id C.‚àò unit.Œ∑ _           ‚âà‚ü® elimÀ° R.identity ‚ü©
          unit.Œ∑ _                         ‚àé
          where open C.HomReasoning
                open MR C.Cat

        F!-injective : injection (F.F‚ÇÄ C.‚ãÜ ._‚âà_) (F.F‚ÇÄ (R.F‚ÇÄ D.‚ãÜ) ._‚âà_) (F.F‚ÇÅ C.! .to)
        F!-injective =
          let ‚ãÜ-iso = up-to-iso C.Cat R‚ãÜ-terminal C.terminal
              F-iso = [ F.Psh ]-resp-‚âÖ (‚âÖ‚áíop-‚âÖ C.Cat ‚ãÜ-iso)
              inv : Inverse (F.F‚ÇÄ C.‚ãÜ) (F.F‚ÇÄ (R.F‚ÇÄ D.‚ãÜ))
              inv = record
                     { to = F-iso .to .to
                     ; from = F-iso .from .to
                     ; to-cong = F-iso .to .cong
                     ; from-cong = F-iso .from .cong
                     ; inverse = (Œª H‚âà ‚Üí
                                    FS.trans (F.F‚ÇÅ C.! .cong H‚âà)
                                             (F-iso .iso .isoÀ°)) ,
                                 (Œª H‚âà ‚Üí
                                    F.X.trans (F.F‚ÇÅ R‚ãÜ.! .cong H‚âà)
                                              (F-iso .iso .iso ≥))
                     }
          in
          Inverse‚áíInjection inv .injective
          where open Injection
                open _‚âÖ_
                open Iso
                module FS = Setoid (F.F‚ÇÄ (R.F‚ÇÄ D.‚ãÜ))

      PullSheaf : CSheaf o‚Ä≤ ‚Ñì‚Ä≤ PullSite
      PullSheaf .Psh = F.Psh ‚àòF R.op
      PullSheaf .is-sheaf g fs H‚àà =
        let g‚Ä≤ = record
              { to = Œª x ‚Üí (F.F‚ÇÅ R‚ãÜ.! ‚àô g) .to $ Radjunct x D.‚àò L‚ãÜ.!
              ; cong = Œª H‚âà ‚Üí (F.F‚ÇÅ R‚ãÜ.! ‚àô g) .cong $ D.‚àò-resp-‚âàÀ° $ D.‚àò-resp-‚âà ≥ $ L.F-resp-‚âà H‚âà
              }
            hs , H‚âà‚Ä≤ =
              F.is-sheaf g‚Ä≤ fs Œª i ‚Üí
                let hs , H‚âà = H‚àà i
                in F.F‚ÇÅ (unit.Œ∑ _) .to hs , Œª {z} ‚Üí
                  XR.begin
                    g‚Ä≤ .to (cover S fs i C.‚àò z)                          XR.‚âà‚ü® (F.F‚ÇÅ R‚ãÜ.! ‚àô g) .cong $ D.‚àò-resp-‚âàÀ° $ D.‚àò-resp-‚âà ≥ L.homomorphism ‚ü©
                    _                                                    XR.‚âà‚ü® F.F‚ÇÅ R‚ãÜ.! .cong $ FS.trans (g .cong DM.assoc¬≤Œ≤Œ≥) H‚âà ‚ü©
                    F.F‚ÇÅ R‚ãÜ.! .to (F.F‚ÇÅ (R.F‚ÇÅ (L.F‚ÇÅ z D.‚àò L‚ãÜ.!)) .to hs) XR.‚âà‚ü® F.X.sym F.homomorphism ‚ü©
                    _                                                    XR.‚âà‚ü® F.F-resp-‚âà (C.‚àò-resp-‚âàÀ° R.homomorphism CR.‚óã C.assoc) ‚ü©
                    F.F‚ÇÅ (RL.F‚ÇÅ z C.‚àò R.F‚ÇÅ L‚ãÜ.! C.‚àò R‚ãÜ.!) .to hs         XR.‚âà‚ü® F.F-resp-‚âà (C.‚àò-resp-‚âà ≥ ‚ãÜ-lemma) ‚ü©
                    F.F‚ÇÅ (RL.F‚ÇÅ z C.‚àò unit.Œ∑ _) .to hs                   XR.‚âà‚ü® F.X.trans (F.F-resp-‚âà (unit.sym-commute _)) F.homomorphism ‚ü©
                    F.F‚ÇÅ z .to (F.F‚ÇÅ (unit.Œ∑ _) .to hs)                  XR.‚àé
        in
        hs , Œª {z} ‚Üí
          let z-lemma = DR.begin
                z                                                       DR.‚âà‚ü® DM.intro ≥ D.!-unique‚ÇÇ DR.‚óã D.sym-assoc ‚ü©
                (z D.‚àò D.!) D.‚àò L‚ãÜ.!                                    DR.‚âà‚ü® (DR.refl‚ü©‚àò‚ü® DM.intro ≥ zig) DR.‚ü©‚àò‚ü®refl ‚ü©
                (z D.‚àò D.! D.‚àò counit.Œ∑ _ D.‚àò L.F‚ÇÅ (unit.Œ∑ _)) D.‚àò L‚ãÜ.! DR.‚âà‚ü® (DR.refl‚ü©‚àò‚ü® DM.extend ≥ (counit.sym-commute _)) DR.‚ü©‚àò‚ü®refl ‚ü©
                _                                                       DR.‚âà‚ü® DM.extend ≥ (counit.sym-commute _) DR.‚ü©‚àò‚ü®refl ‚ü©
                _                                                       DR.‚âà‚ü® (DR.refl‚ü©‚àò‚ü® DR.refl‚ü©‚àò‚ü® DR.‚ü∫ L.homomorphism) DR.‚ü©‚àò‚ü®refl ‚ü©
                _                                                       DR.‚âà‚ü® (DR.refl‚ü©‚àò‚ü® DR.‚ü∫ L.homomorphism) DR.‚ü©‚àò‚ü®refl ‚ü©
                Radjunct (R.F‚ÇÅ z C.‚àò R‚ãÜ.!) D.‚àò L‚ãÜ.!                     DR.‚àé
          in FR.begin
            g .to z                                      FR.‚âà‚ü® g .cong z-lemma ‚ü©
            g .to (Radjunct (R.F‚ÇÅ z C.‚àò R‚ãÜ.!) D.‚àò L‚ãÜ.!)  FR.‚âà‚ü® FS.sym F.identity ‚ü©
            _                                            FR.‚âà‚ü® FS.trans (F.F-resp-‚âà R‚ãÜ.!-unique‚ÇÇ) F.homomorphism ‚ü©
            F.F‚ÇÅ C.! .to (g‚Ä≤ .to (R.F‚ÇÅ z C.‚àò R‚ãÜ.!))      FR.‚âà‚ü® F.F‚ÇÅ C.! .cong H‚âà‚Ä≤ ‚ü©
            F.F‚ÇÅ C.! .to (F.F‚ÇÅ (R.F‚ÇÅ z C.‚àò R‚ãÜ.!) .to hs) FR.‚âà‚ü® FS.sym F.homomorphism ‚ü©
            _                                            FR.‚âà‚ü® F.F-resp-‚âà (C.assoc CR.‚óã CM.elim ≥ R‚ãÜ.!-unique‚ÇÇ) ‚ü©
            F.F‚ÇÅ (R.F‚ÇÅ z) .to hs                         FR.‚àé
        where module CR = C.HomReasoning
              module DR = D.HomReasoning
              module CM = MR C.Cat
              module DM = MR D.Cat
              module XR = SetoidR (F.F‚ÇÄ C.‚ãÜ)
              module FR = SetoidR (F.F‚ÇÄ (R.F‚ÇÄ D.‚ãÜ))
              module FS = Setoid (F.F‚ÇÄ (R.F‚ÇÄ D.‚ãÜ))
      PullSheaf .is-concrete {x = x} {y} H‚âà =
        F.is-concrete Œª {z} ‚Üí
          let H‚âà‚Ä≤ = CR.begin
                R.F‚ÇÅ (Radjunct z D.‚àò L‚ãÜ.!)                         CR.‚âà‚ü® CR.‚ü∫ C.identity ≥ ‚ü©
                _                                                  CR.‚âà‚ü® R.homomorphism CR.‚ü©‚àò‚ü® CR.‚ü∫ R‚ãÜ.!-unique‚ÇÇ ‚ü©
                _                                                  CR.‚âà‚ü® C.sym-assoc CR.‚óã C.assoc CR.‚ü©‚àò‚ü®refl ‚ü©
                (R.F‚ÇÅ (Radjunct z) C.‚àò R.F‚ÇÅ L‚ãÜ.! C.‚àò R‚ãÜ.!) C.‚àò C.! CR.‚âà‚ü® (CR.refl‚ü©‚àò‚ü® ‚ãÜ-lemma) CR.‚ü©‚àò‚ü®refl ‚ü©
                Ladjunct (Radjunct z) C.‚àò C.!                      CR.‚âà‚ü® LRadjunct‚âàid CR.‚ü©‚àò‚ü®refl ‚ü©
                z C.‚àò C.!                                          CR.‚àé
          in
          F!-injective $ FR.begin
            F.F‚ÇÅ C.! .to (F.F‚ÇÅ z .to x)             FR.‚âà‚ü® Setoid.sym (F.F‚ÇÄ (R.F‚ÇÄ D.‚ãÜ)) F.homomorphism ‚ü©
            _                                       FR.‚âà‚ü® F.F-resp-‚âà (CR.‚ü∫ H‚âà‚Ä≤) ‚ü©
            F.F‚ÇÅ (R.F‚ÇÅ (Radjunct z D.‚àò L‚ãÜ.!)) .to x FR.‚âà‚ü® H‚âà ‚ü©
            F.F‚ÇÅ (R.F‚ÇÅ (Radjunct z D.‚àò L‚ãÜ.!)) .to y FR.‚âà‚ü® F.F-resp-‚âà H‚âà‚Ä≤ ‚ü©
            _                                       FR.‚âà‚ü® F.homomorphism ‚ü©
            F.F‚ÇÅ C.! .to (F.F‚ÇÅ z .to y)             FR.‚àé
          where module CR = C.HomReasoning
                module FR = SetoidR (F.F‚ÇÄ (R.F‚ÇÄ D.‚ãÜ))

module Meet {o ‚Ñì e p i : Level}
  {ùíû : CCat o ‚Ñì e}
  (S‚ÇÅ : CSite p i ùíû)
  (S‚ÇÇ : CSite p i ùíû)
  where

  private
    open CSite
    open CCat ùíû
    module S‚ÇÅ = CSite S‚ÇÅ
    module S‚ÇÇ = CSite S‚ÇÇ

    open PB Cat using (Pullback)
    open Pullback

    open HomReasoning
    open MR Cat

  module _
    (pullback : {c : Obj} (fs : S‚ÇÅ .cover-fam c) (gs : S‚ÇÇ .cover-fam c) ‚Üí
                ‚àÄ i j ‚Üí Pullback (S‚ÇÅ .cover fs i) (S‚ÇÇ .cover gs j))
    where

    MeetSite : CSite p i ùíû
    MeetSite .cover-fam c = S‚ÇÅ.cover-fam c √ó S‚ÇÇ.cover-fam c
    MeetSite .cover-idx (fs , gs) = S‚ÇÅ.cover-idx fs √ó S‚ÇÇ.cover-idx gs
    MeetSite .cover-dom (fs , gs) (i , j) =
      pullback fs gs i j .Pullback.P
    MeetSite .cover (fs , gs) (i , j) =
      S‚ÇÅ.cover fs i ‚àò pullback fs gs i j .p‚ÇÅ
    MeetSite .coverage-pullback g (fs , gs) =
      let fs‚Ä≤ , pb-prop‚ÇÅ = S‚ÇÅ .coverage-pullback g fs
          gs‚Ä≤ , pb-prop‚ÇÇ = S‚ÇÇ .coverage-pullback g gs
      in (fs‚Ä≤ , gs‚Ä≤) , Œª (j‚ÇÅ , j‚ÇÇ) ‚Üí
        let i‚ÇÅ , k‚ÇÅ , comm‚ÇÅ = pb-prop‚ÇÅ j‚ÇÅ
            i‚ÇÇ , k‚ÇÇ , comm‚ÇÇ = pb-prop‚ÇÇ j‚ÇÇ
            pb‚ÇÅ = pullback fs gs i‚ÇÅ i‚ÇÇ
            pb‚ÇÇ = pullback fs‚Ä≤ gs‚Ä≤ j‚ÇÅ j‚ÇÇ
            uni = pb‚ÇÅ .universal $ begin
              S‚ÇÅ.cover fs i‚ÇÅ ‚àò k‚ÇÅ ‚àò p‚ÇÅ pb‚ÇÇ ‚âà‚ü® extend ≥ (‚ü∫ comm‚ÇÅ) ‚ü©
              g ‚àò S‚ÇÅ.cover fs‚Ä≤ j‚ÇÅ ‚àò p‚ÇÅ pb‚ÇÇ ‚âà‚ü® refl‚ü©‚àò‚ü® commute pb‚ÇÇ ‚ü©
              g ‚àò S‚ÇÇ.cover gs‚Ä≤ j‚ÇÇ ‚àò p‚ÇÇ pb‚ÇÇ ‚âà‚ü® extend ≥ comm‚ÇÇ ‚ü©
              S‚ÇÇ.cover gs i‚ÇÇ ‚àò k‚ÇÇ ‚àò p‚ÇÇ pb‚ÇÇ ‚àé
            H‚âà = begin
              g ‚àò S‚ÇÅ.cover fs‚Ä≤ j‚ÇÅ ‚àò p‚ÇÅ pb‚ÇÇ    ‚âà‚ü® extend ≥ comm‚ÇÅ ‚ü©
              S‚ÇÅ.cover fs i‚ÇÅ ‚àò k‚ÇÅ ‚àò p‚ÇÅ pb‚ÇÇ    ‚âà‚ü® refl‚ü©‚àò‚ü® ‚ü∫ (p‚ÇÅ‚àòuniversal‚âàh‚ÇÅ pb‚ÇÅ) ‚ü©
              S‚ÇÅ.cover fs i‚ÇÅ ‚àò p‚ÇÅ pb‚ÇÅ ‚àò uni   ‚âà‚ü® sym-assoc ‚ü©
              (S‚ÇÅ.cover fs i‚ÇÅ ‚àò p‚ÇÅ pb‚ÇÅ) ‚àò uni ‚àé
        in
        (i‚ÇÅ , i‚ÇÇ) , uni , H‚âà
    MeetSite .coverage-covers (fs , gs) x =
      let n‚ÇÅ , y‚ÇÅ , H‚âà‚ÇÅ = S‚ÇÅ .coverage-covers fs x
          n‚ÇÇ , y‚ÇÇ , H‚âà‚ÇÇ = S‚ÇÇ .coverage-covers gs x
          pb = pullback fs gs n‚ÇÅ n‚ÇÇ
          y = pb .universal (‚ü∫ H‚âà‚ÇÅ ‚óã H‚âà‚ÇÇ)
          H‚âà = begin
            x                             ‚âà‚ü® H‚âà‚ÇÅ ‚ü©
            S‚ÇÅ .cover fs n‚ÇÅ ‚àò y‚ÇÅ          ‚âà‚ü® refl‚ü©‚àò‚ü® ‚ü∫ (p‚ÇÅ‚àòuniversal‚âàh‚ÇÅ pb) ‚ü©
            S‚ÇÅ .cover fs n‚ÇÅ ‚àò p‚ÇÅ pb ‚àò y   ‚âà‚ü® sym-assoc ‚ü©
            (S‚ÇÅ .cover fs n‚ÇÅ ‚àò p‚ÇÅ pb) ‚àò y ‚àé
      in
      (n‚ÇÅ , n‚ÇÇ) , y , H‚âà


    module _
      {o‚Ä≤ ‚Ñì‚Ä≤ : Level}
      (F‚ÇÅ : CSheaf o‚Ä≤ ‚Ñì‚Ä≤ S‚ÇÅ)
      (F‚ÇÇ : CSheaf o‚Ä≤ ‚Ñì‚Ä≤ S‚ÇÇ)
      where

      private
        open CSheaf hiding (F‚ÇÅ)
        module F‚ÇÅ = CSheaf F‚ÇÅ
        module F‚ÇÇ = CSheaf F‚ÇÇ

      MeetSheaf : CSheaf o‚Ä≤ ‚Ñì‚Ä≤ MeetSite
      MeetSheaf .Psh = {!!}
      MeetSheaf .is-sheaf = {!!}
      MeetSheaf .is-concrete = {!!}


-- module ‚Ñù‚äÜ where

--   ‚Ñù‚äÜ : CCat ‚Ñì‚ÇÅ ‚Ñì‚ÇÄ ‚Ñì‚ÇÄ
--   ‚Ñù‚äÜ = {!!}
--   -- ‚Ñù‚äÜ .Obj = ‚àÉ‚ÇÇ Œª n o ‚Üí o ‚Ü£ ‚Ñù ^ n
--   -- ‚Ñù‚äÜ ._‚áí_ (_ , o‚ÇÅ , _) (_ , o‚ÇÇ , _) = o‚ÇÅ ‚Ü£ o‚ÇÇ
--   -- ‚Ñù‚äÜ ._‚âà_ = {!!}
--   -- ‚Ñù‚äÜ .id‚Ä≤ = {!!}
--   -- ‚Ñù‚äÜ ._‚àò‚Ä≤_ = {!!}
--   -- ‚Ñù‚äÜ .assoc = {!!}
--   -- ‚Ñù‚äÜ .sym-assoc = {!!}
--   -- ‚Ñù‚äÜ .identityÀ° = {!!}
--   -- ‚Ñù‚äÜ .identity ≥ = {!!}
--   -- ‚Ñù‚äÜ .identity¬≤ = {!!}
--   -- ‚Ñù‚äÜ .equiv = {!!}
--   -- ‚Ñù‚äÜ .‚àò-resp-‚âà = {!!}

-- open ‚Ñù‚äÜ

-- record c-assumptions : Set‚ÇÅ where
--   field
--     c-site : Coeff ‚Üí CSite ‚Ñì‚ÇÄ ‚Ñù‚äÜ
--     c-sheaf : (c : Coeff) ‚Üí CSheaf ‚Ñì‚ÇÄ ‚Ñì‚ÇÄ (c-site c)

  -- c-opens : Category ‚Ñì‚ÇÄ ‚Ñì‚ÇÄ ‚Ñì‚ÇÄ
  -- c-opens .Obj = ‚àÉ‚ÇÇ c-open
  -- c-opens ._‚áí_ (c‚ÇÅ , n‚ÇÅ , U) (c‚ÇÇ , n‚ÇÇ , V) = c-open-points U ‚Ü£ c-open-points V
  -- c-opens ._‚âà_ = {!!}
  -- c-opens .id‚Ä≤ = {!!}
  -- c-opens ._‚àò‚Ä≤_ = {!!}
  -- c-opens .assoc = {!!}
  -- c-opens .sym-assoc = {!!}
  -- c-opens .identityÀ° = {!!}
  -- c-opens .identity ≥ = {!!}
  -- c-opens .identity¬≤ = {!!}
  -- c-opens .equiv = {!!}
  -- c-opens .‚àò-resp-‚âà = {!!}

--   ùîâ‚Ä≤ : (Œò : Coeff ^ n) (Œò‚Ä≤ : Coeff ^ m) ‚Üí Pred (‚Ñù ^ n ‚Üí ‚Ñù ^ m) ‚Ñì‚ÇÄ
--   ùîâ‚Ä≤ Œò Œò‚Ä≤ f = (i : Fin _) ‚Üí œÄ[ i ] ‚àò f ‚àà ùîâ Œò (œÄ[ i ] Œò‚Ä≤)

--   field
--     ùîâ-const : (r : ‚Ñù) ‚Üí const r ‚àà ùîâ [] N

--     ùîâ-proj : id ‚àà ùîâ‚Ä≤ Œò Œò

--     ùîâ-cond :
--       (Œª Œ∏ ‚Üí if (Œ∏ ‚ÇÄ ‚â≤? 0·¥ø) then Œ∏ ‚ÇÅ else Œ∏ ‚ÇÇ)
--         ‚àà ùîâ (P ‚à∑ c ‚à∑ c ‚à∑ []) c

--     ùîâ-compose :
--       {g : ‚Ñù ^ n ‚Üí ‚Ñù ^ m}
--       {f : ‚Ñù ^ m ‚Üí ‚Ñù}
--       (_ : g ‚àà ùîâ‚Ä≤ Œò Œò‚Ä≤)
--       (_ : f ‚àà ùîâ Œò‚Ä≤ c)
--       ‚Üí -----------------
--        f ‚àò g ‚àà ùîâ Œò c

--     ùîâ-sub :
--       {f : ‚Ñù ^ n ‚Üí ‚Ñù}
--       (_ : ‚àÄ i ‚Üí œÄ[ i ] Œò ‚â§‚Ä≤ œÄ[ i ] Œò‚Ä≤)
--       (_ : c‚Ä≤ ‚â§‚Ä≤ c)
--       ‚Üí -------------------------------
--       f ‚àà ùîâ Œò c ‚Üí f ‚àà ùîâ Œò‚Ä≤ c‚Ä≤

--     ùîâ-promote :
--       {f : ‚Ñù ^ n ‚Üí ‚Ñù}
--       (_ : ‚àÄ i ‚Üí c‚Ä≤ ‚â§‚Ä≤ œÄ[ i ] Œò)
--       ‚Üí ------------------------
--       f ‚àà ùîâ Œò c ‚Üí f ‚àà ùîâ Œò c‚Ä≤


-- module ùîâ-lemmas (Ass : ùîâ-assumptions) where
--   open ùîâ-assumptions Ass

--   ùîâ-const‚Ä≤ : (Œ∏ : ‚Ñù ^ n) ‚Üí const Œ∏ ‚àà ùîâ‚Ä≤ Œò Œò‚Ä≤
--   ùîâ-const‚Ä≤ Œ∏ i =
--     ùîâ-compose {Œò‚Ä≤ = Œª ()} {g = Œª _ ()} (Œª ()) $
--     ùîâ-sub (Œª ()) (‚â§-1 $ to‚Ñï<n _) $
--     ùîâ-const _

--   ùîâ-compose‚Ä≤ :
--     {g : ‚Ñù ^ n ‚Üí ‚Ñù ^ m}
--     {f : ‚Ñù ^ m ‚Üí ‚Ñù ^ k}
--     (_ : g ‚àà ùîâ‚Ä≤ Œò Œò‚Ä≤)
--     (_ : f ‚àà ùîâ‚Ä≤ Œò‚Ä≤ Œò‚Ä≥)
--     ‚Üí -----------------
--      f ‚àò g ‚àà ùîâ‚Ä≤ Œò Œò‚Ä≥
--   ùîâ-compose‚Ä≤ Hg Hf = ùîâ-compose Hg ‚àò Hf

--   ùîâ-++ :
--     {f : ‚Ñù ^ n ‚Üí ‚Ñù ^ m}
--     {g : ‚Ñù ^ n ‚Üí ‚Ñù ^ k}
--     (_ : f ‚àà ùîâ‚Ä≤ Œò Œò‚Ä≤)
--     (_ : g ‚àà ùîâ‚Ä≤ Œò Œò‚Ä≥)
--     ‚Üí ----------------------------------
--     (Œª Œ∏ ‚Üí f Œ∏ ++ g Œ∏) ‚àà ùîâ‚Ä≤ Œò (Œò‚Ä≤ ++ Œò‚Ä≥)
--   ùîâ-++ {m = m} Hf Hg i with splitAt m i
--   ... | Œπ‚ÇÅ i = Hf i
--   ... | Œπ‚ÇÇ i = Hg i

--   ùîâ-‚à∑ :
--     {f : ‚Ñù ^ n ‚Üí ‚Ñù}
--     {g : ‚Ñù ^ n ‚Üí ‚Ñù ^ m}
--     (_ : f ‚àà ùîâ Œò c)
--     (_ : g ‚àà ùîâ‚Ä≤ Œò Œò‚Ä≤)
--     ‚Üí -------------------------------
--     (Œª Œ∏ ‚Üí f Œ∏ ‚à∑ g Œ∏) ‚àà ùîâ‚Ä≤ Œò (c ‚à∑ Œò‚Ä≤)
--   ùîâ-‚à∑ Hf Hg zero = Hf
--   ùîâ-‚à∑ Hf Hg (succ i) = Hg i

--   ùîâ-papply :
--     {f : ‚Ñù ^ (n + m) ‚Üí ‚Ñù}
--     (_ : f ‚àà ùîâ (Œò ++ Œò‚Ä≤) c)
--     (Œ∏‚Ä≤ : ‚Ñù ^ m)
--     ‚Üí -------------------------
--     (Œª Œ∏ ‚Üí f (Œ∏ ++ Œ∏‚Ä≤)) ‚àà ùîâ Œò c
--   ùîâ-papply Hf Œ∏ =
--     ùîâ-compose (ùîâ-++ ùîâ-proj (ùîâ-const‚Ä≤ _)) Hf

--   ùîâ-proj‚Ä≤ : (H‚äÜ : Œò ‚äÜ Œò‚Ä≤) ‚Üí proj-‚äÜ (H‚äÜ .œÄ‚ÇÅ) ‚àà ùîâ‚Ä≤ Œò‚Ä≤ Œò
--   ùîâ-proj‚Ä≤ {Œò‚Ä≤ = Œò‚Ä≤} H‚äÜ i rewrite H‚äÜ .œÄ‚ÇÇ i = ùîâ-proj _

--   ùîâ-weaken :
--     {f : ‚Ñù ^ n ‚Üí ‚Ñù}
--     (H‚äÜ : Œò ‚äÜ Œò‚Ä≤)
--     ‚Üí ---------------------------------------
--     f ‚àà ùîâ Œò c ‚Üí f ‚àò proj-‚äÜ (H‚äÜ .œÄ‚ÇÅ) ‚àà ùîâ Œò‚Ä≤ c
--   ùîâ-weaken H‚äÜ Hf = ùîâ-compose (ùîâ-proj‚Ä≤ H‚äÜ) Hf


-- record DenotAssumptions : Set‚ÇÅ where
--   field
--     ùîâ-ass : ùîâ-assumptions

--   open ùîâ-assumptions ùîâ-ass public
--   open ùîâ-lemmas ùîâ-ass public

--   field
--     ‚ü¶_‚üß·¥æ : (œï : Prim) ‚Üí ‚Ñù ^ PrimAr œï ‚Üí ‚Ñù

--     ùîâ-prim :
--       {Œò : Coeff ^ PrimAr œï}
--       (_ : PrimTy œï ‚â° (Œò , c))
--       ‚Üí ----------------------
--       ‚ü¶ œï ‚üß·¥æ ‚àà ùîâ Œò c

--     ùê∑ :
--       (f : ‚Ñù ^ n ‚Üí ‚Ñù)
--       (_ : ‚àÄ i ‚Üí œÄ[ i ] Œò ‚â§‚Ä≤ P)
--       (_ : f ‚àà ùîâ Œò c)
--       ‚Üí -----------------------
--       ‚Ñù ^ (n + n) ‚Üí ‚Ñù

--     ùîâ-diff :
--       (f : ‚Ñù ^ m ‚Üí ‚Ñù ^ n ‚Üí ‚Ñù)
--       (H‚â§ : ‚àÄ i ‚Üí œÄ[ i ] Œò ‚â§‚Ä≤ P)
--       (Hf‚ÇÄ : (Œª Œ∏ ‚Üí f (take _ Œ∏) (drop _ Œ∏)) ‚àà ùîâ (Œò‚Ä≤ ++ Œò) c)
--       (Hf‚ÇÅ : (Œ∏ : ‚Ñù ^ m) ‚Üí f Œ∏ ‚àà ùîâ Œò c)
--       -- Note: Hf‚ÇÄ actually implies Hf‚ÇÅ, but this formulation is easier to work with
--       -- than the one deriving Hf‚ÇÅ inside the proposition statement.
--       ‚Üí -------------------------------------------------------------------------------
--       (Œª Œ∏xv ‚Üí ùê∑ _ H‚â§ (Hf‚ÇÅ (take m Œ∏xv)) (drop m Œ∏xv)) ‚àà ùîâ (Œò‚Ä≤ ++ Œò ++ replicate n A) c

--     ùîâ-diff‚Ä≤ :
--       (f : ‚Ñù ^ n ‚Üí ‚Ñù)
--       (H‚â§ : ‚àÄ i ‚Üí œÄ[ i ] Œò ‚â§‚Ä≤ P)
--       (Hf : f ‚àà ùîâ Œò c)
--       ‚Üí ---------------------------------
--       ùê∑ _ H‚â§ Hf ‚àà ùîâ (Œò ++ replicate n A) c


-- module Denotations (Ass : DenotAssumptions) where
--   open DenotAssumptions Ass

--   record S : Set‚ÇÅ where
--     field
--       dim : ‚Ñï
--       Œò‚ü®_‚ü© : Coeff ^ dim
--       elems : Pred (‚Ñù ^ dim) ‚Ñì‚ÇÄ

--     ‚à£_‚à£‚Çõ : Set
--     ‚à£_‚à£‚Çõ = ‚àÉ elems

--   open S

--   S-is-hom : (s‚ÇÅ s‚ÇÇ : S) ‚Üí Pred (‚à£ s‚ÇÅ ‚à£‚Çõ ‚Üí ‚à£ s‚ÇÇ ‚à£‚Çõ) ‚Ñì‚ÇÄ
--   S-is-hom s‚ÇÅ s‚ÇÇ f =
--     {n : ‚Ñï} {Œò : Coeff ^ n}
--     {g : ‚Ñù ^ n ‚Üí ‚à£ s‚ÇÅ ‚à£‚Çõ}
--     ‚Üí -----------------------------------------------
--     œÄ‚ÇÅ ‚àò g ‚àà ùîâ‚Ä≤ Œò Œò‚ü® s‚ÇÅ ‚ü© ‚Üí œÄ‚ÇÅ ‚àò f ‚àò g ‚àà ùîâ‚Ä≤ Œò Œò‚ü® s‚ÇÇ ‚ü©

--   S-is-hom : (s‚ÇÅ s‚ÇÇ : S) ‚Üí Pred (‚à£ s‚ÇÅ ‚à£‚Çõ ‚Üí ‚à£ s‚ÇÇ ‚à£‚Çõ) ‚Ñì‚ÇÄ
--   S-is-hom s‚ÇÅ s‚ÇÇ f =
--     {n : ‚Ñï} {Œò : Coeff ^ n}
--     {g : ‚à£ s‚ÇÅ ‚à£‚Çõ ‚Üí ‚Ñù ^ n}
--     ‚Üí -----------------------------------------------
--     œÄ‚ÇÅ ‚àò g ‚àà ùîâ‚Ä≤ Œò‚ü® s‚ÇÅ ‚ü© Œò ‚Üí œÄ‚ÇÅ ‚àò f ‚àò g ‚àà ùîâ‚Ä≤ Œò‚ü® s‚ÇÇ ‚ü© Œò

--   record S-hom (s‚ÇÅ s‚ÇÇ : S) : Set where
--     constructor mkS-hom
--     field
--       to : ‚à£ s‚ÇÅ ‚à£‚Çõ ‚Üí ‚à£ s‚ÇÇ ‚à£‚Çõ
--       is-hom : to ‚àà S-is-hom s‚ÇÅ s‚ÇÇ

--   open S-hom

--   private
--     variable
--       s s‚ÇÅ s‚ÇÇ s‚ÇÉ : S

--   S-id : S-hom s s
--   S-id .to = id
--   S-id .is-hom = id

--   _S‚àò_ : S-hom s‚ÇÇ s‚ÇÉ ‚Üí S-hom s‚ÇÅ s‚ÇÇ ‚Üí S-hom s‚ÇÅ s‚ÇÉ
--   (f S‚àò g) .to = f .to ‚àò g .to
--   (f S‚àò g) .is-hom = f .is-hom ‚àò g .is-hom

--   record S-covering (s : S) : Set‚ÇÅ where
--     field
--       count : ‚Ñï
--       parts : (i : Fin count) ‚Üí Pred (‚Ñù ^ s .dim) ‚Ñì‚ÇÄ
--       is-cover : (x : ‚à£ s ‚à£‚Çõ) ‚Üí ‚àÉ Œª i ‚Üí œÄ‚ÇÅ x ‚àà parts i

--   open S-covering

--   S-restrict : (s : S) ‚Üí Pred (‚Ñù ^ s .dim) ‚Ñì‚ÇÄ ‚Üí S
--   S-restrict s p .dim = s .dim
--   Œò‚ü® S-restrict s p ‚ü© = Œò‚ü® s ‚ü©
--   S-restrict s p .elems x = x ‚àà s .elems √ó x ‚àà p

--   S-inject : (s : S) {p : Pred (‚Ñù ^ s .dim) ‚Ñì‚ÇÄ} ‚Üí ‚à£ S-restrict s p ‚à£‚Çõ ‚Üí ‚à£ s ‚à£‚Çõ
--   S-inject s (x , H‚àà , _) = x , H‚àà

--   Sùüô : S
--   Sùüô .dim = 0
--   Œò‚ü® Sùüô ‚ü© ()
--   Sùüô .elems _ = ùüô

--   Sùüô-terminal : S-hom s Sùüô
--   Sùüô-terminal = {!!}

--   S‚Ñù : (c : Coeff) ‚Üí S
--   S‚Ñù c .dim = 1
--   Œò‚ü® S‚Ñù c ‚ü© = const c
--   S‚Ñù c .elems _ = ùüô

--   S-const : ‚Ñù ‚Üí S-hom Sùüô (S‚Ñù c)
--   S-const r = {!!}

--   -- Our semantic domain, inspired by the paper
--   -- Concrete Categories for Higher-order Recursion (Matache et al.).
--   --
--   -- In terms of that paper, the idea is that our domains are concrete
--   -- sheaves over a site S whose objects are vectors of coeffects, and
--   -- whose morphisms Œò ‚Üí Œò‚Ä≤ are functions (f : ‚Ñù ^ n ‚Üí ‚Ñù ^ m) ‚àà ùîâ‚Ä≤ Œò Œò‚Ä≤.
--   -- TODO: What is the coverage on the site?  Can it simply be trivial?
--   -- Should the objects be _subsets_ of ‚Ñù ^ n tagged with vectors of
--   -- coeffects instead, and the coverage be the inclusion functions?
--   --
--   -- The semantics is also closely related to our previous logical
--   -- relations arguments, in that we can view each domain as a set
--   -- equipped with a parameterized predicate describing the
--   -- well-behaved maps into that domain.

--   record ùîá : Set‚ÇÅ where
--     constructor mkùîá
--     field
--       ‚à£_‚à£ : Set
--       R[_,_] : (s : S) ‚Üí Pred (‚à£ s ‚à£‚Çõ ‚Üí ‚à£_‚à£) ‚Ñì‚ÇÄ

--       R[,]-const : (x : ‚à£_‚à£) ‚Üí const x ‚àà R[_,_] s

--       R[,]-compose :
--         {œï : ‚à£ s‚ÇÇ ‚à£‚Çõ ‚Üí ‚à£_‚à£}
--         (f : S-hom s‚ÇÅ s‚ÇÇ)
--         ‚Üí -----------------------------------
--         œï ‚àà R[_,_] s‚ÇÇ ‚Üí œï ‚àò f .to ‚àà R[_,_] s‚ÇÅ

--       R[,]-cover :
--         {g : ‚à£ s ‚à£‚Çõ ‚Üí ‚à£_‚à£}
--         (c : S-covering s)
--         (_ : ‚àÄ i ‚Üí g ‚àò S-inject s ‚àà R[_,_] (S-restrict s (c .parts i)))
--         ‚Üí -------------------------------------------------------------
--         g ‚àà R[_,_] s

--   open ùîá

--   -- Conjecture: the previous semantics and this one are equivalent
--   -- under the following correspondence:

--   -- module Correspondence where
--   --   fwd :
--   --     (p : {n : ‚Ñï} ‚Üí Pred (Coeff ^ n) ‚Ñì‚ÇÄ)
--   --     (pr : {m : ‚Ñï} {Œò : Coeff ^ m} ‚Üí p Œò ‚Üí ‚Ñù ^ m ‚Üí p [])
--   --     ‚Üí ---------------------------------------------------
--   --     ‚àÉ Œª X ‚Üí {m : ‚Ñï} ‚Üí Coeff ^ m ‚Üí Pred (‚Ñù ^ m ‚Üí X) ‚Ñì‚ÇÄ
--   --   fwd p pr = p [] , Œª Œò f ‚Üí ‚àë f‚Ä≤ ‚à∂ p Œò , pr f‚Ä≤ ‚âó f

--   --   bwd :
--   --     {X : Set}
--   --     (_ : {m : ‚Ñï} ‚Üí Coeff ^ m ‚Üí Pred (‚Ñù ^ m ‚Üí X) ‚Ñì‚ÇÄ)
--   --     ‚Üí -----------------------------------------------
--   --     {n : ‚Ñï} ‚Üí Pred (Coeff ^ n) ‚Ñì‚ÇÄ
--   --   bwd Hx = Œª Œò ‚Üí ‚àÉ (Hx Œò)

--     -- Note that this is not a proper equivalence as the forward
--     -- direction requires a projection function from p Œò
--     -- to ‚Ñù ^ m ‚Üí p [].  Attempting to take this into account in the
--     -- reverse direction requires adding more hypotheses stating that
--     -- constant functions are plots, and furthermore that they are the
--     -- only plots of Hx [].  This gets a bit intricate, but I believe
--     -- the required hypotheses should hold for our case.


--   ùîá-is-hom : (D‚ÇÅ D‚ÇÇ : ùîá) ‚Üí Pred (‚à£ D‚ÇÅ ‚à£ ‚Üí ‚à£ D‚ÇÇ ‚à£) ‚Ñì‚ÇÅ
--   ùîá-is-hom D‚ÇÅ D‚ÇÇ f =
--     {s : S}
--     ‚Üí ------------------------------------------
--     ‚àÄ œï ‚Üí œï ‚àà R[ D‚ÇÅ , s ] ‚Üí f ‚àò œï ‚àà R[ D‚ÇÇ , s ]

--   record ùîá-hom (D‚ÇÅ D‚ÇÇ : ùîá) : Set‚ÇÅ where
--     field
--       to : ‚à£ D‚ÇÅ ‚à£ ‚Üí ‚à£ D‚ÇÇ ‚à£
--       is-hom : ùîá-is-hom D‚ÇÅ D‚ÇÇ to

--   open ùîá-hom

--   private
--     variable
--       D D‚ÇÅ D‚ÇÇ D‚ÇÉ D‚ÇÑ : ùîá

--   ùîá-id : ùîá-hom D D
--   ùîá-id .to z = z
--   ùîá-id .is-hom _ Hœï = Hœï

--   infixr 4 _ùîá‚àò_
--   _ùîá‚àò_ : ùîá-hom D‚ÇÇ D‚ÇÉ ‚Üí ùîá-hom D‚ÇÅ D‚ÇÇ ‚Üí ùîá-hom D‚ÇÅ D‚ÇÉ
--   (f ùîá‚àò g) .to = f .to ‚àò g .to
--   (f ùîá‚àò g) .is-hom _ = f .is-hom _ ‚àò g .is-hom _

--   ùîáùüô : ùîá
--   ùîáùüô = mkùîá ùüô (Œª _ _ ‚Üí ùüô) (Œª _ ‚Üí tt) (Œª _ _ ‚Üí tt) Œª _ _ ‚Üí tt

--   ùîáùüô-terminal : ùîá-hom D ùîáùüô
--   ùîáùüô-terminal .to _ = tt
--   ùîáùüô-terminal .is-hom _ _ = tt

--   ùîá‚Ñù : Coeff ‚Üí ùîá
--   ùîá‚Ñù c =
--     mkùîá ‚Ñù
--       (Œª s ‚Üí {!!})
--       {!!} -- ùîâ-const‚Ä≤ {Œò‚Ä≤ = c ‚à∑ []} (r ‚à∑ []) ‚ÇÄ)
--       {!!} -- (Œª Hf Hg ‚Üí ùîâ-compose (Hf .is-hom) Hg)
--       {!!}

--   -- ùîá-const : ‚Ñù ‚Üí ùîá-hom ùîáùüô (ùîá‚Ñù c)
--   -- ùîá-const r .to _ = r
--   -- ùîá-const r .is-hom _ _ = R[,]-const (ùîá‚Ñù _) r

--   -- ùîá‚Ñù‚Ä≤ : Coeff ^ n ‚Üí ùîá
--   -- ùîá‚Ñù‚Ä≤ Œò‚Ä≤ =
--   --   mkùîá (‚Ñù ^ _)
--   --     (Œª s ‚Üí ùîâ‚Ä≤ Œò‚ü® s ‚ü© Œò‚Ä≤)
--   --     ùîâ-const‚Ä≤
--   --     (Œª Hf Hg ‚Üí ùîâ-compose‚Ä≤ (Hf .is-hom) Hg)

--   -- _ùîá√ó_ : ùîá ‚Üí ùîá ‚Üí ùîá
--   -- ‚à£ D‚ÇÅ ùîá√ó D‚ÇÇ ‚à£ = ‚à£ D‚ÇÅ ‚à£ √ó ‚à£ D‚ÇÇ ‚à£
--   -- R[ D‚ÇÅ ùîá√ó D‚ÇÇ , s ] f = œÄ‚ÇÅ ‚àò f ‚àà R[ D‚ÇÅ , s ] √ó œÄ‚ÇÇ ‚àò f ‚àà R[ D‚ÇÇ , s ]
--   -- R[,]-const (D‚ÇÅ ùîá√ó D‚ÇÇ) (x‚ÇÅ , x‚ÇÇ) = R[,]-const D‚ÇÅ x‚ÇÅ , R[,]-const D‚ÇÇ x‚ÇÇ
--   -- R[,]-compose (D‚ÇÅ ùîá√ó D‚ÇÇ) Hf (Hœï‚ÇÅ , Hœï‚ÇÇ) =
--   --   R[,]-compose D‚ÇÅ Hf Hœï‚ÇÅ , R[,]-compose D‚ÇÇ Hf Hœï‚ÇÇ

--   -- ùîáœÄ‚ÇÅ : ùîá-hom (D‚ÇÅ ùîá√ó D‚ÇÇ) D‚ÇÅ
--   -- ùîáœÄ‚ÇÅ .to = œÄ‚ÇÅ
--   -- ùîáœÄ‚ÇÅ .is-hom _ Hœï = Hœï .œÄ‚ÇÅ

--   -- ùîáœÄ‚ÇÇ : ùîá-hom (D‚ÇÅ ùîá√ó D‚ÇÇ) D‚ÇÇ
--   -- ùîáœÄ‚ÇÇ .to = œÄ‚ÇÇ
--   -- ùîáœÄ‚ÇÇ .is-hom _ Hœï = Hœï .œÄ‚ÇÇ

--   -- ùîá‚ü®_,_‚ü© : ùîá-hom D D‚ÇÅ ‚Üí ùîá-hom D D‚ÇÇ ‚Üí ùîá-hom D (D‚ÇÅ ùîá√ó D‚ÇÇ)
--   -- ùîá‚ü® d‚ÇÅ , d‚ÇÇ ‚ü© .to z = d‚ÇÅ .to z , d‚ÇÇ .to z
--   -- ùîá‚ü® d‚ÇÅ , d‚ÇÇ ‚ü© .is-hom œï Hœï = d‚ÇÅ .is-hom œï Hœï , d‚ÇÇ .is-hom œï Hœï

--   -- ùîá-map : ùîá-hom D‚ÇÅ D‚ÇÉ ‚Üí ùîá-hom D‚ÇÇ D‚ÇÑ ‚Üí ùîá-hom (D‚ÇÅ ùîá√ó D‚ÇÇ) (D‚ÇÉ ùîá√ó D‚ÇÑ)
--   -- ùîá-map f g .to (x , y) = f .to x , g .to y
--   -- ùîá-map f g .is-hom œï (Hœï‚ÇÅ , Hœï‚ÇÇ) = f .is-hom (œÄ‚ÇÅ ‚àò œï) Hœï‚ÇÅ , g .is-hom (œÄ‚ÇÇ ‚àò œï) Hœï‚ÇÇ

--   -- ùîá-assoc : (D‚ÇÅ D‚ÇÇ D‚ÇÉ : ùîá) ‚Üí ùîá-hom ((D‚ÇÅ ùîá√ó D‚ÇÇ) ùîá√ó D‚ÇÉ) (D‚ÇÅ ùîá√ó (D‚ÇÇ ùîá√ó D‚ÇÉ))
--   -- ùîá-assoc D‚ÇÅ D‚ÇÇ D‚ÇÉ .to ((x , y) , z) = x , y , z
--   -- ùîá-assoc D‚ÇÅ D‚ÇÇ D‚ÇÉ .is-hom œï ((Hœï‚ÇÅ , Hœï‚ÇÇ) , Hœï‚ÇÉ) = Hœï‚ÇÅ , Hœï‚ÇÇ , Hœï‚ÇÉ

--   -- ùîá‚àè : Vector ùîá n ‚Üí ùîá
--   -- ‚à£ ùîá‚àè Ds ‚à£ = (i : Fin _) ‚Üí ‚à£ Ds i ‚à£
--   -- R[ ùîá‚àè Ds , s ] f = (i : Fin _) ‚Üí (Œª Œ∏ ‚Üí f Œ∏ i) ‚àà R[ Ds i , s ]
--   -- R[,]-const (ùîá‚àè Ds) x i = R[,]-const (Ds i) (x i)
--   -- R[,]-compose (ùîá‚àè Ds) Hf Hœïs i = R[,]-compose (Ds i) Hf (Hœïs i)

--   -- -- Note: ‚Ñù ^ n ‚â° ‚àè·µ¢‚Åø ‚Ñù holds definitionally.
--   -- _ : ùîá‚àè (ùîá‚Ñù ‚àò Œò) ‚â° ùîá‚Ñù‚Ä≤ Œò
--   -- _ = refl

--   -- ùîáœÄ[_] : {Ds : Vector ùîá n} ‚Üí (i : Fin n) ‚Üí ùîá-hom (ùîá‚àè Ds) (œÄ[ i ] Ds)
--   -- ùîáœÄ[ i ] .to ds = ds i
--   -- ùîáœÄ[ i ] .is-hom _ Hœï = Hœï i

--   -- ùîá‚àè‚ü®_‚ü© : {Ds : Vector ùîá n} ‚Üí ((i : Fin n) ‚Üí ùîá-hom D (Ds i)) ‚Üí ùîá-hom D (ùîá‚àè Ds)
--   -- ùîá‚àè‚ü® ds ‚ü© .to z i = ds i .to z
--   -- ùîá‚àè‚ü® ds ‚ü© .is-hom œï Hœï i = ds i .is-hom œï Hœï

--   -- infixr 4 _ùîá‚áí_
--   -- _ùîá‚áí_ : ùîá ‚Üí ùîá ‚Üí ùîá
--   -- ‚à£ D‚ÇÅ ùîá‚áí D‚ÇÇ ‚à£ = ùîá-hom D‚ÇÅ D‚ÇÇ
--   -- R[ D‚ÇÅ ùîá‚áí D‚ÇÇ , s ] f =
--   --   (Œª (Œ∏ , d) ‚Üí f Œ∏ .to d) ‚àà ùîá-is-hom (ùîá‚Ñù‚Ä≤ Œò‚ü® s ‚ü© ùîá√ó D‚ÇÅ) D‚ÇÇ
--   -- R[,]-const (D‚ÇÅ ùîá‚áí D‚ÇÇ) f œï Hœï = f .is-hom (œÄ‚ÇÇ ‚àò œï) (Hœï .œÄ‚ÇÇ)
--   -- R[,]-compose (D‚ÇÅ ùîá‚áí D‚ÇÇ) Hf Hœï‚ÇÄ œï Hœï =
--   --   Hœï‚ÇÄ _ (ùîâ-compose‚Ä≤ (Hœï .œÄ‚ÇÅ) (Hf .is-hom) , Hœï .œÄ‚ÇÇ)

--   -- ùîá-eval : ùîá-hom ((D‚ÇÅ ùîá‚áí D‚ÇÇ) ùîá√ó D‚ÇÅ) D‚ÇÇ
--   -- ùîá-eval .to (f , x) = f .to x
--   -- ùîá-eval .is-hom œï (Hœï‚ÇÅ , Hœï‚ÇÇ) = Hœï‚ÇÅ _ (ùîâ-proj , Hœï‚ÇÇ)

--   -- ùîá-curry : ùîá-hom (D ùîá√ó D‚ÇÅ) D‚ÇÇ ‚Üí ùîá-hom D (D‚ÇÅ ùîá‚áí D‚ÇÇ)
--   -- ùîá-curry f .to x .to y = f .to (x , y)
--   -- ùîá-curry {D = D} f .to x .is-hom œï Hœï =
--   --   f .is-hom _ (R[,]-const D x , Hœï)
--   -- ùîá-curry {D = D} f .is-hom œï Hœï œï‚Ä≤ (Hœï‚Ä≤‚ÇÅ , Hœï‚Ä≤‚ÇÇ) =
--   --   f .is-hom _ (R[,]-compose D (mkS-hom _ Hœï‚Ä≤‚ÇÅ) Hœï , Hœï‚Ä≤‚ÇÇ)

--   -- ùîá-curry-hom : ùîá-hom ((D ùîá√ó D‚ÇÅ) ùîá‚áí D‚ÇÇ) (D ùîá‚áí D‚ÇÅ ùîá‚áí D‚ÇÇ)
--   -- ùîá-curry-hom {D = D} {D‚ÇÅ} {D‚ÇÇ} =
--   --   ùîá-curry (ùîá-curry (ùîá-eval ùîá‚àò ùîá-assoc (D ùîá√ó D‚ÇÅ ùîá‚áí D‚ÇÇ) D D‚ÇÅ))

--   -- ùîá-uncurry : ùîá-hom D (D‚ÇÅ ùîá‚áí D‚ÇÇ) ‚Üí ùîá-hom (D ùîá√ó D‚ÇÅ) D‚ÇÇ
--   -- ùîá-uncurry {D‚ÇÅ = D‚ÇÅ} f = ùîá-eval ùîá‚àò ùîá-map {D‚ÇÇ = D‚ÇÅ} f ùîá-id

--   -- _ùîá‚äé_ : ùîá ‚Üí ùîá ‚Üí ùîá
--   -- ‚à£ D‚ÇÅ ùîá‚äé D‚ÇÇ ‚à£ = ‚à£ D‚ÇÅ ‚à£ ‚äé ‚à£ D‚ÇÇ ‚à£
--   -- R[_,_] (D‚ÇÅ ùîá‚äé D‚ÇÇ) s f =
--   --   ({s‚Ä≤ : S} (f‚ÇÅ : S-hom s‚Ä≤ s) (g : ‚à£ s‚Ä≤ ‚à£‚Çõ ‚Üí ‚à£ D‚ÇÅ ‚à£)
--   --    (_ : f ‚àò f‚ÇÅ .to ‚âó Œπ‚ÇÅ ‚àò g)
--   --    ‚Üí -----------------------------------------------
--   --    g ‚àà R[ D‚ÇÅ , s‚Ä≤ ])
--   --   √ó
--   --   ({s‚Ä≤ : S} (f‚ÇÇ : S-hom s‚Ä≤ s) (g : ‚à£ s‚Ä≤ ‚à£‚Çõ ‚Üí ‚à£ D‚ÇÇ ‚à£)
--   --    (_ : f ‚àò f‚ÇÇ .to ‚âó Œπ‚ÇÇ ‚àò g)
--   --    ‚Üí -----------------------------------------------
--   --    g ‚àà R[ D‚ÇÇ , s‚Ä≤ ])
--   -- R[,]-const (D‚ÇÅ ùîá‚äé D‚ÇÇ) x = Hl , Hr
--   --   where
--   --     Hl :
--   --       {s‚Ä≤ : S} (f‚ÇÅ : S-hom s‚Ä≤ s) (g : ‚à£ s‚Ä≤ ‚à£‚Çõ ‚Üí ‚à£ D‚ÇÅ ‚à£)
--   --       (_ : const x ‚àò f‚ÇÅ .to ‚âó Œπ‚ÇÅ ‚àò g)
--   --       ‚Üí ------------------------------------------------
--   --       g ‚àà R[ D‚ÇÅ , s‚Ä≤ ]
--   --     Hl f‚ÇÅ g Heq with refl ‚Üê Heq (const 0·¥ø) =
--   --       subst R[ D‚ÇÅ , _ ] (funext $ inj‚ÇÅ-injective ‚àò Heq) $ R[,]-const D‚ÇÅ _
--   --     Hr :
--   --       {s‚Ä≤ : S} (f‚ÇÇ : S-hom s‚Ä≤ s) (g : ‚à£ s‚Ä≤ ‚à£‚Çõ ‚Üí ‚à£ D‚ÇÇ ‚à£)
--   --       (_ : const x ‚àò f‚ÇÇ .to ‚âó Œπ‚ÇÇ ‚àò g)
--   --       ‚Üí ------------------------------------------------
--   --       g ‚àà R[ D‚ÇÇ , s‚Ä≤ ]
--   --     Hr f‚ÇÇ g Heq with refl ‚Üê Heq (const 0·¥ø) =
--   --       subst R[ D‚ÇÇ , _ ] (funext $ inj‚ÇÇ-injective ‚àò Heq) $ R[,]-const D‚ÇÇ _
--   -- R[,]-compose (D‚ÇÅ ùîá‚äé D‚ÇÇ) {œï = œï} f (Hœï‚ÇÅ , Hœï‚ÇÇ) =
--   --   Œª where
--   --     .œÄ‚ÇÅ f‚ÇÅ ‚Üí Hœï‚ÇÅ (f S‚àò f‚ÇÅ)
--   --     .œÄ‚ÇÇ f‚ÇÇ ‚Üí Hœï‚ÇÇ (f S‚àò f‚ÇÇ)

--   -- ùîá-Œπ‚ÇÅ : ùîá-hom D D‚ÇÅ ‚Üí ùîá-hom D (D‚ÇÅ ùîá‚äé D‚ÇÇ)
--   -- ùîá-Œπ‚ÇÅ f .to = Œπ‚ÇÅ ‚àò f .to
--   -- ùîá-Œπ‚ÇÅ {D = D} {D‚ÇÅ} {D‚ÇÇ} f .is-hom œï Hœï = Œª where
--   --   .œÄ‚ÇÅ f‚ÇÅ g Heq ‚Üí
--   --     subst R[ D‚ÇÅ , _ ] (funext $ inj‚ÇÅ-injective ‚àò Heq) $
--   --       f .is-hom _ (R[,]-compose D f‚ÇÅ Hœï)
--   --   .œÄ‚ÇÇ f‚ÇÇ g Heq ‚Üí case (Heq (const 0·¥ø)) Œª ()

--   -- ùîá-Œπ‚ÇÇ : ùîá-hom D D‚ÇÇ ‚Üí ùîá-hom D (D‚ÇÅ ùîá‚äé D‚ÇÇ)
--   -- ùîá-Œπ‚ÇÇ f .to = Œπ‚ÇÇ ‚àò f .to
--   -- ùîá-Œπ‚ÇÇ {D = D} {D‚ÇÅ} {D‚ÇÇ} f .is-hom œï Hœï = Œª where
--   --   .œÄ‚ÇÅ f‚ÇÅ g Heq ‚Üí case (Heq (const 0·¥ø)) Œª ()
--   --   .œÄ‚ÇÇ f‚ÇÇ g Heq ‚Üí
--   --     subst R[ D‚ÇÅ , _ ] (funext $ inj‚ÇÇ-injective ‚àò Heq) $
--   --       f .is-hom _ (R[,]-compose D f‚ÇÇ Hœï)

--   -- -- This map seems somewhat tricky to define: we might need the
--   -- -- coverage assumption here.
--   -- ùîá[_,_] : ùîá-hom D‚ÇÅ D ‚Üí ùîá-hom D‚ÇÇ D ‚Üí ùîá-hom (D‚ÇÅ ùîá‚äé D‚ÇÇ) D
--   -- ùîá[ f , g ] .to = [ f .to , g .to ]
--   -- ùîá[ f , g ] .is-hom œï (Hœï‚ÇÅ , Hœï‚ÇÇ) = {!!}

--   -- ùîá-prim :
--   --   {Œò : Coeff ^ PrimAr œï}
--   --   (_ : PrimTy œï ‚â° (Œò , c))
--   --   ‚Üí ---------------------
--   --   ùîá-hom (ùîá‚Ñù‚Ä≤ Œò) (ùîá‚Ñù c)
--   -- ùîá-prim {œï = œï} Hœï .to = ‚ü¶ œï ‚üß·¥æ
--   -- ùîá-prim Hœï .is-hom œï‚Ä≤ Hœï‚Ä≤ = ùîâ-compose Hœï‚Ä≤ (ùîâ-prim Hœï)

--   -- ùîá-diff :
--   --   {cs : Coeff ^ n}
--   --   {ds : Coeff ^ m}
--   --   (_ : ‚àÄ i ‚Üí œÄ[ i ] cs ‚â§‚Ä≤ P)
--   --   ‚Üí -----------------------------------------------------------------
--   --   ùîá-hom (ùîá‚Ñù‚Ä≤ cs ùîá‚áí ùîá‚Ñù‚Ä≤ ds) (ùîá‚Ñù‚Ä≤ cs ùîá√ó ùîá‚Ñù‚Ä≤ (replicate n A) ùîá‚áí ùîá‚Ñù‚Ä≤ ds)
--   -- ùîá-diff H‚â§ .to f .to (x , v) i = ùê∑ _ H‚â§ (f .is-hom _ ùîâ-proj i) (x ++ v)
--   -- ùîá-diff H‚â§ .to f .is-hom œï (Hœï‚ÇÅ , Hœï‚ÇÇ) i =
--   --   ùîâ-compose (ùîâ-++ Hœï‚ÇÅ Hœï‚ÇÇ) (ùîâ-diff‚Ä≤ _ H‚â§ (f .is-hom _ ùîâ-proj i))
--   -- ùîá-diff {n = n} {cs = cs} {ds} H‚â§ .is-hom {s‚ÇÅ} œï Hœï {s} œï‚Ä≤ (Hœï‚Ä≤‚ÇÅ , Hœï‚Ä≤‚ÇÇ , Hœï‚Ä≤‚ÇÉ) i =
--   --   let foo :
--   --        (Œª x ‚Üí
--   --          ùê∑ (Œª x‚ÇÅ ‚Üí œï (take _ x) .to x‚ÇÅ i) H‚â§
--   --          (œï (take _ x) .is-hom _ ùîâ-proj i)
--   --          (drop (s‚ÇÅ .dim) x)) ‚àà ùîâ (Œò‚ü® s‚ÇÅ ‚ü© ++ cs ++ replicate n A) (ds i)
--   --       foo =
--   --         ùîâ-diff (Œª x y ‚Üí œï x .to y i) H‚â§
--   --           {!!}
--   --           Œª Œ∏ ‚Üí œï Œ∏ .is-hom _ ùîâ-proj i
--   --   in
--   --   -- ùîâ-compose
--   --   --   -- {f = Œª x ‚Üí
--   --   --   --    ùê∑ (Œª x‚ÇÅ ‚Üí œï (take _ x) .to x‚ÇÅ i) H‚â§
--   --   --   --    (œï (take _ x) .is-hom (Œª z ‚Üí z) ùîâ-proj i)
--   --   --   --    (drop _ x)}
--   --   --   (ùîâ-++ Hœï‚Ä≤‚ÇÅ (ùîâ-++ Hœï‚Ä≤‚ÇÇ Hœï‚Ä≤‚ÇÉ))
--   --     {!!}
--   -- -- ùîá-diff H‚â§ .to f .to x .is-hom œï Hœï i =
--   -- --   ùîâ-compose
--   -- --     (ùîâ-++ (ùîâ-const‚Ä≤ _) Hœï)
--   -- --     (ùîâ-diff‚Ä≤ _ H‚â§ (f .is-hom _ ùîâ-proj i))
--   -- -- ùîá-diff H‚â§ .to f .is-hom œï Hœï œï‚Ä≤ (Hœï‚Ä≤‚ÇÅ , Hœï‚Ä≤‚ÇÇ) i =
--   -- --   ùîâ-compose
--   -- --     (ùîâ-++ (ùîâ-compose‚Ä≤ Hœï‚Ä≤‚ÇÅ Hœï) Hœï‚Ä≤‚ÇÇ)
--   -- --     (ùîâ-diff‚Ä≤ _ H‚â§ (f .is-hom _ ùîâ-proj i))
--   -- -- ùîá-diff H‚â§ .is-hom œï Hœï œï‚Ä≤ (Hœï‚Ä≤‚ÇÅ , Hœï‚Ä≤‚ÇÇ) œï‚Ä≥ (Hœï‚Ä≥‚ÇÅ , Hœï‚Ä≥‚ÇÇ) i = {!!}


--   -- ‚ü¶_‚üß·µÄ : Type ‚Üí ùîá
--   -- ‚ü¶ treal c ‚üß·µÄ = ùîá‚Ñù c
--   -- ‚ü¶ T‚ÇÅ ‚áí[ _ ] T‚ÇÇ ‚üß·µÄ = ‚ü¶ T‚ÇÅ ‚üß·µÄ ùîá‚áí ‚ü¶ T‚ÇÇ ‚üß·µÄ
--   -- ‚ü¶ ttup n Ts ‚üß·µÄ = ùîá‚àè (‚ü¶_‚üß·µÄ ‚àò Ts)
--   -- -- Distributions are interpreted trivially for the time being.
--   -- ‚ü¶ tdist T ‚üß·µÄ = ‚ü¶ T ‚üß·µÄ

--   -- ‚ü¶_‚üß·¥± : TyEnv ‚Üí ùîá
--   -- ‚ü¶ Œµ ‚üß·¥± = ùîáùüô
--   -- ‚ü¶ Œì , _ ‚à∂ T ‚üß·¥± = ‚ü¶ Œì ‚üß·¥± ùîá√ó ‚ü¶ T ‚üß·µÄ


--   -- -- Since we don't have general coproducts currently, it seems
--   -- -- that the denotation of if must be defined for the interpretation
--   -- -- of some type T instead of a general domain, so that we can
--   -- -- proceed by induction.
--   -- if-denot :
--   --   (_ : ùîá-hom D ‚ü¶ T ‚üß·µÄ)
--   --   (_ : ùîá-hom D ‚ü¶ T ‚üß·µÄ)
--   --   ‚Üí ---------------------
--   --   ùîá-hom (ùîá‚Ñù P ùîá√ó D) ‚ü¶ T ‚üß·µÄ
--   -- if-denot {T = treal c} d‚ÇÅ d‚ÇÇ .to (x , Œ≥) = if x ‚â≤? 0·¥ø then d‚ÇÅ .to Œ≥ else d‚ÇÇ .to Œ≥
--   -- if-denot {T = treal c} d‚ÇÅ d‚ÇÇ .is-hom œï (Hœï‚ÇÅ , Hœï‚ÇÇ) =
--   --   ùîâ-compose
--   --     (ùîâ-‚à∑ Hœï‚ÇÅ (ùîâ-‚à∑ (d‚ÇÅ .is-hom _ Hœï‚ÇÇ) (ùîâ-‚à∑ {g = const Œª()} (d‚ÇÇ .is-hom _ Hœï‚ÇÇ) Œª())))
--   --     ùîâ-cond
--   -- if-denot {D = D} {T = T‚ÇÅ ‚áí[ _ ] T‚ÇÇ} d‚ÇÅ d‚ÇÇ =
--   --   ùîá-curry $
--   --     if-denot {T = T‚ÇÇ} (ùîá-uncurry d‚ÇÅ) (ùîá-uncurry d‚ÇÇ) ùîá‚àò ùîá-assoc (ùîá‚Ñù P) D ‚ü¶ T‚ÇÅ ‚üß·µÄ
--   -- if-denot {T = ttup n Ts} d‚ÇÅ d‚ÇÇ =
--   --   let ùîáœÄ[_] = ùîáœÄ[_] {Ds = ‚ü¶_‚üß·µÄ ‚àò Ts} in
--   --   ùîá‚àè‚ü® (Œª i ‚Üí if-denot {T = Ts i} (ùîáœÄ[ i ] ùîá‚àò d‚ÇÅ) (ùîáœÄ[ i ] ùîá‚àò d‚ÇÇ)) ‚ü©
--   -- if-denot {T = tdist T} d‚ÇÅ d‚ÇÇ = if-denot {T = T} d‚ÇÅ d‚ÇÇ


--   -- ‚ü¶_‚üß : Œì ‚ä¢ t :[ e ] T ‚Üí ùîá-hom ‚ü¶ Œì ‚üß·¥± ‚ü¶ T ‚üß·µÄ
--   -- ‚ü¶ tvar {T = T} ‚üß = ùîáœÄ‚ÇÇ {D‚ÇÅ = ùîáùüô} {D‚ÇÇ = ‚ü¶ T ‚üß·µÄ}
--   -- ‚ü¶ tabs (–òi As Habs) ‚üß = ùîá-curry ‚ü¶ Habs (new As) {{unfinite As}} ‚üß
--   -- ‚ü¶ tapp Htype Htype‚ÇÅ ‚üß = ùîá-eval ùîá‚àò ùîá‚ü® ‚ü¶ Htype ‚üß , ‚ü¶ Htype‚ÇÅ ‚üß ‚ü©
--   -- ‚ü¶ tprim {œï = œï} {cs = cs} Hœï _ Htypes ‚üß = ùîá-prim Hœï ùîá‚àò ùîá‚àè‚ü® ‚ü¶_‚üß ‚àò Htypes ‚ü©
--   -- ‚ü¶ treal {r = r} ‚üß = ùîá-const r
--   -- ‚ü¶ ttup _ Htypes ‚üß = ùîá‚àè‚ü® ‚ü¶_‚üß ‚àò Htypes ‚ü©
--   -- ‚ü¶ tproj {Ts = Ts} i Htype ‚üß = ùîáœÄ[_] {Ds = ‚ü¶_‚üß·µÄ ‚àò Ts} i ùîá‚àò ‚ü¶ Htype ‚üß
--   -- ‚ü¶ tif {T = T} Htype Htype‚ÇÅ Htype‚ÇÇ ‚üß =
--   --   if-denot {T = T} ‚ü¶ Htype‚ÇÅ ‚üß ‚ü¶ Htype‚ÇÇ ‚üß ùîá‚àò ùîá‚ü® ‚ü¶ Htype ‚üß , ùîá-id ‚ü©
--   -- ‚ü¶ tdiff {cs = cs} H‚â§ Htype Htype‚ÇÅ ‚üß =
--   --   ùîá-eval {D‚ÇÅ = ùîá‚Ñù‚Ä≤ cs} ùîá‚àò
--   --   ùîá-map {D‚ÇÇ = ùîá‚Ñù‚Ä≤ cs} (ùîá-curry-hom ùîá‚àò ùîá-diff H‚â§) ùîá-id ùîá‚àò
--   --   ùîá‚ü® ‚ü¶ Htype ‚üß , ‚ü¶ Htype‚ÇÅ ‚üß ‚ü©
--   -- ‚ü¶ tsolve Htype Htype‚ÇÅ Htype‚ÇÇ x ‚üß = {!!}
--   -- ‚ü¶ tdist x x‚ÇÅ x‚ÇÇ ‚üß = {!!}
--   -- ‚ü¶ tassume Htype ‚üß = {!!}
--   -- ‚ü¶ tweight Htype ‚üß = {!!}
--   -- ‚ü¶ tinfer Htype x ‚üß = {!!}
--   -- ‚ü¶ tweaken Htype x x‚ÇÅ ‚üß = {!!}
--   -- ‚ü¶ tsub Htype x x‚ÇÅ ‚üß = {!!}
--   -- ‚ü¶ tpromote Htype x ‚üß = {!!}
