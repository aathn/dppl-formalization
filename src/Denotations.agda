open import Lib.Reals

module Denotations (R : Reals‚ÇÄ) where

open Reals R using (‚Ñù; 0·¥ø; _‚â≤?_)

open import Syntax R hiding (n ; m)
open import Typing R

open import Lib.Prelude hiding ([]; length; _‚àà_)
open import Lib.Unfinite
open import Lib.Env hiding ([])

open import Function using (Injection ; _‚Ü£_ ; mk‚Ü£)
open Injection using (to ; injective)
import Function.Properties.Injection as Inj
import Function.Properties.Inverse as Inv
open import Data.Fin using (splitAt)
open import Data.Fin.Properties
  using (suc-injective ; to‚Ñï<n ; +‚Üî‚äé ; ‚Üë ≥-injective ; ‚ÜëÀ°-injective
        ; splitAt-‚ÜëÀ° ; splitAt-‚Üë ≥
        )
open import Data.Sum using () renaming (map to ‚äé-map)
open import Data.Sum.Properties using (inj‚ÇÅ-injective ; inj‚ÇÇ-injective)
open import Data.List.Relation.Unary.All as All using (All ; _‚à∑_)
open import Data.Vec.Functional as V
open import Relation.Unary using (_‚àà_ ; Pred)

private
  variable
    n m k : ‚Ñï
    Œò : Coeff ^ n
    Œò‚Ä≤ : Coeff ^ m
    Œò‚Ä≥ : Coeff ^ k

record ùîâ-assumptions : Set‚ÇÅ where
  field
    ùîâ : (Œò : Coeff ^ n) ‚Üí Coeff ‚Üí Pred (‚Ñù ^ n ‚Üí ‚Ñù) ‚Ñì‚ÇÄ

  ùîâ‚Ä≤ : (Œò : Coeff ^ n) (Œò‚Ä≤ : Coeff ^ m) ‚Üí Pred (‚Ñù ^ n ‚Üí ‚Ñù ^ m) ‚Ñì‚ÇÄ
  ùîâ‚Ä≤ Œò Œò‚Ä≤ f = (i : Fin _) ‚Üí œÄ[ i ] ‚àò f ‚àà ùîâ Œò (œÄ[ i ] Œò‚Ä≤)

  field
    ùîâ-const : (r : ‚Ñù) ‚Üí const r ‚àà ùîâ [] N

    ùîâ-proj : id ‚àà ùîâ‚Ä≤ Œò Œò

    ùîâ-cond :
      (Œª Œ∏ ‚Üí if (Œ∏ ‚ÇÄ ‚â≤? 0·¥ø) then Œ∏ ‚ÇÅ else Œ∏ ‚ÇÇ)
        ‚àà ùîâ (P V.‚à∑ c V.‚à∑ c V.‚à∑ []) c

    ùîâ-compose :
      {g : ‚Ñù ^ n ‚Üí ‚Ñù ^ m}
      {f : ‚Ñù ^ m ‚Üí ‚Ñù}
      (_ : g ‚àà ùîâ‚Ä≤ Œò Œò‚Ä≤)
      (_ : f ‚àà ùîâ Œò‚Ä≤ c)
      ‚Üí -----------------
       f ‚àò g ‚àà ùîâ Œò c

    ùîâ-sub :
      {f : ‚Ñù ^ n ‚Üí ‚Ñù}
      (_ : ‚àÄ i ‚Üí œÄ[ i ] Œò ‚â§‚Ä≤ œÄ[ i ] Œò‚Ä≤)
      (_ : c‚Ä≤ ‚â§‚Ä≤ c)
      ‚Üí -------------------------------
      f ‚àà ùîâ Œò c ‚Üí f ‚àà ùîâ Œò‚Ä≤ c‚Ä≤

    ùîâ-promote :
      {f : ‚Ñù ^ n ‚Üí ‚Ñù}
      (_ : ‚àÄ i ‚Üí c‚Ä≤ ‚â§‚Ä≤ œÄ[ i ] Œò)
      ‚Üí ------------------------
      f ‚àà ùîâ Œò c ‚Üí f ‚àà ùîâ Œò c‚Ä≤


module ùîâ-lemmas (Ass : ùîâ-assumptions) where
  open ùîâ-assumptions Ass

  ùîâ-const‚Ä≤ : (Œ∏ : ‚Ñù ^ n) ‚Üí const Œ∏ ‚àà ùîâ‚Ä≤ Œò Œò‚Ä≤
  ùîâ-const‚Ä≤ Œ∏ i =
    ùîâ-compose {Œò‚Ä≤ = Œª ()} {g = Œª _ ()} (Œª ()) $
    ùîâ-sub (Œª ()) (‚â§-1 $ to‚Ñï<n _) $
    ùîâ-const _

  ùîâ-compose‚Ä≤ :
    {g : ‚Ñù ^ n ‚Üí ‚Ñù ^ m}
    {f : ‚Ñù ^ m ‚Üí ‚Ñù ^ k}
    (_ : g ‚àà ùîâ‚Ä≤ Œò Œò‚Ä≤)
    (_ : f ‚àà ùîâ‚Ä≤ Œò‚Ä≤ Œò‚Ä≥)
    ‚Üí -----------------
     f ‚àò g ‚àà ùîâ‚Ä≤ Œò Œò‚Ä≥
  ùîâ-compose‚Ä≤ Hg Hf = ùîâ-compose Hg ‚àò Hf

  ùîâ-++ :
    {f : ‚Ñù ^ n ‚Üí ‚Ñù ^ m}
    {g : ‚Ñù ^ n ‚Üí ‚Ñù ^ k}
    (_ : f ‚àà ùîâ‚Ä≤ Œò Œò‚Ä≤)
    (_ : g ‚àà ùîâ‚Ä≤ Œò Œò‚Ä≥)
    ‚Üí ----------------------------------
    (Œª Œ∏ ‚Üí f Œ∏ ++ g Œ∏) ‚àà ùîâ‚Ä≤ Œò (Œò‚Ä≤ ++ Œò‚Ä≥)
  ùîâ-++ {m = m} Hf Hg i with splitAt m i
  ... | Œπ‚ÇÅ i = Hf i
  ... | Œπ‚ÇÇ i = Hg i

  ùîâ-papply :
    {f : ‚Ñù ^ (n + m) ‚Üí ‚Ñù}
    (_ : f ‚àà ùîâ (Œò ++ Œò‚Ä≤) c)
    (Œ∏‚Ä≤ : ‚Ñù ^ m)
    ‚Üí -------------------------
    (Œª Œ∏ ‚Üí f (Œ∏ ++ Œ∏‚Ä≤)) ‚àà ùîâ Œò c
  ùîâ-papply Hf Œ∏ =
    ùîâ-compose (ùîâ-++ ùîâ-proj (ùîâ-const‚Ä≤ _)) Hf


record DenotAssumptions : Set‚ÇÅ where
  field
    ùîâ-ass : ùîâ-assumptions

  open ùîâ-assumptions ùîâ-ass public
  open ùîâ-lemmas ùîâ-ass public

  field
    ‚ü¶_‚üß·¥æ : (œï : Prim) ‚Üí ‚Ñù ^ PrimAr œï ‚Üí ‚Ñù

    ùîâ-prim :
      {Œò : Coeff ^ PrimAr œï}
      (_ : PrimTy œï ‚â° (Œò , c))
      ‚Üí ----------------------
      ‚ü¶ œï ‚üß·¥æ ‚àà ùîâ Œò c

    ùê∑ :
      (f : ‚Ñù ^ n ‚Üí ‚Ñù)
      (_ : ‚àÄ i ‚Üí œÄ[ i ] Œò ‚â§‚Ä≤ P)
      (_ : f ‚àà ùîâ Œò c)
      ‚Üí -----------------------
      ‚Ñù ^ (n + n) ‚Üí ‚Ñù

    ùîâ-diff :
      {Œò‚Ä≤ : Coeff ^ m}
      (f : ‚Ñù ^ (n + m) ‚Üí ‚Ñù)
      (H‚â§ : ‚àÄ i ‚Üí œÄ[ i ] Œò ‚â§‚Ä≤ P)
      (Hf : f ‚àà ùîâ (Œò ++ Œò‚Ä≤) c)
      ‚Üí ------------------------------------------------------
      (Œª xvŒ∏ ‚Üí ùê∑ _ H‚â§ (ùîâ-papply Hf (drop _ xvŒ∏)) (take _ xvŒ∏))
        ‚àà ùîâ ((Œò ++ replicate n A) ++ Œò‚Ä≤) c


‚äé-map-injective :
  {A B C D : Set}
  {f : A ‚Üí C}
  {g : B ‚Üí D}
  (_ : injection _‚â°_ _‚â°_ f)
  (_ : injection _‚â°_ _‚â°_ g)
  ‚Üí ---------------------------
  injection _‚â°_ _‚â°_ (‚äé-map f g)
‚äé-map-injective Hf Hg {x = Œπ‚ÇÅ x} {Œπ‚ÇÅ y} H‚â° = ap Œπ‚ÇÅ (Hf (inj‚ÇÅ-injective H‚â°))
‚äé-map-injective Hf Hg {x = Œπ‚ÇÇ x} {Œπ‚ÇÇ y} H‚â° = ap Œπ‚ÇÇ (Hg (inj‚ÇÇ-injective H‚â°))

infix 4 _‚äÜ_

_‚äÜ_ : {X : Set} ‚Üí X ^ n ‚Üí X ^ m ‚Üí Set
_‚äÜ_ {n} {m} xs ys =
  ‚àë f ‚à∂ Fin n ‚Ü£ Fin m , ‚àÄ i ‚Üí œÄ[ i ] xs ‚â° œÄ[ f .to i ] ys

‚äÜ-refl :
  {X : Set}
  {xs : X ^ n}
  ‚Üí ----------
  xs ‚äÜ xs
‚äÜ-refl = Inj.refl , Œª _ ‚Üí refl

‚äÜ-trans :
  {X : Set}
  {n m k : ‚Ñï}
  {xs : X ^ n} {ys : X ^ m} {zs : X ^ k}
  ‚Üí ------------------------------------
  xs ‚äÜ ys ‚Üí ys ‚äÜ zs ‚Üí xs ‚äÜ zs
‚äÜ-trans {n = n} {k = k} (f , Hf) (g , Hg) =
  Inj.trans f g , Œª i ‚Üí Hf i Ôºõ Hg (f .to i)

‚äÜ-[] :
  {X : Set}
  {xs : X ^ n}
  ‚Üí ----------
  [] ‚äÜ xs
‚äÜ-[] .œÄ‚ÇÅ .to ()

‚äÜ-‚à∑ :
  {X : Set}
  {xs : X ^ n} {ys : X ^ m}
  {a b : X}
  ‚Üí ---------------------------------------
  a ‚â° b ‚Üí xs ‚äÜ ys ‚Üí (a V.‚à∑ xs) ‚äÜ (b V.‚à∑ ys)
‚äÜ-‚à∑ {n = n} {m} refl (f , Hf) =
  let g = Inj.trans (Inv.Inverse‚áíInjection +‚Üî‚äé) $
          Inj.trans (mk‚Ü£ (‚äé-map-injective id (f .injective))) $
          Inv.Inverse‚áíInjection (Inv.sym +‚Üî‚äé)
  in g , Œª where
           zero     ‚Üí refl
           (succ n) ‚Üí Hf n

‚äÜ-‚à∑ ≥ :
  {X : Set}
  {xs : X ^ n} {ys : X ^ m}
  ‚Üí ---------------------------------
  (a : X) ‚Üí xs ‚äÜ ys ‚Üí xs ‚äÜ (a V.‚à∑ ys)
‚äÜ-‚à∑ ≥ {n = n} {m} a (f , Hf) =
  Inj.trans f (mk‚Ü£ suc-injective) , Hf

proj-‚äÜ : {X : Set} ‚Üí (Fin n ‚Ü£ Fin m) ‚Üí X ^ m ‚Üí X ^ n
proj-‚äÜ f xs = xs ‚àò f .to

‚äÜ-++‚Å∫À° : {X : Set} {Œò : X ^ n} {Œò‚Ä≤ : X ^ m} (Œò‚Ä≥ : X ^ k) ‚Üí Œò ‚äÜ Œò‚Ä≤ ‚Üí Œò ‚äÜ Œò‚Ä≥ ++ Œò‚Ä≤
‚äÜ-++‚Å∫À° {n = n} {m} {k} {Œò = Œò} {Œò‚Ä≤} Œò‚Ä≥ (f , Hf) = g , Hg
  where
    g : Fin n ‚Ü£ Fin (k + m)
    g = Inj.trans f $ mk‚Ü£ Œª {i} {j} ‚Üí ‚Üë ≥-injective k i j
    Hg : (i : Fin n) ‚Üí œÄ[ i ] Œò ‚â° œÄ[ g .to i ] (Œò‚Ä≥ ++ Œò‚Ä≤)
    Hg i rewrite splitAt-‚Üë ≥ k m (f .to i) = Hf i

‚äÜ-++‚Å∫ ≥ : {X : Set} {Œò : X ^ n} {Œò‚Ä≤ : X ^ m} (Œò‚Ä≥ : X ^ k) ‚Üí Œò ‚äÜ Œò‚Ä≤ ‚Üí Œò ‚äÜ Œò‚Ä≤ ++ Œò‚Ä≥
‚äÜ-++‚Å∫ ≥ {n = n} {m} {k} {Œò = Œò} {Œò‚Ä≤} Œò‚Ä≥ (f , Hf) = g , Hg
  where
    g : Fin n ‚Ü£ Fin (m + k)
    g = Inj.trans f $ mk‚Ü£ Œª {i} {j} ‚Üí ‚ÜëÀ°-injective k i j
    Hg : (i : Fin n) ‚Üí œÄ[ i ] Œò ‚â° œÄ[ g .to i ] (Œò‚Ä≤ ++ Œò‚Ä≥)
    Hg i rewrite splitAt-‚ÜëÀ° m (f .to i) k = Hf i

‚äÜ-++‚Å∫ :
  {X : Set} {n n‚Ä≤ m m‚Ä≤ : ‚Ñï}
  {Œò : X ^ n} {Œò‚Ä≤ : X ^ n‚Ä≤} {Œî : X ^ m} {Œî‚Ä≤ : X ^ m‚Ä≤}
  ‚Üí -------------------------------------------------
  Œò ‚äÜ Œò‚Ä≤ ‚Üí Œî ‚äÜ Œî‚Ä≤ ‚Üí Œò ++ Œî ‚äÜ Œò‚Ä≤ ++ Œî‚Ä≤
‚äÜ-++‚Å∫ {n = n} {n‚Ä≤} {m} {m‚Ä≤} {Œò} {Œò‚Ä≤} {Œî} {Œî‚Ä≤} (f , Hf) (g , Hg) = h , Hh
  where
    h : Fin (n + m) ‚Ü£ Fin (n‚Ä≤ + m‚Ä≤)
    h = Inj.trans (Inv.Inverse‚áíInjection +‚Üî‚äé) $
        Inj.trans (mk‚Ü£ (‚äé-map-injective (f .injective) (g .injective))) $
        Inv.Inverse‚áíInjection (Inv.sym +‚Üî‚äé)
    Hh : (i : Fin (n + m)) ‚Üí œÄ[ i ] (Œò ++ Œî) ‚â° œÄ[ h .to i ] (Œò‚Ä≤ ++ Œî‚Ä≤)
    Hh i with splitAt n i
    ... | Œπ‚ÇÅ i rewrite splitAt-‚ÜëÀ° n‚Ä≤ (f .to i) m‚Ä≤ = Hf i
    ... | Œπ‚ÇÇ i rewrite splitAt-‚Üë ≥ n‚Ä≤ m‚Ä≤ (g .to i) = Hg i

module Denotations (Ass : DenotAssumptions) where
  open DenotAssumptions Ass

  ùîâ-proj‚Ä≤ : (H‚äÜ : Œò ‚äÜ Œò‚Ä≤) ‚Üí ùîâ‚Ä≤ Œò‚Ä≤ Œò (proj-‚äÜ (H‚äÜ .œÄ‚ÇÅ))
  ùîâ-proj‚Ä≤ {Œò‚Ä≤ = Œò‚Ä≤} H‚äÜ i rewrite H‚äÜ .œÄ‚ÇÇ i = ùîâ-proj _

  ùîâ-weaken :
    {f : ‚Ñù ^ n ‚Üí ‚Ñù}
    (H‚äÜ : Œò ‚äÜ Œò‚Ä≤)
    ‚Üí ------------------------------------
    ùîâ Œò c f ‚Üí ùîâ Œò‚Ä≤ c (f ‚àò proj-‚äÜ (H‚äÜ .œÄ‚ÇÅ))
  ùîâ-weaken H‚äÜ Hf = ùîâ-compose (ùîâ-proj‚Ä≤ H‚äÜ) Hf

  ‚ü¶_‚üß·µÄ : Type ‚Üí Coeff ^ n ‚Üí Set
  ‚ü¶ treal c ‚üß·µÄ Œò = ‚àÉ (ùîâ Œò c)
  ‚ü¶ T‚ÇÅ ‚áí[ _ ] T‚ÇÇ ‚üß·µÄ Œò = {m : ‚Ñï} {Œò‚Ä≤ : Coeff ^ m} ‚Üí Œò ‚äÜ Œò‚Ä≤ ‚Üí ‚ü¶ T‚ÇÅ ‚üß·µÄ Œò‚Ä≤ ‚Üí ‚ü¶ T‚ÇÇ ‚üß·µÄ Œò‚Ä≤
  ‚ü¶ ttup n Ts ‚üß·µÄ Œò = (i : Fin n) ‚Üí ‚ü¶ Ts i ‚üß·µÄ Œò
  -- Distributions are interpreted trivially for the time being.
  -- For some reason, wrapping the result in a 1-vector seems
  -- to help the type inference...
  ‚ü¶ tdist T ‚üß·µÄ Œò = (i : Fin 1) ‚Üí ‚ü¶ T ‚üß·µÄ Œò

  ‚ü¶_‚üß·¥± : TyEnv ‚Üí Coeff ^ n ‚Üí Set
  ‚ü¶ Œì ‚üß·¥± Œò = All (Œª (_ , T) ‚Üí ‚ü¶ T ‚üß·µÄ Œò) Œì


  weaken : Œò ‚äÜ Œò‚Ä≤ ‚Üí ‚ü¶ T ‚üß·µÄ Œò ‚Üí ‚ü¶ T ‚üß·µÄ Œò‚Ä≤
  weaken {T = treal c} H‚äÜ (_ , Hf) = _ , ùîâ-weaken H‚äÜ Hf
  weaken {T = T‚ÇÅ ‚áí[ _ ] T‚ÇÇ} H‚äÜ Hf {Œò‚Ä≤ = Œò‚Ä≤} H‚äÜ‚Ä≤ =
    Hf (‚äÜ-trans {zs = Œò‚Ä≤} H‚äÜ H‚äÜ‚Ä≤)
  weaken {T = ttup n Ts} H‚äÜ Hsem i = weaken H‚äÜ (Hsem i)
  weaken {T = tdist T} H‚äÜ Hsem ‚ÇÄ = weaken H‚äÜ (Hsem ‚ÇÄ)

  weaken-env : Œò ‚äÜ Œò‚Ä≤ ‚Üí ‚ü¶ Œì ‚üß·¥± Œò ‚Üí ‚ü¶ Œì ‚üß·¥± Œò‚Ä≤
  weaken-env H‚äÜ = All.map (weaken H‚äÜ)

  abs-real-denot : {cs : Coeff ^ n} ‚Üí ‚ü¶ T ‚üß·µÄ (cs ++ Œò) ‚Üí ‚ü¶ treals n cs ‚áí[ e ] T ‚üß·µÄ Œò
  abs-real-denot {n = n} {T = treal c‚Ä≤} {cs = cs} f {Œò‚Ä≤ = Œò‚Ä≤} H‚äÜ xs
    with f , Hf ‚Üê weaken (‚äÜ-++‚Å∫ ‚äÜ-refl H‚äÜ) f = _ , ùîâ-compose Hg Hf
    where
      Hg : (Œª Œ∏ ‚Üí (Œª i ‚Üí xs i .œÄ‚ÇÅ Œ∏) ++ Œ∏) ‚àà ùîâ‚Ä≤ Œò‚Ä≤ (cs ++ Œò‚Ä≤)
      Hg i with splitAt n i
      ... | Œπ‚ÇÅ i = xs i .œÄ‚ÇÇ
      ... | Œπ‚ÇÇ i = ùîâ-proj i
  abs-real-denot {T = T‚ÇÅ ‚áí[ _ ] T‚ÇÇ} {cs = cs} Hf H‚äÜ xs {Œò‚Ä≤ = Œò‚Ä≤} H‚äÜ‚Ä≤ s =
    abs-real-denot {e = det} fs ‚äÜ-refl Œª i ‚Üí _ , ùîâ-weaken H‚äÜ‚Ä≤ (xs i .œÄ‚ÇÇ)
    where
      fs : ‚ü¶ T‚ÇÇ ‚üß·µÄ (cs ++ Œò‚Ä≤)
      fs = Hf (‚äÜ-++‚Å∫ ‚äÜ-refl (‚äÜ-trans {zs = Œò‚Ä≤} H‚äÜ H‚äÜ‚Ä≤)) (weaken (‚äÜ-++‚Å∫À° _ ‚äÜ-refl) s)
  abs-real-denot {T = ttup n Ts} Hsem H‚äÜ f i = abs-real-denot {e = det} (Hsem i) H‚äÜ f
  abs-real-denot {T = tdist T} Hsem H‚äÜ f _ =
    abs-real-denot {e = det} (Hsem ‚ÇÄ) H‚äÜ f

  app-real-denot : {cs : Coeff ^ n} ‚Üí ‚ü¶ treals n cs ‚áí[ e ] T ‚üß·µÄ Œò ‚Üí ‚ü¶ T ‚üß·µÄ (cs ++ Œò)
  app-real-denot f =
    f (‚äÜ-++‚Å∫À° _ ‚äÜ-refl) Œª i ‚Üí _ , ùîâ-proj‚Ä≤ (‚äÜ-++‚Å∫ ≥ _ ‚äÜ-refl) i

  if-denot : ‚ü¶ treal P ‚üß·µÄ Œò ‚Üí ‚ü¶ T ‚üß·µÄ Œò ‚Üí ‚ü¶ T ‚üß·µÄ Œò ‚Üí ‚ü¶ T ‚üß·µÄ Œò
  if-denot {T = treal c} (s , Hs) (s‚ÇÅ , Hs‚ÇÅ) (s‚ÇÇ , Hs‚ÇÇ) =
    let g Œ∏ = Œª {‚ÇÄ ‚Üí s Œ∏ ; ‚ÇÅ ‚Üí s‚ÇÅ Œ∏ ; ‚ÇÇ ‚Üí s‚ÇÇ Œ∏ }
        Hg = Œª {‚ÇÄ ‚Üí Hs ; ‚ÇÅ ‚Üí Hs‚ÇÅ ; ‚ÇÇ ‚Üí Hs‚ÇÇ }
    in
    _ , ùîâ-compose {g = g} Hg ùîâ-cond
  if-denot {T = T‚ÇÅ ‚áí[ _ ] T‚ÇÇ} s s‚ÇÅ s‚ÇÇ H‚äÜ x =
    if-denot (weaken H‚äÜ s) (s‚ÇÅ H‚äÜ x) (s‚ÇÇ H‚äÜ x)
  if-denot {T = ttup n Ts} s s‚ÇÅ s‚ÇÇ i = if-denot s (s‚ÇÅ i) (s‚ÇÇ i)
  if-denot {T = tdist T} s s‚ÇÅ s‚ÇÇ _ = if-denot s (s‚ÇÅ ‚ÇÄ) (s‚ÇÇ ‚ÇÄ)


  ‚ü¶_‚üß : Œì ‚ä¢ t :[ e ] T ‚Üí {Œò : Coeff ^ n} ‚Üí ‚ü¶ Œì ‚üß·¥± Œò ‚Üí ‚ü¶ T ‚üß·µÄ Œò
  ‚ü¶ tvar ‚üß (x ‚à∑ _) = x
  ‚ü¶ tabs (–òi As Habs) ‚üß Œ≥ H‚äÜ s =
    ‚ü¶ Habs (new As) {{unfinite As}} ‚üß (s All.‚à∑ weaken-env H‚äÜ Œ≥)
  ‚ü¶ tapp Hf Ht ‚üß Œ≥ = ‚ü¶ Hf ‚üß Œ≥ ‚äÜ-refl (‚ü¶ Ht ‚üß Œ≥)
  ‚ü¶ tprim {œï = œï} {cs = cs} Hœï _ Htypes ‚üß {Œò} Œ≥ =
    _ , ùîâ-compose (Œª i ‚Üí ‚ü¶ Htypes i ‚üß Œ≥ .œÄ‚ÇÇ) (ùîâ-prim Hœï)
  ‚ü¶ treal {r = r} ‚üß _ = _ , ùîâ-compose {g = Œª _ ()} (Œª ()) (ùîâ-const r)
  ‚ü¶ ttup _ Htypes ‚üß Œ≥ i = ‚ü¶ Htypes i ‚üß Œ≥
  ‚ü¶ tproj i Htype ‚üß Œ≥ = ‚ü¶ Htype ‚üß Œ≥ i
  ‚ü¶ tif Htype Htype‚ÇÅ Htype‚ÇÇ ‚üß Œ≥ =
    if-denot (‚ü¶ Htype ‚üß Œ≥) (‚ü¶ Htype‚ÇÅ ‚üß Œ≥) (‚ü¶ Htype‚ÇÇ ‚üß Œ≥)
  ‚ü¶ tdiff {n = n} {m} {cs = cs} {ds} H‚â§ Htype Htype‚ÇÅ ‚üß {Œò} Œ≥ =
    abs-real-denot {T = treals m ds} {e = det} Œª j ‚Üí
    _ , ùîâ-compose
         ((ùîâ-compose‚Ä≤ getŒò (Œª i ‚Üí ‚ü¶ Htype‚ÇÅ ‚üß Œ≥ i .œÄ‚ÇÇ) <++> getAs) <++> getŒò)
         (ùîâ-diff _ H‚â§ (fapp _ .œÄ‚ÇÇ))
    where
      fapp = app-real-denot {e = det} {T = treals m ds} (‚ü¶ Htype ‚üß Œ≥)
      _<++>_ = ùîâ-++
      getAs = ùîâ-proj‚Ä≤ (‚äÜ-++‚Å∫ ≥ _ ‚äÜ-refl)
      getŒò = ùîâ-proj‚Ä≤ (‚äÜ-++‚Å∫À° _ ‚äÜ-refl)
  ‚ü¶ tsolve Htype Htype‚ÇÅ Htype‚ÇÇ H‚â§ ‚üß = {!!}
  ‚ü¶ tdist _ _ _ ‚üß = {!!}
  ‚ü¶ tassume Htype ‚üß Œ≥ = ‚ü¶ Htype ‚üß Œ≥ ‚ÇÄ
  ‚ü¶ tweight Htype ‚üß Œ≥ ()
  ‚ü¶ tinfer Htype _ ‚üß Œ≥ _ = ‚ü¶ Htype ‚üß Œ≥ ‚äÜ-refl Œª ()
  ‚ü¶ tweaken Htype x x‚ÇÅ ‚üß = {!!}
  ‚ü¶ tsub Htype x x‚ÇÅ ‚üß = {!!}
  ‚ü¶ tpromote Htype x ‚üß = {!!}
