open import Lib.Reals

module Denotations (R : Reals‚ÇÄ) where

open Reals R using (‚Ñù; 0·¥ø; _‚â≤?_)

open import Syntax R hiding (n; m)
open import Typing R

open import Properties.Typing R

open import Lib.Prelude hiding ([]; _‚à∑_; _‚àà_)
open import Lib.LocallyNameless.Unfinite
open import Lib.Env hiding ([]; _‚à∑_)
open import Lib.Subvec
open import Lib.Util

open import Data.Fin using (splitAt)
open import Data.Fin.Properties using (to‚Ñï<n)
open import Data.List.Relation.Unary.All as All using (All)
open import Data.Vec.Functional
open import Relation.Unary using (_‚àà_; Pred)
import Data.List.Relation.Binary.Sublist.Propositional as Sub

private
  variable
    n m k : ‚Ñï
    Œò : Coeff ^ n
    Œò‚Ä≤ : Coeff ^ m
    Œò‚Ä≥ : Coeff ^ k

record DenotAssumptions : Set‚ÇÅ where
  field
    ùîâ : (Œò : Coeff ^ n) ‚Üí Coeff ‚Üí Pred (‚Ñù ^ n ‚Üí ‚Ñù) ‚Ñì‚ÇÄ

    ‚ü¶_‚üß·¥æ : (œï : Prim) ‚Üí ‚Ñù ^ PrimAr œï ‚Üí ‚Ñù

    ùê∑ :
      (f : ‚Ñù ^ n ‚Üí ‚Ñù)
      (_ : ‚àÄ i ‚Üí œÄ[ i ] Œò ‚â§‚Ä≤ P)
      (_ : f ‚àà ùîâ Œò c)
      ‚Üí -----------------------
      ‚Ñù ^ (n + n) ‚Üí ‚Ñù

  ùîâ‚Ä≤ : (Œò : Coeff ^ n) (Œò‚Ä≤ : Coeff ^ m) ‚Üí Pred (‚Ñù ^ n ‚Üí ‚Ñù ^ m) ‚Ñì‚ÇÄ
  ùîâ‚Ä≤ Œò Œò‚Ä≤ f = (i : Fin _) ‚Üí œÄ[ i ] ‚àò f ‚àà ùîâ Œò (œÄ[ i ] Œò‚Ä≤)

  field
    ùîâ-const : (r : ‚Ñù) ‚Üí const r ‚àà ùîâ [] N

    ùîâ-proj : id ‚àà ùîâ‚Ä≤ Œò Œò

    ùîâ-cond :
      (Œª Œ∏ ‚Üí if Œ∏ ‚ÇÄ ‚â≤? 0·¥ø then Œ∏ ‚ÇÅ else Œ∏ ‚ÇÇ)
        ‚àà ùîâ (P ‚à∑ c ‚à∑ c ‚à∑ []) c

    ùîâ-compose :
      {g : ‚Ñù ^ n ‚Üí ‚Ñù ^ m}
      {f : ‚Ñù ^ m ‚Üí ‚Ñù}
      (_ : g ‚àà ùîâ‚Ä≤ Œò Œò‚Ä≤)
      (_ : f ‚àà ùîâ Œò‚Ä≤ c)
      ‚Üí -----------------
       f ‚àò g ‚àà ùîâ Œò c

    ùîâ-sub :
      {f : ‚Ñù ^ n ‚Üí ‚Ñù}
      (_ : ‚àÄ i ‚Üí œÄ[ i ] Œò ‚â§‚Ä≤ œÄ[ i ] Œò‚Ä≤)
      (_ : c‚Ä≤ ‚â§‚Ä≤ c)
      ‚Üí -------------------------------
      f ‚àà ùîâ Œò c ‚Üí f ‚àà ùîâ Œò‚Ä≤ c‚Ä≤

    ùîâ-promote :
      {f : ‚Ñù ^ n ‚Üí ‚Ñù}
      (_ : ‚àÄ i ‚Üí c‚Ä≤ ‚â§‚Ä≤ œÄ[ i ] Œò)
      ‚Üí ------------------------
      f ‚àà ùîâ Œò c ‚Üí f ‚àà ùîâ Œò c‚Ä≤

    ùîâ-prim :
      {Œò : Coeff ^ PrimAr œï}
      (_ : PrimTy œï ‚â° (Œò , c))
      ‚Üí ----------------------
      ‚ü¶ œï ‚üß·¥æ ‚àà ùîâ Œò c

    ùîâ-diff :
      {Œò‚Ä≤ : Coeff ^ m}
      (f : ‚Ñù ^ (n + m) ‚Üí ‚Ñù)
      (H‚â§ : ‚àÄ i ‚Üí œÄ[ i ] Œò ‚â§‚Ä≤ P)
      (Hf : f ‚àà ùîâ (Œò ++ Œò‚Ä≤) c)
      (Hf‚Ä≤ : ‚àÄ Œ∏‚Ä≤ ‚Üí (Œª Œ∏ ‚Üí f (Œ∏ ++ Œ∏‚Ä≤)) ‚àà ùîâ Œò c)
      ‚Üí ----------------------------------------------
      (Œª xvŒ∏ ‚Üí ùê∑ _ H‚â§ (Hf‚Ä≤ (drop _ xvŒ∏)) (take _ xvŒ∏))
        ‚àà ùîâ ((Œò ++ replicate n A) ++ Œò‚Ä≤) c


module ùîâ-lemmas (Ass : DenotAssumptions) where
  open DenotAssumptions Ass

  ùîâ-const‚Ä≤ : (Œ∏ : ‚Ñù ^ n) ‚Üí const Œ∏ ‚àà ùîâ‚Ä≤ Œò Œò‚Ä≤
  ùîâ-const‚Ä≤ Œ∏ i =
    ùîâ-compose {Œò‚Ä≤ = Œª ()} {g = Œª _ ()} (Œª ()) $
    ùîâ-sub (Œª ()) (‚â§-1 $ to‚Ñï<n _) $
    ùîâ-const _

  ùîâ-compose‚Ä≤ :
    {g : ‚Ñù ^ n ‚Üí ‚Ñù ^ m}
    {f : ‚Ñù ^ m ‚Üí ‚Ñù ^ k}
    (_ : g ‚àà ùîâ‚Ä≤ Œò Œò‚Ä≤)
    (_ : f ‚àà ùîâ‚Ä≤ Œò‚Ä≤ Œò‚Ä≥)
    ‚Üí -----------------
     f ‚àò g ‚àà ùîâ‚Ä≤ Œò Œò‚Ä≥
  ùîâ-compose‚Ä≤ Hg Hf = ùîâ-compose Hg ‚àò Hf

  ùîâ-++ :
    {f : ‚Ñù ^ n ‚Üí ‚Ñù ^ m}
    {g : ‚Ñù ^ n ‚Üí ‚Ñù ^ k}
    (_ : f ‚àà ùîâ‚Ä≤ Œò Œò‚Ä≤)
    (_ : g ‚àà ùîâ‚Ä≤ Œò Œò‚Ä≥)
    ‚Üí ----------------------------------
    (Œª Œ∏ ‚Üí f Œ∏ ++ g Œ∏) ‚àà ùîâ‚Ä≤ Œò (Œò‚Ä≤ ++ Œò‚Ä≥)
  ùîâ-++ {m = m} Hf Hg i with splitAt m i
  ... | Œπ‚ÇÅ i = Hf i
  ... | Œπ‚ÇÇ i = Hg i

  ùîâ-papply :
    {f : ‚Ñù ^ (n + m) ‚Üí ‚Ñù}
    (_ : f ‚àà ùîâ (Œò ++ Œò‚Ä≤) c)
    (Œ∏‚Ä≤ : ‚Ñù ^ m)
    ‚Üí -------------------------
    (Œª Œ∏ ‚Üí f (Œ∏ ++ Œ∏‚Ä≤)) ‚àà ùîâ Œò c
  ùîâ-papply Hf Œ∏ =
    ùîâ-compose (ùîâ-++ ùîâ-proj (ùîâ-const‚Ä≤ _)) Hf

  ùîâ-proj‚Ä≤ : (H‚äÜ : Œò ‚äÜ Œò‚Ä≤) ‚Üí proj-‚äÜ (H‚äÜ .œÄ‚ÇÅ) ‚àà ùîâ‚Ä≤ Œò‚Ä≤ Œò
  ùîâ-proj‚Ä≤ {Œò‚Ä≤ = Œò‚Ä≤} H‚äÜ i rewrite H‚äÜ .œÄ‚ÇÇ i = ùîâ-proj _

  ùîâ-weaken :
    {f : ‚Ñù ^ n ‚Üí ‚Ñù}
    (H‚äÜ : Œò ‚äÜ Œò‚Ä≤)
    ‚Üí ---------------------------------------
    f ‚àà ùîâ Œò c ‚Üí f ‚àò proj-‚äÜ (H‚äÜ .œÄ‚ÇÅ) ‚àà ùîâ Œò‚Ä≤ c
  ùîâ-weaken H‚äÜ Hf = ùîâ-compose (ùîâ-proj‚Ä≤ H‚äÜ) Hf


module Denotations (Ass : DenotAssumptions) where
  open ùîâ-lemmas Ass
  open DenotAssumptions Ass

  ‚ü¶_‚üß·µÄ : Type ‚Üí Coeff ^ n ‚Üí Set
  ‚ü¶ treal c ‚üß·µÄ Œò = ‚àÉ (ùîâ Œò c)
  ‚ü¶ T‚ÇÅ ‚áí[ det ] T‚ÇÇ ‚üß·µÄ Œò = {m : ‚Ñï} {Œò‚Ä≤ : Coeff ^ m} ‚Üí Œò ‚äÜ Œò‚Ä≤ ‚Üí ‚ü¶ T‚ÇÅ ‚üß·µÄ Œò‚Ä≤ ‚Üí ‚ü¶ T‚ÇÇ ‚üß·µÄ Œò‚Ä≤
  ‚ü¶ ttup n Ts ‚üß·µÄ Œò = (i : Fin n) ‚Üí ‚ü¶ Ts i ‚üß·µÄ Œò
  -- Probabilistic subterms are interpreted trivially for the time being.
  ‚ü¶ T‚ÇÅ ‚áí[ rnd ] T‚ÇÇ ‚üß·µÄ Œò = ùüô
  ‚ü¶ tdist T ‚üß·µÄ Œò = ùüô

  ‚ü¶_‚üß·¥± : TyEnv ‚Üí Coeff ^ n ‚Üí Set
  ‚ü¶ Œì ‚üß·¥± Œò = All (Œª (_ , T) ‚Üí ‚ü¶ T ‚üß·µÄ Œò) Œì


  weaken : Œò ‚äÜ Œò‚Ä≤ ‚Üí ‚ü¶ T ‚üß·µÄ Œò ‚Üí ‚ü¶ T ‚üß·µÄ Œò‚Ä≤
  weaken {T = treal c} H‚äÜ (_ , Hf) = _ , ùîâ-weaken H‚äÜ Hf
  weaken {T = T‚ÇÅ ‚áí[ det ] T‚ÇÇ} H‚äÜ Hf {Œò‚Ä≤ = Œò‚Ä≤} H‚äÜ‚Ä≤ =
    Hf (‚äÜ-trans {zs = Œò‚Ä≤} H‚äÜ H‚äÜ‚Ä≤)
  weaken {T = T‚ÇÅ ‚áí[ rnd ] T‚ÇÇ} _ _ = tt
  weaken {T = ttup n Ts} H‚äÜ Hsem i = weaken H‚äÜ (Hsem i)
  weaken {T = tdist T} H‚äÜ Hsem = tt

  weaken-env : Œò ‚äÜ Œò‚Ä≤ ‚Üí ‚ü¶ Œì ‚üß·¥± Œò ‚Üí ‚ü¶ Œì ‚üß·¥± Œò‚Ä≤
  weaken-env H‚äÜ = All.map (weaken H‚äÜ)

  weaken-Œì : Œì Sub.‚äÜ Œì‚Ä≤ ‚Üí ‚ü¶ Œì‚Ä≤ ‚üß·¥± Œò ‚Üí ‚ü¶ Œì ‚üß·¥± Œò
  weaken-Œì Sub.[] HŒì‚Ä≤ = HŒì‚Ä≤
  weaken-Œì (y Sub.‚à∑ ≥ H‚äÜ) (_ All.‚à∑ HŒì‚Ä≤) = weaken-Œì H‚äÜ HŒì‚Ä≤
  weaken-Œì (refl Sub.‚à∑ H‚äÜ) (px All.‚à∑ HŒì‚Ä≤) = px All.‚à∑ weaken-Œì H‚äÜ HŒì‚Ä≤

  sub-compat : T <: T‚Ä≤ ‚Üí ‚ü¶ T ‚üß·µÄ Œò ‚Üí ‚ü¶ T‚Ä≤ ‚üß·µÄ Œò
  sub-compat (sreal H‚â§) (f , Hf) = f , ùîâ-sub (Œª _ ‚Üí ‚â§refl) H‚â§ Hf
  sub-compat (stup Hsub) HT i = sub-compat (Hsub i) (HT i)
  sub-compat (sarr {e = det} {e‚Ä≤ = det} Hsub Hsub‚ÇÅ H‚â§) HT H‚äÜ HT‚ÇÅ =
    sub-compat Hsub‚ÇÅ (HT H‚äÜ (sub-compat Hsub HT‚ÇÅ))
  sub-compat (sarr {e‚Ä≤ = rnd} Hsub Hsub‚ÇÅ H‚â§) HT = tt
  sub-compat (sdist _) _ = tt

  abs-real-denot : {cs : Coeff ^ n} ‚Üí ‚ü¶ T ‚üß·µÄ (cs ++ Œò) ‚Üí ‚ü¶ treals n cs ‚áí[ det ] T ‚üß·µÄ Œò
  abs-real-denot {n = n} {T = treal c‚Ä≤} {cs = cs} f {Œò‚Ä≤ = Œò‚Ä≤} H‚äÜ xs
    with f , Hf ‚Üê weaken (‚äÜ-++‚Å∫ ‚äÜ-refl H‚äÜ) f = _ , ùîâ-compose Hg Hf
    where
      Hg : (Œª Œ∏ ‚Üí (Œª i ‚Üí xs i .œÄ‚ÇÅ Œ∏) ++ Œ∏) ‚àà ùîâ‚Ä≤ Œò‚Ä≤ (cs ++ Œò‚Ä≤)
      Hg i with splitAt n i
      ... | Œπ‚ÇÅ i = xs i .œÄ‚ÇÇ
      ... | Œπ‚ÇÇ i = ùîâ-proj i
  abs-real-denot {T = T‚ÇÅ ‚áí[ det ] T‚ÇÇ} {cs = cs} Hf H‚äÜ xs {Œò‚Ä≤ = Œò‚Ä≤} H‚äÜ‚Ä≤ s =
    abs-real-denot fs ‚äÜ-refl Œª i ‚Üí _ , ùîâ-weaken H‚äÜ‚Ä≤ (xs i .œÄ‚ÇÇ)
    where
      fs : ‚ü¶ T‚ÇÇ ‚üß·µÄ (cs ++ Œò‚Ä≤)
      fs = Hf (‚äÜ-++‚Å∫ ‚äÜ-refl (‚äÜ-trans {zs = Œò‚Ä≤} H‚äÜ H‚äÜ‚Ä≤)) (weaken (‚äÜ-++‚Å∫À° _ ‚äÜ-refl) s)
  abs-real-denot {T = T‚ÇÅ ‚áí[ rnd ] T‚ÇÇ} {cs = cs} _ _ _ = tt
  abs-real-denot {T = ttup n Ts} Hsem H‚äÜ f i = abs-real-denot (Hsem i) H‚äÜ f
  abs-real-denot {T = tdist T} Hsem H‚äÜ f = tt

  app-real-denot : {cs : Coeff ^ n} ‚Üí ‚ü¶ treals n cs ‚áí[ det ] T ‚üß·µÄ Œò ‚Üí ‚ü¶ T ‚üß·µÄ (cs ++ Œò)
  app-real-denot f =
    f (‚äÜ-++‚Å∫À° _ ‚äÜ-refl) Œª i ‚Üí _ , ùîâ-proj‚Ä≤ (‚äÜ-++‚Å∫ ≥ _ ‚äÜ-refl) i

  if-denot : ‚ü¶ treal P ‚üß·µÄ Œò ‚Üí ‚ü¶ T ‚üß·µÄ Œò ‚Üí ‚ü¶ T ‚üß·µÄ Œò ‚Üí ‚ü¶ T ‚üß·µÄ Œò
  if-denot {T = treal c} (s , Hs) (s‚ÇÅ , Hs‚ÇÅ) (s‚ÇÇ , Hs‚ÇÇ) =
    let g Œ∏ = Œª {‚ÇÄ ‚Üí s Œ∏ ; ‚ÇÅ ‚Üí s‚ÇÅ Œ∏ ; ‚ÇÇ ‚Üí s‚ÇÇ Œ∏ }
        Hg = Œª {‚ÇÄ ‚Üí Hs ; ‚ÇÅ ‚Üí Hs‚ÇÅ ; ‚ÇÇ ‚Üí Hs‚ÇÇ }
    in
    _ , ùîâ-compose {g = g} Hg ùîâ-cond
  if-denot {T = T‚ÇÅ ‚áí[ det ] T‚ÇÇ} s s‚ÇÅ s‚ÇÇ H‚äÜ x =
    if-denot (weaken H‚äÜ s) (s‚ÇÅ H‚äÜ x) (s‚ÇÇ H‚äÜ x)
  if-denot {T = T‚ÇÅ ‚áí[ rnd ] T‚ÇÇ} s s‚ÇÅ s‚ÇÇ = tt
  if-denot {T = ttup n Ts} s s‚ÇÅ s‚ÇÇ i = if-denot s (s‚ÇÅ i) (s‚ÇÇ i)
  if-denot {T = tdist T} s s‚ÇÅ s‚ÇÇ = tt

  term-denot : Œì ‚ä¢ t :[ det ] T ‚Üí c ‚â§·¥± Œì ‚Üí {Œò : Coeff ^ n} ‚Üí ‚ü¶ Œì ‚üß·¥± Œò ‚Üí ‚ü¶ c ‚äô T ‚üß·µÄ Œò
  term-denot tvar (H‚â§ All.‚à∑ _) {Œò} (x All.‚à∑ _) =
    subst (Œª T ‚Üí ‚ü¶ T ‚üß·µÄ Œò) (symm $ ‚â§·∂ú‚áí‚äô H‚â§) x
  term-denot (tabs {e = det} (–òi As Habs)) H‚â§ Œ≥ {Œò‚Ä≤ = Œò‚Ä≤} H‚äÜ s =
    subst (Œª T ‚Üí ‚ü¶ T ‚üß·µÄ Œò‚Ä≤) (‚â§·∂ú‚áí‚äô A‚â§·∂ú) $
      term-denot
        (Habs (new As) {{unfinite As}}) A‚â§·¥±
        (s All.‚à∑ weaken-env H‚äÜ Œ≥)
  term-denot (tabs {e = rnd} _) H‚â§ Œ≥ = tt
  term-denot (tapp Hf Ht) H‚â§ Œ≥ = {!!}
    -- term-denot Hf ? Œ≥ ‚äÜ-refl ? -- (term-denot Ht ? Œ≥)
  term-denot (tprim x x‚ÇÅ x‚ÇÇ) H‚â§ Œ≥ = {!!}
  term-denot treal H‚â§ Œ≥ = {!!}
  term-denot (ttup _ Htypes) H‚â§ Œ≥ i = term-denot (Htypes i) H‚â§ Œ≥
  term-denot (tproj i Htype) H‚â§ Œ≥ = term-denot Htype H‚â§ Œ≥ i
  term-denot (tif Htype Htype‚ÇÅ Htype‚ÇÇ) H‚â§ Œ≥ = {!!}
  term-denot (tdiff x Htype Htype‚ÇÅ) H‚â§ Œ≥ = {!!}
  term-denot (tsolve Htype Htype‚ÇÅ Htype‚ÇÇ x) H‚â§ Œ≥ = {!!}
  term-denot (tdist _ _ _) H‚â§ Œ≥ = tt
  term-denot (tinfer _ _) H‚â§ Œ≥ = tt
  term-denot (tweaken Htype H‚äÜ _) H‚â§ Œ≥ =
    term-denot Htype (all-weaken H‚äÜ H‚â§) (weaken-Œì H‚äÜ Œ≥)
  term-denot (tsub {e = det} Htype _ Hsub) H‚â§ Œ≥ =
    sub-compat (sub-‚äô-mono Hsub) (term-denot Htype H‚â§ Œ≥)
  term-denot (tpromote {T = T} Htype H‚â§‚Ä≤) H‚â§ {Œò} Œ≥ =
    subst (Œª T ‚Üí ‚ü¶ T ‚üß·µÄ Œò) (‚äô-action T) $ term-denot Htype (‚â§·¥±-lub H‚â§ H‚â§‚Ä≤) Œ≥

  ‚ü¶_‚üß : Œì ‚ä¢ t :[ det ] T ‚Üí {Œò : Coeff ^ n} ‚Üí ‚ü¶ Œì ‚üß·¥± Œò ‚Üí ‚ü¶ T ‚üß·µÄ Œò
  ‚ü¶ t ‚üß {Œò} Œ≥ =
    subst (Œª T ‚Üí ‚ü¶ T ‚üß·µÄ Œò) (‚â§·∂ú‚áí‚äô A‚â§·∂ú) $ term-denot t A‚â§·¥± Œ≥

  -- ‚ü¶ tvar ‚üß (x All.‚à∑ _) = x
  -- ‚ü¶ tabs {e = det} (–òi As Habs) ‚üß Œ≥ H‚äÜ s =
  --   ‚ü¶ Habs (new As) {{unfinite As}} ‚üß (s All.‚à∑ weaken-env H‚äÜ Œ≥)
  -- ‚ü¶ tabs {e = rnd} (–òi As Habs) ‚üß Œ≥ = tt
  -- ‚ü¶ tapp Hf Ht ‚üß Œ≥ = ‚ü¶ Hf ‚üß Œ≥ ‚äÜ-refl (‚ü¶ Ht ‚üß Œ≥)
  -- ‚ü¶ tprim {œï = œï} {cs = cs} Hœï _ Htypes ‚üß {Œò} Œ≥ =
  --   _ , ùîâ-compose (Œª i ‚Üí ‚ü¶ Htypes i ‚üß Œ≥ .œÄ‚ÇÇ) (ùîâ-prim Hœï)
  -- ‚ü¶ treal {r = r} ‚üß _ = _ , ùîâ-compose {g = Œª _ ()} (Œª ()) (ùîâ-const r)
  -- ‚ü¶ ttup _ Htypes ‚üß Œ≥ i = ‚ü¶ Htypes i ‚üß Œ≥
  -- ‚ü¶ tproj i Htype ‚üß Œ≥ = ‚ü¶ Htype ‚üß Œ≥ i
  -- ‚ü¶ tif Htype Htype‚ÇÅ Htype‚ÇÇ ‚üß Œ≥ =
  --   if-denot (‚ü¶ Htype ‚üß Œ≥) (‚ü¶ Htype‚ÇÅ ‚üß Œ≥) (‚ü¶ Htype‚ÇÇ ‚üß Œ≥)
  -- ‚ü¶ tdiff {n = n} {m} {cs = cs} {ds} H‚â§ Htype Htype‚ÇÅ ‚üß {Œò} Œ≥ =
  --   abs-real-denot {T = treals m ds} Œª j ‚Üí
  --   _ , ùîâ-compose
  --        ((ùîâ-compose‚Ä≤ getŒò (Œª i ‚Üí ‚ü¶ Htype‚ÇÅ ‚üß Œ≥ i .œÄ‚ÇÇ) <++> getAs) <++> getŒò)
  --        (ùîâ-diff _ H‚â§ (fapp _ .œÄ‚ÇÇ))
  --   where
  --     fapp = app-real-denot {T = treals m ds} (‚ü¶ Htype ‚üß Œ≥)
  --     _<++>_ = ùîâ-++
  --     getAs = ùîâ-proj‚Ä≤ (‚äÜ-++‚Å∫ ≥ _ ‚äÜ-refl)
  --     getŒò = ùîâ-proj‚Ä≤ (‚äÜ-++‚Å∫À° _ ‚äÜ-refl)
  -- ‚ü¶ tsolve Htype Htype‚ÇÅ Htype‚ÇÇ H‚â§ ‚üß = {!!}
  -- ‚ü¶ tdist _ _ _ ‚üß Œ≥ = tt
  -- ‚ü¶ tinfer Htype _ ‚üß Œ≥ = tt
  -- ‚ü¶ tweaken Htype H‚äÜ Hd ‚üß Œ≥ = ‚ü¶ Htype ‚üß (weaken-Œì H‚äÜ Œ≥)
  -- ‚ü¶ tsub {e = det} Htype _ Hsub ‚üß Œ≥ = sub-compat Hsub (‚ü¶ Htype ‚üß Œ≥)
  -- ‚ü¶ tpromote Htype H‚â§ ‚üß = {!!}
