open import Lib.Algebra.Reals

module DPPL.Properties.Typing (R : Reals‚ÇÄ) where

open import DPPL.Syntax R
open import DPPL.Typing R

open import Lib.Prelude
open import Lib.Data.Dec
open import Lib.Data.Vector
open import Lib.Data.Finset
open import Lib.LocallyNameless.Unfinite
open import Lib.Syntax.Env
open import Lib.Syntax.Substitution

open import Data.Dec.Base
open import Data.Nat.Base using (Nat-is-set)
open import Data.Finset.Base

open SyntaxVars
open TypingVars
open FinsetSyntax

ttup-inv :
  {vs : Tm ^ n}
  {Ts : Ty ^ n}
  (_ : Œì ‚ä¢ tup n ‚ñ∏ vs :[ e ] T)
  (_ : T ‚â°·µ¢ ttup n Ts)
  ‚Üí ---------------------------
  ‚àÄ i ‚Üí Œì ‚ä¢ vs i :[ e ] Ts i
ttup-inv (ttup Htys) Heq i = subst (_ ‚ä¢ _ :[ _ ]_)
  (is-set‚Üícast-pathp (Ty ^_) Nat-is-set (ap snd (ttup-inj (Id‚âÉpath.to Heq))) $‚Çö i)
  (Htys i)
ttup-inv (tsub Hty H‚â§ (stup H<:)) refl·µ¢ i = tsub (ttup-inv Hty refl·µ¢ i) H‚â§ (H<: i)
ttup-inv (tpromote {T = ttup _ _} Hty H‚â§ H‚äÜ) refl·µ¢ i =
  tpromote (ttup-inv Hty refl·µ¢ i) H‚â§ H‚äÜ

weaken-typing : Œì ‚ä¢ t :[ e ] T ‚Üí Œì ‚äÜ Œì' ‚Üí Œì' ‚ä¢ t :[ e ] T
weaken-typing (tsub Hty H‚â§ H<:) H‚äÜ     = tsub (weaken-typing Hty H‚äÜ) H‚â§ H<:
weaken-typing (tpromote Hty H‚â§ H‚äÜ') H‚äÜ = tpromote Hty H‚â§ (env-sub-trans H‚äÜ' H‚äÜ)
weaken-typing (tvar H‚àà) H‚äÜ             = tvar (env-sub-trans H‚àà H‚äÜ)
weaken-typing {Œì' = Œì'} (tlam (–òi As Hty)) H‚äÜ = tlam $ –òi (As ‚à™ env-dom Œì') Œª a ‚Üí
  weaken-typing (Hty a ‚¶É ‚àâ‚à™‚ÇÅ auto ‚¶Ñ) (env-sub-cons refl·µ¢ (‚àâ‚à™‚ÇÇ As auto) H‚äÜ)
weaken-typing (tapp Hty Hty‚ÇÅ) H‚äÜ =
  tapp (weaken-typing Hty H‚äÜ) (weaken-typing Hty‚ÇÅ H‚äÜ)
weaken-typing (tprim Hœï Hty) H‚äÜ         = tprim Hœï (weaken-typing Hty H‚äÜ)
weaken-typing treal H‚äÜ                  = treal
weaken-typing (ttup Htys) H‚äÜ            = ttup Œª i ‚Üí weaken-typing (Htys i) H‚äÜ
weaken-typing (tproj i Hty) H‚äÜ          = tproj i (weaken-typing Hty H‚äÜ)
weaken-typing (tif Hty Hty‚ÇÅ Hty‚ÇÇ H‚â§) H‚äÜ =
  tif (weaken-typing Hty H‚äÜ) (weaken-typing Hty‚ÇÅ H‚äÜ) (weaken-typing Hty‚ÇÇ H‚äÜ) H‚â§
weaken-typing tuniform H‚äÜ            = tuniform
weaken-typing (tsample Hty) H‚äÜ       = tsample (weaken-typing Hty H‚äÜ)
weaken-typing (tweight Hty) H‚äÜ       = tweight (weaken-typing Hty H‚äÜ)
weaken-typing (tinfer Hty) H‚äÜ        = tinfer (weaken-typing Hty H‚äÜ)
weaken-typing (tdiff Hty Hty‚ÇÅ Hc) H‚äÜ =
  tdiff (weaken-typing Hty H‚äÜ) (weaken-typing Hty‚ÇÅ H‚äÜ) Hc
weaken-typing (tsolve Hty Hty‚ÇÅ Hty‚ÇÇ Hc) H‚äÜ =
  tsolve (weaken-typing Hty H‚äÜ) (weaken-typing Hty‚ÇÅ H‚äÜ) (weaken-typing Hty‚ÇÇ H‚äÜ) Hc

subst-pres-typing :
  {x : ùî∏}
  {t u : Tm}
  {T‚ÇÅ T‚ÇÇ : Ty}
  (_ : [ x ‚à∂ T‚ÇÇ ] & Œì' ‚ä¢ t :[ e ] T‚ÇÅ)
  (_ : Œµ ‚ä¢ u :[ det ] T‚ÇÇ)
  ‚Üí ---------------------------------
  Œì' ‚ä¢ (x => u) t :[ e ] T‚ÇÅ
subst-pres-typing {x = x} (tvar {a = a} H‚àà) Hu with x ‚â°? a
... | yes x‚â°a with refl·µ¢ ‚Üê env-mem-inv (env-mem-++r (subst (_‚àà·∂†À¢ _) x‚â°a here‚Çõ) H‚àà) =
  weaken-typing Hu env-sub-nil
... | no x‚â†a = tvar (env-mem-++l (‚àâ‚à∑ (false‚Üíis-no (x‚â†a ‚àò sym)) tt) H‚àà)
subst-pres-typing {x = x} (tlam (–òi As Hty)) Hu = tlam $ –òi ([ x ] ‚à™ As) Œª a ‚Üí
  {!!}
subst-pres-typing (tapp Hty Hty‚ÇÅ) Hu =
  tapp (subst-pres-typing Hty Hu) (subst-pres-typing Hty‚ÇÅ Hu)
subst-pres-typing (tprim Hœï Hty) Hu = tprim Hœï (subst-pres-typing Hty Hu)
subst-pres-typing treal Hu          = treal
subst-pres-typing (ttup Htys) Hu    = ttup Œª i ‚Üí subst-pres-typing (Htys i) Hu
subst-pres-typing (tproj i Hty) Hu  = tproj i (subst-pres-typing Hty Hu)
subst-pres-typing (tif Hty Hty‚ÇÅ Hty‚ÇÇ H‚â§) Hu = tif
  (subst-pres-typing Hty Hu) (subst-pres-typing Hty‚ÇÅ Hu) (subst-pres-typing Hty‚ÇÇ Hu)
  H‚â§
subst-pres-typing tuniform Hu            = tuniform
subst-pres-typing (tsample Hty) Hu       = tsample (subst-pres-typing Hty Hu)
subst-pres-typing (tweight Hty) Hu       = tweight (subst-pres-typing Hty Hu)
subst-pres-typing (tinfer Hty) Hu        = tinfer (subst-pres-typing Hty Hu)
subst-pres-typing (tdiff Hty Hty‚ÇÅ Hc) Hu =
  tdiff (subst-pres-typing Hty Hu) (subst-pres-typing Hty‚ÇÅ Hu) Hc
subst-pres-typing (tsolve Hty Hty‚ÇÅ Hty‚ÇÇ Hc) Hu = tsolve
  (subst-pres-typing Hty Hu) (subst-pres-typing Hty‚ÇÅ Hu) (subst-pres-typing Hty‚ÇÇ Hu)
  Hc
subst-pres-typing (tsub Hty H‚â§ H<:) Hu    = tsub (subst-pres-typing Hty Hu) H‚â§ H<:
subst-pres-typing (tpromote Hty H‚â§ H‚äÜ) Hu = {!!}
