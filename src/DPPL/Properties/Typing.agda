open import Lib.Algebra.Reals

module DPPL.Properties.Typing (R : Reals‚ÇÄ) where

open import DPPL.Syntax R
open import DPPL.Typing R

open import Lib.Prelude
open import Lib.Data.Vector
open import Lib.LocallyNameless.Unfinite
open import Lib.Syntax.Env
open import Lib.Syntax.Substitution

open import Data.Dec.Base
open import Data.Nat.Base using (Nat-is-set)

open SyntaxVars
open TypingVars
open FinsetSyntax

ttup-inv :
  {vs : Tm ^ n}
  {Ts : Ty ^ n}
  (_ : Œì ‚ä¢ tup n ‚ñ∏ vs :[ e ] T)
  (_ : T ‚â°·µ¢ ttup n Ts)
  ‚Üí ---------------------------
  ‚àÄ i ‚Üí Œì ‚ä¢ vs i :[ e ] Ts i
ttup-inv (ttup Htys) Heq i = subst (_ ‚ä¢ _ :[ _ ]_)
  (is-set‚Üícast-pathp (Ty ^_) Nat-is-set (ap snd (ttup-inj (Id‚âÉpath.to Heq))) $‚Çö i)
  (Htys i)
ttup-inv (tsub Hty H‚â§ (stup H<:)) refl·µ¢ i = tsub (ttup-inv Hty refl·µ¢ i) H‚â§ (H<: i)
ttup-inv (tpromote {T = ttup _ _} Hty H‚â§ H‚äÜ) refl·µ¢ i =
  tpromote (ttup-inv Hty refl·µ¢ i) H‚â§ H‚äÜ

weaken-typing : Œì ‚ä¢ t :[ e ] T ‚Üí Œì ‚äÜ Œì' ‚Üí Œì' ‚ä¢ t :[ e ] T
weaken-typing (tsub Hty H‚â§ H<:) H‚äÜ     = tsub (weaken-typing Hty H‚äÜ) H‚â§ H<:
weaken-typing (tpromote Hty H‚â§ H‚äÜ') H‚äÜ = tpromote Hty H‚â§ Œª _ ‚Üí H‚äÜ _ ‚àò H‚äÜ' _
weaken-typing (tvar H‚àà) H‚äÜ             = tvar (H‚äÜ _ H‚àà)
weaken-typing {Œì' = Œì'} (tlam (–òi As Hty)) H‚äÜ = tlam $ –òi (As ‚à™ env-dom Œì') Œª a ‚Üí
  weaken-typing (Hty a ‚¶É {!!} ‚¶Ñ) {!!}
weaken-typing (tapp Hty Hty‚ÇÅ) H‚äÜ =
  tapp (weaken-typing Hty H‚äÜ) (weaken-typing Hty‚ÇÅ H‚äÜ)
weaken-typing (tprim Hœï Hty) H‚äÜ         = tprim Hœï (weaken-typing Hty H‚äÜ)
weaken-typing treal H‚äÜ                  = treal
weaken-typing (ttup Htys) H‚äÜ            = ttup Œª i ‚Üí weaken-typing (Htys i) H‚äÜ
weaken-typing (tproj i Hty) H‚äÜ          = tproj i (weaken-typing Hty H‚äÜ)
weaken-typing (tif Hty Hty‚ÇÅ Hty‚ÇÇ H‚â§) H‚äÜ =
  tif (weaken-typing Hty H‚äÜ) (weaken-typing Hty‚ÇÅ H‚äÜ) (weaken-typing Hty‚ÇÇ H‚äÜ) H‚â§
weaken-typing tuniform H‚äÜ = tuniform
weaken-typing (tsample Hty) H‚äÜ = tsample (weaken-typing Hty H‚äÜ)
weaken-typing (tweight Hty) H‚äÜ = tweight (weaken-typing Hty H‚äÜ)
weaken-typing (tinfer Hty) H‚äÜ  = tinfer (weaken-typing Hty H‚äÜ)
weaken-typing (tdiff Hty Hty‚ÇÅ Hc) H‚äÜ =
  tdiff (weaken-typing Hty H‚äÜ) (weaken-typing Hty‚ÇÅ H‚äÜ) Hc
weaken-typing (tsolve Hty Hty‚ÇÅ Hty‚ÇÇ Hc) H‚äÜ =
  tsolve (weaken-typing Hty H‚äÜ) (weaken-typing Hty‚ÇÅ H‚äÜ) (weaken-typing Hty‚ÇÇ H‚äÜ) Hc

subst-pres-typing :
  {x : ùî∏}
  {t u : Tm}
  {T‚ÇÅ T‚ÇÇ : Ty}
  (_ : [ x ‚à∂ T‚ÇÇ ] & Œì' ‚ä¢ t :[ e ] T‚ÇÅ)
  (_ : Œµ ‚ä¢ u :[ det ] T‚ÇÇ)
  ‚Üí ---------------------------------
  Œµ & Œì' ‚ä¢ (x => u) t :[ e ] T‚ÇÅ
subst-pres-typing {x = x} {u = u} {T‚ÇÇ = T‚ÇÇ} Hty Hu = {!!} where
  go :
    {Œì' : TyEnv}
    {T‚ÇÅ : Ty}
    (_ : Œì' ‚ä¢ t :[ e ] T‚ÇÅ)
    (_ : x ‚à∂ T‚ÇÇ ‚àà Œì')
    ‚Üí -----------------------
    Œì' ‚ä¢ (x => u) t :[ e ] T‚ÇÅ
  go (tvar H‚àà') H‚àà = {!!}
  go (tlam (–òi As Hty)) H‚àà = {!!}
  go (tapp Hty Hty‚ÇÅ) H‚àà = tapp (go Hty H‚àà) (go Hty‚ÇÅ H‚àà)
  go (tprim x Hty) H‚àà = tprim x (go Hty H‚àà)
  go treal H‚àà = treal
  go (ttup Htys) H‚àà = ttup Œª i ‚Üí go (Htys i) H‚àà
  go (tproj i Hty) H‚àà = tproj i (go Hty H‚àà)
  go (tif Hty Hty‚ÇÅ Hty‚ÇÇ H‚â§) H‚àà = tif (go Hty H‚àà) (go Hty‚ÇÅ H‚àà) (go Hty‚ÇÇ H‚àà) H‚â§
  go tuniform H‚àà = tuniform
  go (tsample Hty) H‚àà = tsample (go Hty H‚àà)
  go (tweight Hty) H‚àà = tweight (go Hty H‚àà)
  go (tinfer Hty) H‚àà = tinfer (go Hty H‚àà)
  go (tdiff Hty Hty‚ÇÅ Hc) H‚àà = tdiff (go Hty H‚àà) (go Hty‚ÇÅ H‚àà) Hc
  go (tsolve Hty Hty‚ÇÅ Hty‚ÇÇ Hc) H‚àà = tsolve (go Hty H‚àà) (go Hty‚ÇÅ H‚àà) (go Hty‚ÇÇ H‚àà) Hc
  go (tsub Hty x x‚ÇÅ) H‚àà = tsub (go Hty H‚àà) x x‚ÇÅ
  go (tpromote Hty x x‚ÇÅ) H‚àà = {!!}
  -- go (tvar {a = a} H‚àà) with x ‚â°? a
  -- ... | yes x‚â°a = {!!}
  -- ... | no  x‚â†a = tvar {!!}
  -- go (tlam (–òi As Hty)) = tlam $ –òi ([ x ] ‚à™ As) Œª a ‚Üí {!!}
  -- go (tapp Hty Hty‚ÇÅ)           = tapp (go Hty) (go Hty‚ÇÅ)
  -- go (tprim Hœï Hty)            = tprim Hœï (go Hty)
  -- go treal                     = treal
  -- go (ttup Htys)               = ttup (go ‚àò Htys)
  -- go (tproj i Hty)             = tproj i (go Hty)
  -- go (tif Hty Hty‚ÇÅ Hty‚ÇÇ H‚â§)    = tif (go Hty) (go Hty‚ÇÅ) (go Hty‚ÇÇ) H‚â§
  -- go tuniform                  = tuniform
  -- go (tsample Hty)             = tsample (go Hty)
  -- go (tweight Hty)             = tweight (go Hty)
  -- go (tinfer Hty)              = tinfer (go Hty)
  -- go (tdiff Hty Htype‚ÇÅ Hc)     = tdiff (go Hty) (go Htype‚ÇÅ) Hc
  -- go (tsolve Hty Hty‚ÇÅ Hty‚ÇÇ Hc) = tsolve (go Hty) (go Hty‚ÇÅ) (go Hty‚ÇÇ) Hc
  -- go (tsub Hty H‚â§ H<:)         = tsub (go Hty) H‚â§ H<:
  -- go (tpromote Hty H‚â§ H‚äÜ)      = {!!}
