open import Lib.Algebra.Reals

module DPPL.Properties.Typing (R : Reals‚ÇÄ) where

open import 1Lab.Prelude

open import DPPL.Syntax R
open import DPPL.Typing R

open import Lib.Data.Vector
open import Lib.LocallyNameless.Unfinite
open import Lib.Syntax.Env
open import Lib.Syntax.Substitution

open import Data.Nat.Base using (Nat-is-set)

open SyntaxVars
open TypingVars

ttup-inv :
  {vs : Tm ^ n}
  {Ts : Ty ^ n}
  (_ : Œì ‚ä¢ tup n ‚ñ∏ vs :[ e ] T)
  (_ : T ‚â°·µ¢ ttup n Ts)
  ‚Üí ---------------------------
  ‚àÄ i ‚Üí Œì ‚ä¢ vs i :[ e ] Ts i
ttup-inv (ttup Htys) Heq i = subst (_ ‚ä¢ _ :[ _ ]_)
  (is-set‚Üícast-pathp (Ty ^_) Nat-is-set (ap snd (ttup-inj (Id‚âÉpath.to Heq))) $‚Çö i)
  (Htys i)
ttup-inv (tsub Hty H‚â§ (stup H<:)) refl·µ¢ i = tsub (ttup-inv Hty refl·µ¢ i) H‚â§ (H<: i)
ttup-inv (tpromote {T = ttup _ _} Hty H‚â§ H‚äÜ) refl·µ¢ i =
  tpromote (ttup-inv Hty refl·µ¢ i) H‚â§ H‚äÜ


substitution-pres-typing :
  {x : ùî∏}
  {t u : Tm}
  {T‚ÇÅ T‚ÇÇ : Ty}
  (_ : [ x ‚à∂ T‚ÇÇ ] & Œì' ‚ä¢ t :[ e ] T‚ÇÅ)
  (_ : Œµ ‚ä¢ u :[ det ] T‚ÇÇ)
  ‚Üí ---------------------------------
  Œµ & Œì' ‚ä¢ (x => u) t :[ e ] T‚ÇÅ
substitution-pres-typing {Œì' = Œì'} {x = x} {u = u} {T‚ÇÇ = T‚ÇÇ} Htype Hu = {!!}
