open import Lib.Algebra.Reals

module DPPL.Properties.Progress (R : Reals‚ÇÄ) where

-- Proofs of progress for the DPPL semantics

open Reals R using (‚Ñù)
open Interval R using (ùïÄ)

open import DPPL.Syntax R
open import DPPL.Typing R
open import DPPL.SmallStep R
open import DPPL.Properties.SmallStep R
open import DPPL.Properties.Typing R

open import Lib.Prelude
open import Lib.Data.Fin
open import Lib.Syntax.EvalCtx
open import Lib.Syntax.Env

open SyntaxVars
open EvalVars
open ListSyntax
open NatOrd

module Progress (Ax : EvalAssumptions) where
  open Eval Ax
  open Step Ax

  progress-det :
    Œµ ‚ä¢ t :[ det ] T
    ‚Üí --------------------------------
    IsValue t ‚äé Œ£[ t' ‚àà Tm ] t ‚Üídet t'

  progress-det (tlam _)        = inl vabs
  progress-det treal           = inl vreal
  progress-det (tapp Hty Hty‚ÇÅ) = inr $ case (progress-det Hty) of Œª where
    (inr (t' , Hstep)) ‚Üí _ , cong-step·µà (Œª _ ()) Hstep
    (inl Hv) ‚Üí case (progress-det Hty‚ÇÅ) of Œª where
      (inr (t' , Hstep)) ‚Üí _ , cong-step·µà (Œª { ‚ÇÄ (s‚â§s 0‚â§x) ‚Üí Hv }) Hstep
      (inl Hv‚ÇÅ) ‚Üí
        let _ , t , Heq = canonical-‚áí Hty Hv refl·µ¢
        in  _ , estep (eapp Heq Hv‚ÇÅ)
  progress-det (tprim Hœï Hty) = inr $ case (progress-det Hty) of Œª where
    (inr (t' , Hstep)) ‚Üí _ , cong-step·µà (Œª _ ()) Hstep
    (inl Hv) ‚Üí
      let _ , Heq , Hvs = canonical-tup Hty Hv refl·µ¢
          Htys          = ttup-inv (subst (_ ‚ä¢_:[ _ ] _) Heq Hty) refl·µ¢
          Hreals i      = canonical-real (Htys i) (Hvs i) refl·µ¢ .snd
      in _ , estep (eprim (Heq ‚àô ap (tup _ ‚ñ∏_) (funext Hreals)))
  progress-det (ttup Htys) with Fin-search-‚äé (progress-det ‚àò Htys)
  ... | inr (j , (t' , Hstep) , Hvs) = inr $ _ , cong-step·µà Hvs Hstep
  ... | inl Hvs                      = inl $ vtup Hvs
  progress-det (tproj i Hty) = inr $ case (progress-det Hty) of Œª where
    (inr (t' , Hstep)) ‚Üí _ , cong-step·µà (Œª _ ()) Hstep
    (inl Hv) ‚Üí
      let _ , Heq , Hvs = canonical-tup Hty Hv refl·µ¢
      in  _ , estep (eproj i Heq Hvs)
  progress-det (tif Hty Hty‚ÇÅ Hty‚ÇÇ _) = inr $ case (progress-det Hty) of Œª where
    (inr (t' , Hstep)) ‚Üí _ , cong-step·µà {n = fzero} (Œª _ ()) Hstep
    (inl Hv) ‚Üí
      let _ , Heq = canonical-real Hty Hv refl·µ¢
      in  _ , estep (eif Heq)
  progress-det (tinfer Hty) with progress-det Hty
  ... | inr (t' , Hstep) = inr $ _ , cong-step·µà (Œª _ ()) Hstep
  ... | inl Hv           = inl $ vinfer Hv
  progress-det (tdiff Hty Hty‚ÇÅ _) = inr $ case (progress-det Hty) of Œª where
    (inr (t' , Hstep)) ‚Üí _ , cong-step·µà (Œª _ ()) Hstep
    (inl Hv) ‚Üí case (progress-det Hty‚ÇÅ) of Œª where
      (inr (t' , Hstep)) ‚Üí _ , cong-step·µà (Œª { ‚ÇÄ (s‚â§s 0‚â§x) ‚Üí Hv }) Hstep
      (inl Hv‚ÇÅ) ‚Üí _ , estep (ediff Hv Hv‚ÇÅ)
  progress-det (tsolve Hty Hty‚ÇÅ Hty‚ÇÇ _) = inr $ case (progress-det Hty) of Œª where
    (inr (t' , Hstep)) ‚Üí _ , cong-step·µà (Œª _ ()) Hstep
    (inl Hv) ‚Üí case (progress-det Hty‚ÇÅ) of Œª where
      (inr (t' , Hstep)) ‚Üí _ , cong-step·µà (Œª { ‚ÇÄ (s‚â§s 0‚â§x) ‚Üí Hv }) Hstep
      (inl Hv‚ÇÅ) ‚Üí case (progress-det Hty‚ÇÇ) of Œª where
        (inr (t' , Hstep)) ‚Üí
          _ , cong-step·µà (Œª { ‚ÇÄ (s‚â§s 0‚â§x) ‚Üí Hv ; ‚ÇÅ (s‚â§s (s‚â§s 0‚â§x)) ‚Üí Hv‚ÇÅ }) Hstep
        (inl Hv‚ÇÇ) ‚Üí _ , estep (esolve Hv Hv‚ÇÅ Hv‚ÇÇ)
  progress-det (tsub {e = det} Hty _ _) = progress-det Hty
  progress-det (tpromote {Œì} Hty _ H‚äÜ) rewrite Id‚âÉpath.from (env-‚äÜ-nil Œì H‚äÜ) =
    progress-det Hty


  progress-rnd :
    Œµ ‚ä¢ t :[ rnd ] T
    ‚Üí ---------------------------------------------------------------
    IsValue t ‚äé Œ£[ tws' ‚àà Tm √ó ‚Ñù √ó List ùïÄ ] (t , w , p ‚à∑ s) ‚Üírnd tws'

  progress-rnd (tapp Hty Hty‚ÇÅ) = inr $ case (progress-rnd Hty) of Œª where
    (inr (t' , Hstep)) ‚Üí _ , cong-step ≥ (Œª _ ()) Hstep
    (inl Hv) ‚Üí case (progress-rnd Hty‚ÇÅ) of Œª where
      (inr (t' , Hstep)) ‚Üí _ , cong-step ≥ (Œª { ‚ÇÄ (s‚â§s 0‚â§x) ‚Üí Hv }) Hstep
      (inl Hv‚ÇÅ) ‚Üí
        let _ , t , Heq = canonical-‚áí Hty Hv refl·µ¢
        in  _ , estep (edet (eapp Heq Hv‚ÇÅ))
  progress-rnd (tprim x Hty) = inr $ case (progress-rnd Hty) of Œª where
    (inr (t' , Hstep)) ‚Üí _ , cong-step ≥ (Œª _ ()) Hstep
    (inl Hv) ‚Üí
      let _ , Heq , Hvs = canonical-tup Hty Hv refl·µ¢
          Htys          = ttup-inv (subst (_ ‚ä¢_:[ _ ] _) Heq Hty) refl·µ¢
          Hreals i      = canonical-real (Htys i) (Hvs i) refl·µ¢ .snd
      in _ , estep (edet (eprim (Heq ‚àô ap (tup _ ‚ñ∏_) (funext Hreals))))
  progress-rnd (ttup Htys) with Fin-search-‚äé (progress-rnd ‚àò Htys)
  ... | inr (j , (t' , Hstep) , Hvs) = inr $ _ , cong-step ≥ Hvs Hstep
  ... | inl Hvs                      = inl $ vtup Hvs
  progress-rnd (tproj i Hty) = inr $ case (progress-rnd Hty) of Œª where
    (inr (t' , Hstep)) ‚Üí _ , cong-step ≥ (Œª _ ()) Hstep
    (inl Hv) ‚Üí
      let _ , Heq , Hvs = canonical-tup Hty Hv refl·µ¢
      in  _ , estep (edet (eproj i Heq Hvs))
  progress-rnd (tif Hty Hty‚ÇÅ Hty‚ÇÇ _) = inr $ case (progress-rnd Hty) of Œª where
    (inr (t' , Hstep)) ‚Üí _ , cong-step ≥ {n = fzero} (Œª _ ()) Hstep
    (inl Hv) ‚Üí
      let _ , Heq = canonical-real Hty Hv refl·µ¢
      in  _ , estep (edet (eif Heq))
  progress-rnd tuniform = inr $ _ , estep euniform
  progress-rnd (tsample Hty) = inr $ case (progress-rnd Hty) of Œª where
    (inr (t' , Hstep)) ‚Üí _ , cong-step ≥ (Œª _ ()) Hstep
    (inl Hv) ‚Üí
      let _ , Heq , Hv = canonical-dist Hty Hv refl·µ¢
      in  _ , estep (esample Heq Hv)
  progress-rnd (tweight Hty) = inr $ case (progress-rnd Hty) of Œª where
    (inr (t' , Hstep)) ‚Üí _ , cong-step ≥ (Œª _ ()) Hstep
    (inl Hv) ‚Üí
      let _ , Heq = canonical-real Hty Hv refl·µ¢
      in  _ , estep (eweight Heq)
  progress-rnd (tinfer Hty) with progress-rnd Hty
  ... | inr (t' , Hstep) = inr $ _ , cong-step ≥ (Œª _ ()) Hstep
  ... | inl Hv           = inl $ vinfer Hv
  progress-rnd (tdiff Hty Hty‚ÇÅ _) = inr $ case (progress-rnd Hty) of Œª where
    (inr (t' , Hstep)) ‚Üí _ , cong-step ≥ (Œª _ ()) Hstep
    (inl Hv) ‚Üí case (progress-rnd Hty‚ÇÅ) of Œª where
      (inr (t' , Hstep)) ‚Üí _ , cong-step ≥ (Œª { ‚ÇÄ (s‚â§s 0‚â§x) ‚Üí Hv }) Hstep
      (inl Hv‚ÇÅ) ‚Üí _ , estep (edet (ediff Hv Hv‚ÇÅ))
  progress-rnd (tsolve Hty Hty‚ÇÅ Hty‚ÇÇ _) = inr $ case (progress-rnd Hty) of Œª where
    (inr (t' , Hstep)) ‚Üí _ , cong-step ≥ (Œª _ ()) Hstep
    (inl Hv) ‚Üí case (progress-rnd Hty‚ÇÅ) of Œª where
      (inr (t' , Hstep)) ‚Üí _ , cong-step ≥ (Œª { ‚ÇÄ (s‚â§s 0‚â§x) ‚Üí Hv }) Hstep
      (inl Hv‚ÇÅ) ‚Üí case (progress-rnd Hty‚ÇÇ) of Œª where
        (inr (t' , Hstep)) ‚Üí
          _ , cong-step ≥ (Œª { ‚ÇÄ (s‚â§s 0‚â§x) ‚Üí Hv ; ‚ÇÅ (s‚â§s (s‚â§s 0‚â§x)) ‚Üí Hv‚ÇÅ }) Hstep
        (inl Hv‚ÇÇ) ‚Üí _ , estep (edet (esolve Hv Hv‚ÇÅ Hv‚ÇÇ))
  progress-rnd (tsub {e = rnd} Hty _ _) = progress-rnd Hty
  progress-rnd (tsub {e = det} Hty _ _) with progress-det Hty
  ... | inr (_ , Hstep) = inr $ _ , ‚Üídet‚äÜ‚Üírnd Hstep
  ... | inl Hv          = inl Hv
  progress-rnd (tpromote {Œì} Hty _ H‚äÜ) rewrite Id‚âÉpath.from (env-‚äÜ-nil Œì H‚äÜ) =
    progress-rnd Hty
