open import Lib.Algebra.Reals

module DPPL.Properties.SmallStep (R : Reals‚ÇÄ) where

open Reals R using (‚Ñù)
open Interval R

open import DPPL.Syntax R
open import DPPL.Typing R
open import DPPL.SmallStep R

-- Minor lemmas about the step relations (and typing)

open import Lib.Prelude
open import Lib.Data.Vector
open import Lib.LocallyNameless.BindingSignature
open import Lib.Syntax.EvalCtx

open SyntaxVars
open TypingVars
open EvalVars

-- IsValue is a proposition

IsValue-is-prop : is-prop (IsValue t)
IsValue-is-prop vabs vabs            = refl
IsValue-is-prop vreal vreal          = refl
IsValue-is-prop (vtup vs) (vtup vs') =
  ap vtup (funext Œª i ‚Üí IsValue-is-prop (vs i) (vs' i))
IsValue-is-prop (vinfer v) (vinfer v') =
  ap vinfer (IsValue-is-prop v v')

instance
  H-Level-IsValue : ‚àÄ {n} ‚Üí H-Level (IsValue t) (1 + n)
  H-Level-IsValue = basic-instance 1 IsValue-is-prop

-- Canonical forms

canonical-‚áí :
  {T‚ÇÅ T‚ÇÇ : Ty}
  (_ : Œì ‚ä¢ t :[ e ] T)
  (_ : IsValue t)
  (_ : T ‚â°·µ¢ T‚ÇÅ ‚áí[ c , e' ] T‚ÇÇ)
  ‚Üí -------------------------------------------
  Œ£[ T' ‚àà Ty ] Œ£[ t' ‚àà Tm ^ 1 ] t ‚â° lam T' ‚ñ∏ t'

canonical-‚áí (tlam _) _ refl·µ¢                   = _ , _ , refl
canonical-‚áí (tsub Hty _ (sarr _ _ _ _)) Hval _ = canonical-‚áí Hty Hval refl·µ¢
canonical-‚áí (tpromote {T = _ ‚áí[ _ , _ ] _} Hty _ _) Hval _ =
  canonical-‚áí Hty Hval refl·µ¢

canonical-real :
  (_ : Œì ‚ä¢ t :[ e ] T)
  (_ : IsValue t)
  (_ : T ‚â°·µ¢ treal c)
  ‚Üí -------------------
  Œ£[ r ‚àà ‚Ñù ] t ‚â° real r

canonical-real treal _ _                     = _ , refl
canonical-real (tsub Hty _ (sreal _)) Hval _ = canonical-real Hty Hval refl·µ¢
canonical-real (tpromote {T = treal _} Hty _ _) Hval _ =
  canonical-real Hty Hval refl·µ¢

canonical-tup :
  {Ts : Ty ^ n}
  (_ : Œì ‚ä¢ t :[ e ] T)
  (_ : IsValue t)
  (_ : T ‚â°·µ¢ ttup n Ts)
  ‚Üí ----------------------------------------------------
  Œ£[ ts ‚àà Tm ^ n ] t ‚â° tup n ‚ñ∏ ts √ó ‚àÄ i ‚Üí IsValue (ts i)

canonical-tup (ttup Htys) (vtup Hvs) refl·µ¢     = _ , refl , Hvs
canonical-tup (tsub Hty _ (stup _)) Hval refl·µ¢ = canonical-tup Hty Hval refl·µ¢
canonical-tup (tpromote {T = ttup _ _} Hty _ _) Hval refl·µ¢ =
  canonical-tup Hty Hval refl·µ¢

canonical-dist :
  (_ : Œì ‚ä¢ t :[ e ] T)
  (_ : IsValue t)
  (_ : T ‚â°·µ¢ tdist T')
  ‚Üí -------------------------------------------
  Œ£[ v ‚àà Tm ^ 1 ] t ‚â° infer ‚ñ∏ v √ó IsValue (v ‚ÇÄ)

canonical-dist (tinfer Hty) (vinfer Hv) _    = _ , refl , Hv
canonical-dist (tsub Hty _ (sdist _)) Hval _ = canonical-dist Hty Hval refl·µ¢
canonical-dist (tpromote {T = tdist _} Hty _ _) Hval _ =
  canonical-dist Hty Hval refl·µ¢

val-type-det :
  (_ : Œì ‚ä¢ t :[ e ] T)
  (_ : IsValue t)
  ‚Üí ------------------
  Œì ‚ä¢ t :[ det ] T
val-type-det (tsub Hty _ H<:) Hval = tsub (val-type-det Hty Hval) ‚â§-refl H<: where
  open Eff‚â§
val-type-det (tpromote Hty H‚â§ H‚äÜ) Hval = tpromote (val-type-det Hty Hval) H‚â§ H‚äÜ
val-type-det (tlam Hlam) _             = tlam Hlam
val-type-det treal _                   = treal
val-type-det (ttup Htys) (vtup Hvs)    = ttup Œª i ‚Üí val-type-det (Htys i) (Hvs i)
val-type-det (tinfer Hty) (vinfer Hv)  = tinfer (val-type-det Hty Hv)

module Step (Ax : EvalAssumptions) where
  open Eval Ax

  ‚Üídet‚äÜ‚Üírnd : t ‚Üídet t' ‚Üí (t , w , s) ‚Üírnd (t' , w , s)

  ‚Üídet‚äÜ‚Üírnd (estep Hstep)     = estep (edet Hstep)
  ‚Üídet‚äÜ‚Üírnd (econg ctx Hstep) = econg (_ , ctx , refl) (‚Üídet‚äÜ‚Üírnd Hstep)

  private
    module C1 = CongStep _‚Üí·µà_ DetCtx id refl id
    module C2 = CongStep _‚Üí ≥_ RndCtx √ó-map‚ÇÅ refl (Œª ctx ‚Üí _ , ctx , refl)

  cong-step·µà = C1.cong-step {unit} {unit}

  cong-step ≥ = Œª {ws ws' o ts t' n} ‚Üí
    C2.cong-step {unit , ws} {unit , ws'} {o} {ts} {t'} {n}

  ctx-value-inv :
    {E : Tm ‚Üí Tm}
    (_ : DetCtx E)
    ‚Üí -----------------------
    IsValue (E t) ‚Üí IsValue t

  ctx-value-inv (ectx _) Hv = go Hv where
    go
      : {o : TmOp} {ts : Tm ^ length (ar TmSig o)}
      ‚Üí {j : Fin (len ‚¶É eval-order {o} ‚¶Ñ)}
      ‚Üí IsValue (o ‚ñ∏ updateAt ts (ord ‚¶É eval-order {o} ‚¶Ñ j) t)
      ‚Üí ------------------------------------------------------
        IsValue t
    go {ts = ts} {j = j} (vtup Hvs) = subst IsValue (updateAt-updates ts j _) (Hvs j)
    go {j = j} (vinfer Hv) with zero ‚Üê fin-view j = Hv

  value-cannot-step-det : IsValue t ‚Üí ¬¨ t ‚Üídet t'
  value-cannot-step-det Hv (estep Hstep) with vabs ‚Üê Hv | () ‚Üê Hstep
  value-cannot-step-det Hv (econg Hctx Hstep) =
    value-cannot-step-det (ctx-value-inv Hctx Hv) Hstep

  value-cannot-step-rnd :
    {t t' : Tm √ó ‚Ñù √ó List ùïÄ}
    (_ : IsValue (t .fst))
    ‚Üí ------------------------
    ¬¨ t ‚Üírnd t'

  value-cannot-step-rnd Hv (estep Hstep) with vabs ‚Üê Hv | edet () ‚Üê Hstep
  value-cannot-step-rnd Hv (econg (_ , Hctx , HE) Hstep) = value-cannot-step-rnd
    (ctx-value-inv Hctx (subst IsValue (ap fst (HE $‚Çö _)) Hv)) Hstep
