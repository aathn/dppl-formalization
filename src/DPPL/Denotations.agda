open import Lib.Algebra.Reals

module DPPL.Denotations (R : Reals‚ÇÄ) where

open Reals R using (‚Ñù)

open import DPPL.Syntax R
open import DPPL.Typing R

open import Lib.Prelude
open import Lib.Data.Vector
open import Lib.LocallyNameless.Unfinite
open import Lib.Syntax.Env

open import Data.Power

open SyntaxVars

-- open import Data.Fin using (splitAt)
-- open import Data.Fin.Properties using (to‚Ñï<n)
-- open import Data.List.Relation.Unary.All as All using (All)
-- open import Data.Vec.Functional
-- open import Relation.Unary using (_‚àà_; Pred)
-- open import Relation.Binary.PropositionalEquality using (subst‚ÇÇ)
-- import Data.List.Relation.Binary.Sublist.Propositional as Sub

-- private
--   variable
--     n m k : ‚Ñï
--     Œò : Coeff ^ n
--     Œò‚Ä≤ : Coeff ^ m
--     Œò‚Ä≥ : Coeff ^ k

record DenotAssumptions : Type‚ÇÅ where
  field
    [_,_]-reg : Coeff ‚Üí Coeff ‚Üí ‚Ñô (‚Ñù ^ n ‚Üí ‚Ñù ^ m)

--     ‚ü¶_‚üß·¥æ : (œï : Prim) ‚Üí ‚Ñù ^ PrimAr œï ‚Üí ‚Ñù

--     ùê∑ :
--       (f : ‚Ñù ^ n ‚Üí ‚Ñù)
--       (_ : ‚àÄ i ‚Üí œÄ[ i ] Œò ‚â§‚Ä≤ P)
--       (_ : f ‚àà ùîâ Œò c)
--       ‚Üí -----------------------
--       ‚Ñù ^ (n + n) ‚Üí ‚Ñù

--   ùîâ‚Ä≤ : (Œò : Coeff ^ n) (Œò‚Ä≤ : Coeff ^ m) ‚Üí Pred (‚Ñù ^ n ‚Üí ‚Ñù ^ m) ‚Ñì‚ÇÄ
--   ùîâ‚Ä≤ Œò Œò‚Ä≤ f = (i : Fin _) ‚Üí œÄ[ i ] ‚àò f ‚àà ùîâ Œò (œÄ[ i ] Œò‚Ä≤)

--   field
--     ùîâ-const : (r : ‚Ñù) ‚Üí const r ‚àà ùîâ [] A

--     ùîâ-proj : id ‚àà ùîâ‚Ä≤ Œò Œò

--     ùîâ-cond :
--       (Œª Œ∏ ‚Üí if Œ∏ ‚ÇÄ ‚â≤? 0·¥ø then Œ∏ ‚ÇÅ else Œ∏ ‚ÇÇ)
--         ‚àà ùîâ (P ‚à∑ c ‚à∑ c ‚à∑ []) c

--     ùîâ-compose :
--       {g : ‚Ñù ^ n ‚Üí ‚Ñù ^ m}
--       {f : ‚Ñù ^ m ‚Üí ‚Ñù}
--       (_ : g ‚àà ùîâ‚Ä≤ Œò Œò‚Ä≤)
--       (_ : f ‚àà ùîâ Œò‚Ä≤ c)
--       ‚Üí -----------------
--        f ‚àò g ‚àà ùîâ Œò c

--     ùîâ-sub :
--       {f : ‚Ñù ^ n ‚Üí ‚Ñù}
--       (_ : ‚àÄ i ‚Üí œÄ[ i ] Œò ‚â§‚Ä≤ œÄ[ i ] Œò‚Ä≤)
--       (_ : c‚Ä≤ ‚â§‚Ä≤ c)
--       ‚Üí -------------------------------
--       f ‚àà ùîâ Œò c ‚Üí f ‚àà ùîâ Œò‚Ä≤ c‚Ä≤

--     ùîâ-promote :
--       {f : ‚Ñù ^ n ‚Üí ‚Ñù}
--       ‚Üí ------------------------------------------
--       f ‚àà ùîâ Œò c ‚Üí f ‚àà ùîâ (map (c‚Ä≤ ‚äî‚Ä≤_) Œò) (c‚Ä≤ ‚äî‚Ä≤ c)

--     ùîâ-prim :
--       {Œò : Coeff ^ PrimAr œï}
--       (_ : PrimTy œï ‚â° (Œò , c))
--       ‚Üí ----------------------
--       ‚ü¶ œï ‚üß·¥æ ‚àà ùîâ Œò c

--     ùîâ-diff :
--       {Œò‚Ä≤ : Coeff ^ m}
--       (f : ‚Ñù ^ (n + m) ‚Üí ‚Ñù)
--       (H‚â§ : ‚àÄ i ‚Üí œÄ[ i ] Œò ‚â§‚Ä≤ P)
--       (Hf : f ‚àà ùîâ (Œò ++ Œò‚Ä≤) c)
--       (Hf‚Ä≤ : ‚àÄ Œ∏‚Ä≤ ‚Üí (Œª Œ∏ ‚Üí f (Œ∏ ++ Œ∏‚Ä≤)) ‚àà ùîâ Œò c)
--       ‚Üí ----------------------------------------------
--       (Œª xvŒ∏ ‚Üí ùê∑ _ H‚â§ (Hf‚Ä≤ (drop _ xvŒ∏)) (take _ xvŒ∏))
--         ‚àà ùîâ ((Œò ++ replicate n A) ++ Œò‚Ä≤) c


-- module ùîâ-lemmas (Ass : DenotAssumptions) where
--   open DenotAssumptions Ass

--   ùîâ-const‚Ä≤ : (Œ∏ : ‚Ñù ^ n) ‚Üí const Œ∏ ‚àà ùîâ‚Ä≤ Œò Œò‚Ä≤
--   ùîâ-const‚Ä≤ {Œò = Œò} Œ∏ i =
--     ùîâ-compose {Œò‚Ä≤ = Œª ()} {g = Œª _ ()} (Œª ()) $
--     subst‚ÇÇ (Œª Œò Œò‚Ä≤ ‚Üí const (Œ∏ i) ‚àà ùîâ Œò Œò‚Ä≤)
--       (funext Œª ()) (i‚â•j‚áíi‚äî‚Ä≤j‚â°i 0‚â§)
--       (ùîâ-promote (ùîâ-const _))

--   ùîâ-compose‚Ä≤ :
--     {g : ‚Ñù ^ n ‚Üí ‚Ñù ^ m}
--     {f : ‚Ñù ^ m ‚Üí ‚Ñù ^ k}
--     (_ : g ‚àà ùîâ‚Ä≤ Œò Œò‚Ä≤)
--     (_ : f ‚àà ùîâ‚Ä≤ Œò‚Ä≤ Œò‚Ä≥)
--     ‚Üí -----------------
--      f ‚àò g ‚àà ùîâ‚Ä≤ Œò Œò‚Ä≥
--   ùîâ-compose‚Ä≤ Hg Hf = ùîâ-compose Hg ‚àò Hf

--   ùîâ-++ :
--     {f : ‚Ñù ^ n ‚Üí ‚Ñù ^ m}
--     {g : ‚Ñù ^ n ‚Üí ‚Ñù ^ k}
--     (_ : f ‚àà ùîâ‚Ä≤ Œò Œò‚Ä≤)
--     (_ : g ‚àà ùîâ‚Ä≤ Œò Œò‚Ä≥)
--     ‚Üí ----------------------------------
--     (Œª Œ∏ ‚Üí f Œ∏ ++ g Œ∏) ‚àà ùîâ‚Ä≤ Œò (Œò‚Ä≤ ++ Œò‚Ä≥)
--   ùîâ-++ {m = m} Hf Hg i with splitAt m i
--   ... | Œπ‚ÇÅ i = Hf i
--   ... | Œπ‚ÇÇ i = Hg i

--   ùîâ-papply :
--     {f : ‚Ñù ^ (n + m) ‚Üí ‚Ñù}
--     (_ : f ‚àà ùîâ (Œò ++ Œò‚Ä≤) c)
--     (Œ∏‚Ä≤ : ‚Ñù ^ m)
--     ‚Üí -------------------------
--     (Œª Œ∏ ‚Üí f (Œ∏ ++ Œ∏‚Ä≤)) ‚àà ùîâ Œò c
--   ùîâ-papply Hf Œ∏ =
--     ùîâ-compose (ùîâ-++ ùîâ-proj (ùîâ-const‚Ä≤ _)) Hf

--   ùîâ-proj‚Ä≤ : (H‚äÜ : Œò ‚äÜ Œò‚Ä≤) ‚Üí proj-‚äÜ (H‚äÜ .œÄ‚ÇÅ) ‚àà ùîâ‚Ä≤ Œò‚Ä≤ Œò
--   ùîâ-proj‚Ä≤ {Œò‚Ä≤ = Œò‚Ä≤} H‚äÜ i rewrite H‚äÜ .œÄ‚ÇÇ i = ùîâ-proj _

--   ùîâ-weaken :
--     {f : ‚Ñù ^ n ‚Üí ‚Ñù}
--     (H‚äÜ : Œò ‚äÜ Œò‚Ä≤)
--     ‚Üí ---------------------------------------
--     f ‚àà ùîâ Œò c ‚Üí f ‚àò proj-‚äÜ (H‚äÜ .œÄ‚ÇÅ) ‚àà ùîâ Œò‚Ä≤ c
--   ùîâ-weaken H‚äÜ Hf = ùîâ-compose (ùîâ-proj‚Ä≤ H‚äÜ) Hf


module Denotations (Ax : DenotAssumptions) where
  open DenotAssumptions Ax

  Ob : Type
  Ob = Nat √ó Coeff

  ùîá : Type‚ÇÅ
  ùîá = Ob ‚Üí Type

  -- ùîá-hom : (D1 D2 : ùîá) ‚Üí ‚Ñô (ùîá)

  Ty-denot : Type ‚Üí ùîá
  Ty-denot = {!!}
  -- ‚ü¶ treal c ‚üß·µÄ Œò = ‚àÉ (ùîâ Œò c)
  -- ‚ü¶ T‚ÇÅ ‚áí[ det ] T‚ÇÇ ‚üß·µÄ Œò = {m : ‚Ñï} {Œò‚Ä≤ : Coeff ^ m} ‚Üí Œò ‚äÜ Œò‚Ä≤ ‚Üí ‚ü¶ T‚ÇÅ ‚üß·µÄ Œò‚Ä≤ ‚Üí ‚ü¶ T‚ÇÇ ‚üß·µÄ Œò‚Ä≤
  -- ‚ü¶ ttup n Ts ‚üß·µÄ Œò = (i : Fin n) ‚Üí ‚ü¶ Ts i ‚üß·µÄ Œò
  -- -- Probabilistic subterms are interpreted trivially for the time being.
  -- ‚ü¶ T‚ÇÅ ‚áí[ rnd ] T‚ÇÇ ‚üß·µÄ Œò = ùüô
  -- ‚ü¶ tdist T ‚üß·µÄ Œò = ùüô

--   ‚ü¶_‚üß·¥± : TyEnv ‚Üí Coeff ^ n ‚Üí Set
--   ‚ü¶ Œì ‚üß·¥± Œò = All (Œª (_ , T) ‚Üí ‚ü¶ T ‚üß·µÄ Œò) Œì


--   weaken : Œò ‚äÜ Œò‚Ä≤ ‚Üí ‚ü¶ T ‚üß·µÄ Œò ‚Üí ‚ü¶ T ‚üß·µÄ Œò‚Ä≤
--   weaken {T = treal c} H‚äÜ (_ , Hf) = _ , ùîâ-weaken H‚äÜ Hf
--   weaken {T = T‚ÇÅ ‚áí[ det ] T‚ÇÇ} H‚äÜ Hf {Œò‚Ä≤ = Œò‚Ä≤} H‚äÜ‚Ä≤ =
--     Hf (‚äÜ-trans {zs = Œò‚Ä≤} H‚äÜ H‚äÜ‚Ä≤)
--   weaken {T = T‚ÇÅ ‚áí[ rnd ] T‚ÇÇ} _ _ = tt
--   weaken {T = ttup n Ts} H‚äÜ Hsem i = weaken H‚äÜ (Hsem i)
--   weaken {T = tdist T} H‚äÜ Hsem = tt

--   weaken-env : Œò ‚äÜ Œò‚Ä≤ ‚Üí ‚ü¶ Œì ‚üß·¥± Œò ‚Üí ‚ü¶ Œì ‚üß·¥± Œò‚Ä≤
--   weaken-env H‚äÜ = All.map (weaken H‚äÜ)

--   weaken-Œì : Œì Sub.‚äÜ Œì‚Ä≤ ‚Üí ‚ü¶ Œì‚Ä≤ ‚üß·¥± Œò ‚Üí ‚ü¶ Œì ‚üß·¥± Œò
--   weaken-Œì Sub.[] HŒì‚Ä≤ = HŒì‚Ä≤
--   weaken-Œì (y Sub.‚à∑ ≥ H‚äÜ) (_ All.‚à∑ HŒì‚Ä≤) = weaken-Œì H‚äÜ HŒì‚Ä≤
--   weaken-Œì (refl Sub.‚à∑ H‚äÜ) (px All.‚à∑ HŒì‚Ä≤) = px All.‚à∑ weaken-Œì H‚äÜ HŒì‚Ä≤

--   sub-compat : T <: T‚Ä≤ ‚Üí ‚ü¶ T ‚üß·µÄ Œò ‚Üí ‚ü¶ T‚Ä≤ ‚üß·µÄ Œò
--   sub-compat (sreal H‚â§) (f , Hf) = f , ùîâ-sub (Œª _ ‚Üí ‚â§refl) H‚â§ Hf
--   sub-compat (stup Hsub) HT i = sub-compat (Hsub i) (HT i)
--   sub-compat (sarr {e = det} {e‚Ä≤ = det} Hsub Hsub‚ÇÅ H‚â§) HT H‚äÜ HT‚ÇÅ =
--     sub-compat Hsub‚ÇÅ (HT H‚äÜ (sub-compat Hsub HT‚ÇÅ))
--   sub-compat (sarr {e‚Ä≤ = rnd} Hsub Hsub‚ÇÅ H‚â§) HT = tt
--   sub-compat (sdist _) _ = tt

--   abs-real-denot : {cs : Coeff ^ n} ‚Üí ‚ü¶ T ‚üß·µÄ (cs ++ Œò) ‚Üí ‚ü¶ treals n cs ‚áí[ det ] T ‚üß·µÄ Œò
--   abs-real-denot {n = n} {T = treal c‚Ä≤} {cs = cs} f {Œò‚Ä≤ = Œò‚Ä≤} H‚äÜ xs
--     with f , Hf ‚Üê weaken (‚äÜ-++‚Å∫ ‚äÜ-refl H‚äÜ) f = _ , ùîâ-compose Hg Hf
--     where
--       Hg : (Œª Œ∏ ‚Üí (Œª i ‚Üí xs i .œÄ‚ÇÅ Œ∏) ++ Œ∏) ‚àà ùîâ‚Ä≤ Œò‚Ä≤ (cs ++ Œò‚Ä≤)
--       Hg i with splitAt n i
--       ... | Œπ‚ÇÅ i = xs i .œÄ‚ÇÇ
--       ... | Œπ‚ÇÇ i = ùîâ-proj i
--   abs-real-denot {T = T‚ÇÅ ‚áí[ det ] T‚ÇÇ} {cs = cs} Hf H‚äÜ xs {Œò‚Ä≤ = Œò‚Ä≤} H‚äÜ‚Ä≤ s =
--     abs-real-denot fs ‚äÜ-refl Œª i ‚Üí _ , ùîâ-weaken H‚äÜ‚Ä≤ (xs i .œÄ‚ÇÇ)
--     where
--       fs : ‚ü¶ T‚ÇÇ ‚üß·µÄ (cs ++ Œò‚Ä≤)
--       fs = Hf (‚äÜ-++‚Å∫ ‚äÜ-refl (‚äÜ-trans {zs = Œò‚Ä≤} H‚äÜ H‚äÜ‚Ä≤)) (weaken (‚äÜ-++‚Å∫À° _ ‚äÜ-refl) s)
--   abs-real-denot {T = T‚ÇÅ ‚áí[ rnd ] T‚ÇÇ} {cs = cs} _ _ _ = tt
--   abs-real-denot {T = ttup n Ts} Hsem H‚äÜ f i = abs-real-denot (Hsem i) H‚äÜ f
--   abs-real-denot {T = tdist T} Hsem H‚äÜ f = tt

--   app-real-denot : {cs : Coeff ^ n} ‚Üí ‚ü¶ treals n cs ‚áí[ det ] T ‚üß·µÄ Œò ‚Üí ‚ü¶ T ‚üß·µÄ (cs ++ Œò)
--   app-real-denot f =
--     f (‚äÜ-++‚Å∫À° _ ‚äÜ-refl) Œª i ‚Üí _ , ùîâ-proj‚Ä≤ (‚äÜ-++‚Å∫ ≥ _ ‚äÜ-refl) i

--   if-denot : ‚ü¶ treal P ‚üß·µÄ Œò ‚Üí ‚ü¶ T ‚üß·µÄ Œò ‚Üí ‚ü¶ T ‚üß·µÄ Œò ‚Üí ‚ü¶ T ‚üß·µÄ Œò
--   if-denot {T = treal c} (s , Hs) (s‚ÇÅ , Hs‚ÇÅ) (s‚ÇÇ , Hs‚ÇÇ) =
--     let g Œ∏ = Œª {‚ÇÄ ‚Üí s Œ∏ ; ‚ÇÅ ‚Üí s‚ÇÅ Œ∏ ; ‚ÇÇ ‚Üí s‚ÇÇ Œ∏ }
--         Hg = Œª {‚ÇÄ ‚Üí Hs ; ‚ÇÅ ‚Üí Hs‚ÇÅ ; ‚ÇÇ ‚Üí Hs‚ÇÇ }
--     in
--     _ , ùîâ-compose {g = g} Hg ùîâ-cond
--   if-denot {T = T‚ÇÅ ‚áí[ det ] T‚ÇÇ} s s‚ÇÅ s‚ÇÇ H‚äÜ x =
--     if-denot (weaken H‚äÜ s) (s‚ÇÅ H‚äÜ x) (s‚ÇÇ H‚äÜ x)
--   if-denot {T = T‚ÇÅ ‚áí[ rnd ] T‚ÇÇ} s s‚ÇÅ s‚ÇÇ = tt
--   if-denot {T = ttup n Ts} s s‚ÇÅ s‚ÇÇ i = if-denot s (s‚ÇÅ i) (s‚ÇÇ i)
--   if-denot {T = tdist T} s s‚ÇÅ s‚ÇÇ = tt

--   ‚ü¶_‚üß : Œì ‚ä¢ t :[ c , det ] T ‚Üí {Œò : Coeff ^ n} ‚Üí ‚ü¶ Œì ‚üß·¥± Œò ‚Üí ‚ü¶ c ‚äô T ‚üß·µÄ Œò
--   ‚ü¶ tvar H‚àà H‚â§ _ ‚üß {Œò} Œ≥ =
--     subst (Œª T ‚Üí ‚ü¶ T ‚üß·µÄ Œò) (symm $ ‚â§·∂ú‚áí‚äô H‚â§) $ All.lookup Œ≥ (Sub.to‚àà H‚àà)
--   ‚ü¶ tabs {e = det} (–òi As Habs) ‚üß {Œò} Œ≥ H‚äÜ s =
--     ‚ü¶ Habs (new As) {{unfinite As}} ‚üß (s All.‚à∑ weaken-env H‚äÜ Œ≥)
--   ‚ü¶ tabs {e = rnd} Habs ‚üß _ = tt
--   ‚ü¶ tapp Hf Ht ‚üß {Œò} Œ≥ = ‚ü¶ Hf ‚üß Œ≥ ‚äÜ-refl (‚ü¶ Ht ‚üß Œ≥)
--   ‚ü¶ tprim Hœï _ Hts ‚üß {Œò} Œ≥ =
--     _ , ùîâ-compose (Œª i ‚Üí ‚ü¶ Hts i ‚üß Œ≥ .œÄ‚ÇÇ) (ùîâ-promote (ùîâ-prim Hœï))
--   ‚ü¶ treal {r = r} _ ‚üß {Œò} Œ≥ =
--     _ , ùîâ-compose {g = Œª _ ()} (Œª ()) (ùîâ-promote (ùîâ-const r))
--   ‚ü¶ ttup _ Hts ‚üß {Œò} Œ≥ i = ‚ü¶ Hts i ‚üß Œ≥
--   ‚ü¶ tproj i Ht ‚üß {Œò} Œ≥ = ‚ü¶ Ht ‚üß Œ≥ i
--   ‚ü¶ tif Ht Ht‚ÇÅ Ht‚ÇÇ ‚üß {Œò} Œ≥ =
--     if-denot (‚ü¶ Ht ‚üß Œ≥) (‚ü¶ Ht‚ÇÅ ‚üß Œ≥) (‚ü¶ Ht‚ÇÇ ‚üß Œ≥)
--   ‚ü¶ tdiff {n = n} {m} {c} {cs = cs} {cs‚Ä≤} H‚â§‚ÇÅ H‚â§‚ÇÇ Hf Ht ‚üß {Œò} Œ≥ =
--     abs-real-denot {T = c ‚äô treals m cs‚Ä≤} Œª j ‚Üí
--       let fapp = app-real-denot {T = c ‚äô treals m cs‚Ä≤} (‚ü¶ Hf ‚üß Œ≥)
--           fdiff = ùîâ-diff _ (Œª i ‚Üí ‚äî‚Ä≤.‚äî-lub H‚â§‚ÇÇ (H‚â§‚ÇÅ i))
--                          (fapp j .œÄ‚ÇÇ) (Œª Œ∏ ‚Üí ùîâ-papply (fapp j .œÄ‚ÇÇ) Œ∏)
--       in
--       _ , ùîâ-compose
--            ((ùîâ-compose‚Ä≤ getŒò (Œª i ‚Üí ‚ü¶ Ht ‚üß Œ≥ i .œÄ‚ÇÇ) <++> getAs) <++> getŒò)
--            (ùîâ-sub sig-‚â§ ‚â§refl fdiff)
--     where
--       _<++>_ = ùîâ-++
--       getAs = ùîâ-proj‚Ä≤ (‚äÜ-++‚Å∫ ≥ _ ‚äÜ-refl)
--       getŒò = ùîâ-proj‚Ä≤ (‚äÜ-++‚Å∫À° _ ‚äÜ-refl)
--       sig-‚â§ : ‚àÄ i ‚Üí
--         œÄ[ i ] ((map (c ‚äî‚Ä≤_) cs ++ replicate n A) ++ Œò) ‚â§‚Ä≤
--         œÄ[ i ] ((map (c ‚äî‚Ä≤_) cs ++ replicate n (c ‚äî‚Ä≤ A)) ++ Œò)
--       sig-‚â§ i with splitAt (n + n) i
--       ... | Œπ‚ÇÇ j = ‚â§refl
--       ... | Œπ‚ÇÅ i‚Ä≤ with splitAt n i‚Ä≤
--       ...   | Œπ‚ÇÅ k = ‚â§refl
--       ...   | Œπ‚ÇÇ l = ‚äî‚Ä≤.x‚â§y‚äîx _ _
--   ‚ü¶ tsolve Hf Ht‚ÇÅ Ht‚ÇÇ ‚üß {Œò} Œ≥ = {!!}
--   ‚ü¶ tdist HD _ Hts ‚üß {Œò} Œ≥ = tt
--   ‚ü¶ tinfer Ht ‚üß {Œò} Œ≥ = tt
--   ‚ü¶ tsub {e = det} Ht _ Hsub ‚üß {Œò} Œ≥ =
--     sub-compat (sub-‚äô-mono Hsub) $ ‚ü¶ Ht ‚üß Œ≥
--   ‚ü¶ tpromote Ht H‚â§ ‚üß {Œò} Œ≥ =
--     subst (Œª T ‚Üí ‚ü¶ T ‚üß·µÄ Œò) H‚â° $ ‚ü¶ Ht ‚üß Œ≥
--     where H‚â° = ap (_‚äô _) (symm $ i‚â§j‚áíi‚äî‚Ä≤j‚â°j H‚â§) Ôºõ ‚äô-action _
--   ‚ü¶ tdemote Ht H‚â§ ‚üß {Œò} Œ≥ =
--     subst (Œª T ‚Üí ‚ü¶ T ‚üß·µÄ Œò) H‚â° $ ‚ü¶ Ht ‚üß Œ≥
--     where H‚â° = symm (‚äô-action _) Ôºõ ap (_‚äô _) (i‚â§j‚áíi‚äî‚Ä≤j‚â°j H‚â§)
